/** 
 * @zh
 * 基于 Unity 6000.0.32f1 接口。
 * @en
 * Based on Unity 6000.0.32f1 api.
 */
declare namespace CS {
    namespace System {
        interface Array$1<T> extends System.Array {
            get_Item(index: number): T;
            set_Item(index: number, value: T): void;
        }
        class Object {
            protected [__keep_incompatibility]: never;
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public GetHashCode(): number
            public GetType(): System.Type
            public ToString(): string
            public static ReferenceEquals($objA: any, $objB: any): boolean
            public constructor()
        }
        class ValueType extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        class Boolean extends System.ValueType implements System.IComparable, System.IComparable$1<boolean>, System.IConvertible, System.IEquatable$1<boolean> {
            protected [__keep_incompatibility]: never;
        }
        interface IComparable {
        }
        interface IComparable$1<T> {
        }
        interface IConvertible {
        }
        interface IEquatable$1<T> {
        }
        class String extends System.Object implements System.ICloneable, System.IComparable, System.IComparable$1<string>, System.IConvertible, System.Collections.Generic.IEnumerable$1<number>, System.Collections.IEnumerable, System.IEquatable$1<string> {
            protected [__keep_incompatibility]: never;
            public static Empty: string
            public get Length(): number;
            public get Chars(): number;
            public static Compare($strA: string, $strB: string): number
            public static Compare($strA: string, $strB: string, $ignoreCase: boolean): number
            public static Compare($strA: string, $strB: string, $comparisonType: System.StringComparison): number
            public static Compare($strA: string, $strB: string, $culture: System.Globalization.CultureInfo, $options: System.Globalization.CompareOptions): number
            public static Compare($strA: string, $strB: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo): number
            public static Compare($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number): number
            public static Compare($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $ignoreCase: boolean): number
            public static Compare($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo): number
            public static Compare($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $culture: System.Globalization.CultureInfo, $options: System.Globalization.CompareOptions): number
            public static Compare($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number, $comparisonType: System.StringComparison): number
            public static CompareOrdinal($strA: string, $strB: string): number
            public static CompareOrdinal($strA: string, $indexA: number, $strB: string, $indexB: number, $length: number): number
            public CompareTo($value: any): number
            public CompareTo($strB: string): number
            public EndsWith($value: string): boolean
            public EndsWith($value: string, $comparisonType: System.StringComparison): boolean
            public EndsWith($value: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo): boolean
            public EndsWith($value: number): boolean
            public Equals($obj: any): boolean
            public Equals($value: string): boolean
            public Equals($value: string, $comparisonType: System.StringComparison): boolean
            public static Equals($a: string, $b: string): boolean
            public static Equals($a: string, $b: string, $comparisonType: System.StringComparison): boolean
            public static op_Equality($a: string, $b: string): boolean
            public static op_Inequality($a: string, $b: string): boolean
            public GetHashCode(): number
            public GetHashCode($comparisonType: System.StringComparison): number
            public StartsWith($value: string): boolean
            public StartsWith($value: string, $comparisonType: System.StringComparison): boolean
            public StartsWith($value: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo): boolean
            public StartsWith($value: number): boolean
            public static Concat($arg0: any): string
            public static Concat($arg0: any, $arg1: any): string
            public static Concat($arg0: any, $arg1: any, $arg2: any): string
            public static Concat(...args: any[]): string
            public static Concat($values: System.Collections.Generic.IEnumerable$1<string>): string
            public static Concat($str0: string, $str1: string): string
            public static Concat($str0: string, $str1: string, $str2: string): string
            public static Concat($str0: string, $str1: string, $str2: string, $str3: string): string
            public static Concat(...values: string[]): string
            public static Format($format: string, $arg0: any): string
            public static Format($format: string, $arg0: any, $arg1: any): string
            public static Format($format: string, $arg0: any, $arg1: any, $arg2: any): string
            public static Format($format: string, ...args: any[]): string
            public static Format($provider: System.IFormatProvider, $format: string, $arg0: any): string
            public static Format($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any): string
            public static Format($provider: System.IFormatProvider, $format: string, $arg0: any, $arg1: any, $arg2: any): string
            public static Format($provider: System.IFormatProvider, $format: string, ...args: any[]): string
            public Insert($startIndex: number, $value: string): string
            public static Join($separator: number, ...value: string[]): string
            public static Join($separator: number, ...values: any[]): string
            public static Join($separator: number, $value: System.Array$1<string>, $startIndex: number, $count: number): string
            public static Join($separator: string, ...value: string[]): string
            public static Join($separator: string, ...values: any[]): string
            public static Join($separator: string, $values: System.Collections.Generic.IEnumerable$1<string>): string
            public static Join($separator: string, $value: System.Array$1<string>, $startIndex: number, $count: number): string
            public PadLeft($totalWidth: number): string
            public PadLeft($totalWidth: number, $paddingChar: number): string
            public PadRight($totalWidth: number): string
            public PadRight($totalWidth: number, $paddingChar: number): string
            public Remove($startIndex: number, $count: number): string
            public Remove($startIndex: number): string
            public Replace($oldValue: string, $newValue: string, $ignoreCase: boolean, $culture: System.Globalization.CultureInfo): string
            public Replace($oldValue: string, $newValue: string, $comparisonType: System.StringComparison): string
            public Replace($oldChar: number, $newChar: number): string
            public Replace($oldValue: string, $newValue: string): string
            public Split($separator: number, $options?: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: number, $count: number, $options?: System.StringSplitOptions): System.Array$1<string>
            public Split(...separator: number[]): System.Array$1<string>
            public Split($separator: System.Array$1<number>, $count: number): System.Array$1<string>
            public Split($separator: System.Array$1<number>, $options: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: System.Array$1<number>, $count: number, $options: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: string, $options?: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: string, $count: number, $options?: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: System.Array$1<string>, $options: System.StringSplitOptions): System.Array$1<string>
            public Split($separator: System.Array$1<string>, $count: number, $options: System.StringSplitOptions): System.Array$1<string>
            public Substring($startIndex: number): string
            public Substring($startIndex: number, $length: number): string
            public ToLower(): string
            public ToLower($culture: System.Globalization.CultureInfo): string
            public ToLowerInvariant(): string
            public ToUpper(): string
            public ToUpper($culture: System.Globalization.CultureInfo): string
            public ToUpperInvariant(): string
            public Trim(): string
            public Trim($trimChar: number): string
            public Trim(...trimChars: number[]): string
            public TrimStart(): string
            public TrimStart($trimChar: number): string
            public TrimStart(...trimChars: number[]): string
            public TrimEnd(): string
            public TrimEnd($trimChar: number): string
            public TrimEnd(...trimChars: number[]): string
            public Contains($value: string): boolean
            public Contains($value: string, $comparisonType: System.StringComparison): boolean
            public Contains($value: number): boolean
            public Contains($value: number, $comparisonType: System.StringComparison): boolean
            public IndexOf($value: number): number
            public IndexOf($value: number, $startIndex: number): number
            public IndexOf($value: number, $comparisonType: System.StringComparison): number
            public IndexOf($value: number, $startIndex: number, $count: number): number
            public IndexOfAny($anyOf: System.Array$1<number>): number
            public IndexOfAny($anyOf: System.Array$1<number>, $startIndex: number): number
            public IndexOfAny($anyOf: System.Array$1<number>, $startIndex: number, $count: number): number
            public IndexOf($value: string): number
            public IndexOf($value: string, $startIndex: number): number
            public IndexOf($value: string, $startIndex: number, $count: number): number
            public IndexOf($value: string, $comparisonType: System.StringComparison): number
            public IndexOf($value: string, $startIndex: number, $comparisonType: System.StringComparison): number
            public IndexOf($value: string, $startIndex: number, $count: number, $comparisonType: System.StringComparison): number
            public LastIndexOf($value: number): number
            public LastIndexOf($value: number, $startIndex: number): number
            public LastIndexOf($value: number, $startIndex: number, $count: number): number
            public LastIndexOfAny($anyOf: System.Array$1<number>): number
            public LastIndexOfAny($anyOf: System.Array$1<number>, $startIndex: number): number
            public LastIndexOfAny($anyOf: System.Array$1<number>, $startIndex: number, $count: number): number
            public LastIndexOf($value: string): number
            public LastIndexOf($value: string, $startIndex: number): number
            public LastIndexOf($value: string, $startIndex: number, $count: number): number
            public LastIndexOf($value: string, $comparisonType: System.StringComparison): number
            public LastIndexOf($value: string, $startIndex: number, $comparisonType: System.StringComparison): number
            public LastIndexOf($value: string, $startIndex: number, $count: number, $comparisonType: System.StringComparison): number
            public Clone(): any
            public static Copy($str: string): string
            public CopyTo($sourceIndex: number, $destination: System.Array$1<number>, $destinationIndex: number, $count: number): void
            public ToCharArray(): System.Array$1<number>
            public ToCharArray($startIndex: number, $length: number): System.Array$1<number>
            public static IsNullOrEmpty($value: string): boolean
            public static IsNullOrWhiteSpace($value: string): boolean
            public ToString(): string
            public ToString($provider: System.IFormatProvider): string
            public GetEnumerator(): System.CharEnumerator
            public GetTypeCode(): System.TypeCode
            public IsNormalized(): boolean
            public IsNormalized($normalizationForm: System.Text.NormalizationForm): boolean
            public Normalize(): string
            public Normalize($normalizationForm: System.Text.NormalizationForm): string
            public static Concat($arg0: any, $arg1: any, $arg2: any, $arg3: any): string
            public get_Chars($index: number): number
            public static Intern($str: string): string
            public static IsInterned($str: string): string
            public constructor($value: System.Array$1<number>)
            public constructor($value: System.Array$1<number>, $startIndex: number, $length: number)
            public constructor($c: number, $count: number)
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        interface ICloneable {
        }
        class Char extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        interface IFormattable {
        }
        class Enum extends System.ValueType implements System.IFormattable, System.IComparable, System.IConvertible {
            protected [__keep_incompatibility]: never;
            public static Parse($enumType: System.Type, $value: string): any
            public static Parse($enumType: System.Type, $value: string, $ignoreCase: boolean): any
            public static GetUnderlyingType($enumType: System.Type): System.Type
            public static GetValues($enumType: System.Type): System.Array
            public static GetName($enumType: System.Type, $value: any): string
            public static GetNames($enumType: System.Type): System.Array$1<string>
            public static ToObject($enumType: System.Type, $value: any): any
            public static IsDefined($enumType: System.Type, $value: any): boolean
            public static Format($enumType: System.Type, $value: any, $format: string): string
            public ToString(): string
            public CompareTo($target: any): number
            public ToString($format: string): string
            public HasFlag($flag: System.Enum): boolean
            public GetTypeCode(): System.TypeCode
            public static ToObject($enumType: System.Type, $value: number): any
            public static ToObject($enumType: System.Type, $value: bigint): any
            public static TryParse($enumType: System.Type, $value: string, $ignoreCase: boolean, $result: $Ref<any>): boolean
            public static TryParse($enumType: System.Type, $value: string, $result: $Ref<any>): boolean
        }
        class Void extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        class Int32 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        interface ISpanFormattable {
        }
        class Delegate extends System.Object implements System.Runtime.Serialization.ISerializable, System.ICloneable {
            protected [__keep_incompatibility]: never;
            public get Method(): System.Reflection.MethodInfo;
            public get Target(): any;
            public static CreateDelegate($type: System.Type, $firstArgument: any, $method: System.Reflection.MethodInfo, $throwOnBindFailure: boolean): Function
            public static CreateDelegate($type: System.Type, $firstArgument: any, $method: System.Reflection.MethodInfo): Function
            public static CreateDelegate($type: System.Type, $method: System.Reflection.MethodInfo, $throwOnBindFailure: boolean): Function
            public static CreateDelegate($type: System.Type, $method: System.Reflection.MethodInfo): Function
            public static CreateDelegate($type: System.Type, $target: any, $method: string): Function
            public static CreateDelegate($type: System.Type, $target: System.Type, $method: string, $ignoreCase: boolean, $throwOnBindFailure: boolean): Function
            public static CreateDelegate($type: System.Type, $target: System.Type, $method: string): Function
            public static CreateDelegate($type: System.Type, $target: System.Type, $method: string, $ignoreCase: boolean): Function
            public static CreateDelegate($type: System.Type, $target: any, $method: string, $ignoreCase: boolean, $throwOnBindFailure: boolean): Function
            public static CreateDelegate($type: System.Type, $target: any, $method: string, $ignoreCase: boolean): Function
            public DynamicInvoke(...args: any[]): any
            public Clone(): any
            public GetObjectData($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext): void
            public GetInvocationList(): System.Array$1<Function>
            public static Combine($a: Function, $b: Function): Function
            public static Combine(...delegates: Function[]): Function
            public static Remove($source: Function, $value: Function): Function
            public static RemoveAll($source: Function, $value: Function): Function
            public static op_Equality($d1: Function, $d2: Function): boolean
            public static op_Inequality($d1: Function, $d2: Function): boolean
        }
        interface MulticastDelegate {
            (...args: any[]): any;
            Invoke?: (...args: any[]) => any;
        }
        var MulticastDelegate: { new(func: (...args: any[]) => any): MulticastDelegate; }
        interface IAsyncResult {
        }
        interface AsyncCallback {
            (ar: System.IAsyncResult): void;
            Invoke?: (ar: System.IAsyncResult) => void;
        }
        var AsyncCallback: { new(func: (ar: System.IAsyncResult) => void): AsyncCallback; }
        class IntPtr extends System.ValueType implements System.Runtime.Serialization.ISerializable, System.IEquatable$1<System.IntPtr> {
            protected [__keep_incompatibility]: never;
        }
        class Exception extends System.Object implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
        }
        interface IDisposable {
        }
        class Array extends System.Object implements System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
            protected [__keep_incompatibility]: never;
            public get LongLength(): bigint;
            public get IsFixedSize(): boolean;
            public get IsReadOnly(): boolean;
            public get IsSynchronized(): boolean;
            public get SyncRoot(): any;
            public get Length(): number;
            public get Rank(): number;
            public static CreateInstance($elementType: System.Type, ...lengths: bigint[]): System.Array
            public CopyTo($array: System.Array, $index: number): void
            public Clone(): any
            public static BinarySearch($array: System.Array, $value: any): number
            public static Copy($sourceArray: System.Array, $destinationArray: System.Array, $length: bigint): void
            public static Copy($sourceArray: System.Array, $sourceIndex: bigint, $destinationArray: System.Array, $destinationIndex: bigint, $length: bigint): void
            public CopyTo($array: System.Array, $index: bigint): void
            public GetLongLength($dimension: number): bigint
            public GetValue($index: bigint): any
            public GetValue($index1: bigint, $index2: bigint): any
            public GetValue($index1: bigint, $index2: bigint, $index3: bigint): any
            public GetValue(...indices: bigint[]): any
            public static BinarySearch($array: System.Array, $index: number, $length: number, $value: any): number
            public static BinarySearch($array: System.Array, $value: any, $comparer: System.Collections.IComparer): number
            public static BinarySearch($array: System.Array, $index: number, $length: number, $value: any, $comparer: System.Collections.IComparer): number
            public static IndexOf($array: System.Array, $value: any): number
            public static IndexOf($array: System.Array, $value: any, $startIndex: number): number
            public static IndexOf($array: System.Array, $value: any, $startIndex: number, $count: number): number
            public static LastIndexOf($array: System.Array, $value: any): number
            public static LastIndexOf($array: System.Array, $value: any, $startIndex: number): number
            public static LastIndexOf($array: System.Array, $value: any, $startIndex: number, $count: number): number
            public static Reverse($array: System.Array): void
            public static Reverse($array: System.Array, $index: number, $length: number): void
            public SetValue($value: any, $index: bigint): void
            public SetValue($value: any, $index1: bigint, $index2: bigint): void
            public SetValue($value: any, $index1: bigint, $index2: bigint, $index3: bigint): void
            public SetValue($value: any, ...indices: bigint[]): void
            public static Sort($array: System.Array): void
            public static Sort($array: System.Array, $index: number, $length: number): void
            public static Sort($array: System.Array, $comparer: System.Collections.IComparer): void
            public static Sort($array: System.Array, $index: number, $length: number, $comparer: System.Collections.IComparer): void
            public static Sort($keys: System.Array, $items: System.Array): void
            public static Sort($keys: System.Array, $items: System.Array, $comparer: System.Collections.IComparer): void
            public static Sort($keys: System.Array, $items: System.Array, $index: number, $length: number): void
            public static Sort($keys: System.Array, $items: System.Array, $index: number, $length: number, $comparer: System.Collections.IComparer): void
            public GetEnumerator(): System.Collections.IEnumerator
            public GetLength($dimension: number): number
            public GetLowerBound($dimension: number): number
            public GetValue(...indices: number[]): any
            public SetValue($value: any, ...indices: number[]): void
            public GetUpperBound($dimension: number): number
            public GetValue($index: number): any
            public GetValue($index1: number, $index2: number): any
            public GetValue($index1: number, $index2: number, $index3: number): any
            public SetValue($value: any, $index: number): void
            public SetValue($value: any, $index1: number, $index2: number): void
            public SetValue($value: any, $index1: number, $index2: number, $index3: number): void
            public static CreateInstance($elementType: System.Type, $length: number): System.Array
            public static CreateInstance($elementType: System.Type, $length1: number, $length2: number): System.Array
            public static CreateInstance($elementType: System.Type, $length1: number, $length2: number, $length3: number): System.Array
            public static CreateInstance($elementType: System.Type, ...lengths: number[]): System.Array
            public static CreateInstance($elementType: System.Type, $lengths: System.Array$1<number>, $lowerBounds: System.Array$1<number>): System.Array
            public static Clear($array: System.Array, $index: number, $length: number): void
            public static Copy($sourceArray: System.Array, $destinationArray: System.Array, $length: number): void
            public static Copy($sourceArray: System.Array, $sourceIndex: number, $destinationArray: System.Array, $destinationIndex: number, $length: number): void
            public static ConstrainedCopy($sourceArray: System.Array, $sourceIndex: number, $destinationArray: System.Array, $destinationIndex: number, $length: number): void
            public Initialize(): void
        }
        class Span$1<T> extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        class SByte extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class Int16 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class Int64 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint> {
            protected [__keep_incompatibility]: never;
        }
        class Single extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class Double extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class Byte extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class Attribute extends System.Object implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
        }
        class Type extends System.Reflection.MemberInfo implements System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._Type, System.Reflection.ICustomAttributeProvider, System.Reflection.IReflect {
            protected [__keep_incompatibility]: never;
            public static Delimiter: number
            public static EmptyTypes: System.Array$1<System.Type>
            public static Missing: any
            public static FilterAttribute: System.Reflection.MemberFilter
            public static FilterName: System.Reflection.MemberFilter
            public static FilterNameIgnoreCase: System.Reflection.MemberFilter
            public get IsSerializable(): boolean;
            public get ContainsGenericParameters(): boolean;
            public get IsVisible(): boolean;
            public get MemberType(): System.Reflection.MemberTypes;
            public get Namespace(): string;
            public get AssemblyQualifiedName(): string;
            public get FullName(): string;
            public get Assembly(): System.Reflection.Assembly;
            public get Module(): System.Reflection.Module;
            public get IsNested(): boolean;
            public get DeclaringType(): System.Type;
            public get DeclaringMethod(): System.Reflection.MethodBase;
            public get ReflectedType(): System.Type;
            public get UnderlyingSystemType(): System.Type;
            public get IsTypeDefinition(): boolean;
            public get IsArray(): boolean;
            public get IsByRef(): boolean;
            public get IsPointer(): boolean;
            public get IsConstructedGenericType(): boolean;
            public get IsGenericParameter(): boolean;
            public get IsGenericTypeParameter(): boolean;
            public get IsGenericMethodParameter(): boolean;
            public get IsGenericType(): boolean;
            public get IsGenericTypeDefinition(): boolean;
            public get IsVariableBoundArray(): boolean;
            public get IsByRefLike(): boolean;
            public get HasElementType(): boolean;
            public get GenericTypeArguments(): System.Array$1<System.Type>;
            public get GenericParameterPosition(): number;
            public get GenericParameterAttributes(): System.Reflection.GenericParameterAttributes;
            public get Attributes(): System.Reflection.TypeAttributes;
            public get IsAbstract(): boolean;
            public get IsImport(): boolean;
            public get IsSealed(): boolean;
            public get IsSpecialName(): boolean;
            public get IsClass(): boolean;
            public get IsNestedAssembly(): boolean;
            public get IsNestedFamANDAssem(): boolean;
            public get IsNestedFamily(): boolean;
            public get IsNestedFamORAssem(): boolean;
            public get IsNestedPrivate(): boolean;
            public get IsNestedPublic(): boolean;
            public get IsNotPublic(): boolean;
            public get IsPublic(): boolean;
            public get IsAutoLayout(): boolean;
            public get IsExplicitLayout(): boolean;
            public get IsLayoutSequential(): boolean;
            public get IsAnsiClass(): boolean;
            public get IsAutoClass(): boolean;
            public get IsUnicodeClass(): boolean;
            public get IsCOMObject(): boolean;
            public get IsContextful(): boolean;
            public get IsEnum(): boolean;
            public get IsMarshalByRef(): boolean;
            public get IsPrimitive(): boolean;
            public get IsValueType(): boolean;
            public get IsSignatureType(): boolean;
            public get IsSecurityCritical(): boolean;
            public get IsSecuritySafeCritical(): boolean;
            public get IsSecurityTransparent(): boolean;
            public get StructLayoutAttribute(): System.Runtime.InteropServices.StructLayoutAttribute;
            public get TypeInitializer(): System.Reflection.ConstructorInfo;
            public get TypeHandle(): System.RuntimeTypeHandle;
            public get GUID(): System.Guid;
            public get BaseType(): System.Type;
            public static get DefaultBinder(): System.Reflection.Binder;
            public get IsInterface(): boolean;
            public IsEnumDefined($value: any): boolean
            public GetEnumName($value: any): string
            public GetEnumNames(): System.Array$1<string>
            public FindInterfaces($filter: System.Reflection.TypeFilter, $filterCriteria: any): System.Array$1<System.Type>
            public FindMembers($memberType: System.Reflection.MemberTypes, $bindingAttr: System.Reflection.BindingFlags, $filter: System.Reflection.MemberFilter, $filterCriteria: any): System.Array$1<System.Reflection.MemberInfo>
            public IsSubclassOf($c: System.Type): boolean
            public IsAssignableFrom($c: System.Type): boolean
            public GetType(): System.Type
            public GetElementType(): System.Type
            public GetArrayRank(): number
            public GetGenericTypeDefinition(): System.Type
            public GetGenericArguments(): System.Array$1<System.Type>
            public GetGenericParameterConstraints(): System.Array$1<System.Type>
            public GetConstructor($types: System.Array$1<System.Type>): System.Reflection.ConstructorInfo
            public GetConstructor($bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.ConstructorInfo
            public GetConstructor($bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.ConstructorInfo
            public GetConstructors(): System.Array$1<System.Reflection.ConstructorInfo>
            public GetConstructors($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.ConstructorInfo>
            public GetEvent($name: string): System.Reflection.EventInfo
            public GetEvent($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Reflection.EventInfo
            public GetEvents(): System.Array$1<System.Reflection.EventInfo>
            public GetEvents($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.EventInfo>
            public GetField($name: string): System.Reflection.FieldInfo
            public GetField($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo
            public GetFields(): System.Array$1<System.Reflection.FieldInfo>
            public GetFields($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.FieldInfo>
            public GetMember($name: string): System.Array$1<System.Reflection.MemberInfo>
            public GetMember($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.MemberInfo>
            public GetMember($name: string, $type: System.Reflection.MemberTypes, $bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.MemberInfo>
            public GetMembers(): System.Array$1<System.Reflection.MemberInfo>
            public GetMembers($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.MemberInfo>
            public GetMethod($name: string): System.Reflection.MethodInfo
            public GetMethod($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo
            public GetMethod($name: string, $types: System.Array$1<System.Type>): System.Reflection.MethodInfo
            public GetMethod($name: string, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethod($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethod($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethod($name: string, $genericParameterCount: number, $types: System.Array$1<System.Type>): System.Reflection.MethodInfo
            public GetMethod($name: string, $genericParameterCount: number, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethod($name: string, $genericParameterCount: number, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethod($name: string, $genericParameterCount: number, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $callConvention: System.Reflection.CallingConventions, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.MethodInfo
            public GetMethods(): System.Array$1<System.Reflection.MethodInfo>
            public GetMethods($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.MethodInfo>
            public GetNestedType($name: string): System.Type
            public GetNestedType($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Type
            public GetNestedTypes(): System.Array$1<System.Type>
            public GetNestedTypes($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Type>
            public GetProperty($name: string): System.Reflection.PropertyInfo
            public GetProperty($name: string, $bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo
            public GetProperty($name: string, $returnType: System.Type): System.Reflection.PropertyInfo
            public GetProperty($name: string, $types: System.Array$1<System.Type>): System.Reflection.PropertyInfo
            public GetProperty($name: string, $returnType: System.Type, $types: System.Array$1<System.Type>): System.Reflection.PropertyInfo
            public GetProperty($name: string, $returnType: System.Type, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.PropertyInfo
            public GetProperty($name: string, $bindingAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $returnType: System.Type, $types: System.Array$1<System.Type>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>): System.Reflection.PropertyInfo
            public GetProperties(): System.Array$1<System.Reflection.PropertyInfo>
            public GetProperties($bindingAttr: System.Reflection.BindingFlags): System.Array$1<System.Reflection.PropertyInfo>
            public GetDefaultMembers(): System.Array$1<System.Reflection.MemberInfo>
            public static GetTypeHandle($o: any): System.RuntimeTypeHandle
            public static GetTypeArray($args: System.Array$1<any>): System.Array$1<System.Type>
            public static GetTypeCode($type: System.Type): System.TypeCode
            public static GetTypeFromCLSID($clsid: System.Guid): System.Type
            public static GetTypeFromCLSID($clsid: System.Guid, $throwOnError: boolean): System.Type
            public static GetTypeFromCLSID($clsid: System.Guid, $server: string): System.Type
            public static GetTypeFromProgID($progID: string): System.Type
            public static GetTypeFromProgID($progID: string, $throwOnError: boolean): System.Type
            public static GetTypeFromProgID($progID: string, $server: string): System.Type
            public InvokeMember($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>): any
            public InvokeMember($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>, $culture: System.Globalization.CultureInfo): any
            public InvokeMember($name: string, $invokeAttr: System.Reflection.BindingFlags, $binder: System.Reflection.Binder, $target: any, $args: System.Array$1<any>, $modifiers: System.Array$1<System.Reflection.ParameterModifier>, $culture: System.Globalization.CultureInfo, $namedParameters: System.Array$1<string>): any
            public GetInterface($name: string): System.Type
            public GetInterface($name: string, $ignoreCase: boolean): System.Type
            public GetInterfaces(): System.Array$1<System.Type>
            public GetInterfaceMap($interfaceType: System.Type): System.Reflection.InterfaceMapping
            public IsInstanceOfType($o: any): boolean
            public IsEquivalentTo($other: System.Type): boolean
            public GetEnumUnderlyingType(): System.Type
            public GetEnumValues(): System.Array
            public MakeArrayType(): System.Type
            public MakeArrayType($rank: number): System.Type
            public MakeByRefType(): System.Type
            public MakeGenericType(...typeArguments: System.Type[]): System.Type
            public MakePointerType(): System.Type
            public static MakeGenericMethodParameter($position: number): System.Type
            public Equals($o: any): boolean
            public Equals($o: System.Type): boolean
            public static GetTypeFromHandle($handle: System.RuntimeTypeHandle): System.Type
            public static GetType($typeName: string, $throwOnError: boolean, $ignoreCase: boolean): System.Type
            public static GetType($typeName: string, $throwOnError: boolean): System.Type
            public static GetType($typeName: string): System.Type
            public static GetType($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>): System.Type
            public static GetType($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>, $throwOnError: boolean): System.Type
            public static GetType($typeName: string, $assemblyResolver: System.Func$2<System.Reflection.AssemblyName, System.Reflection.Assembly>, $typeResolver: System.Func$4<System.Reflection.Assembly, string, boolean, System.Type>, $throwOnError: boolean, $ignoreCase: boolean): System.Type
            public static op_Equality($left: System.Type, $right: System.Type): boolean
            public static op_Inequality($left: System.Type, $right: System.Type): boolean
            public static ReflectionOnlyGetType($typeName: string, $throwIfNotFound: boolean, $ignoreCase: boolean): System.Type
            public static GetTypeFromCLSID($clsid: System.Guid, $server: string, $throwOnError: boolean): System.Type
            public static GetTypeFromProgID($progID: string, $server: string, $throwOnError: boolean): System.Type
            public static op_Equality($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo): boolean
            public static op_Inequality($left: System.Reflection.MemberInfo, $right: System.Reflection.MemberInfo): boolean
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
        }
        class UInt32 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class UInt64 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint> {
            protected [__keep_incompatibility]: never;
        }
        class MarshalByRefObject extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        interface IAsyncDisposable {
        }
        interface Action$1<T> {
            (obj: T): void;
            Invoke?: (obj: T) => void;
        }
        class Nullable$1<T> extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        interface Func$1<TResult> {
            (): TResult;
            Invoke?: () => TResult;
        }
        interface Action {
            (): void;
            Invoke?: () => void;
        }
        var Action: { new(func: () => void): Action; }
        interface Action$2<T1, T2> {
            (arg1: T1, arg2: T2): void;
            Invoke?: (arg1: T1, arg2: T2) => void;
        }
        class DateTime extends System.ValueType implements System.IFormattable, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IComparable, System.IComparable$1<System.DateTime>, System.IConvertible, System.IEquatable$1<System.DateTime> {
            protected [__keep_incompatibility]: never;
            public static MinValue: System.DateTime
            public static MaxValue: System.DateTime
            public static UnixEpoch: System.DateTime
            public get Date(): System.DateTime;
            public get Day(): number;
            public get DayOfWeek(): System.DayOfWeek;
            public get DayOfYear(): number;
            public get Hour(): number;
            public get Kind(): System.DateTimeKind;
            public get Millisecond(): number;
            public get Minute(): number;
            public get Month(): number;
            public static get Now(): System.DateTime;
            public get Second(): number;
            public get Ticks(): bigint;
            public get TimeOfDay(): System.TimeSpan;
            public static get Today(): System.DateTime;
            public get Year(): number;
            public static get UtcNow(): System.DateTime;
            public Add($value: System.TimeSpan): System.DateTime
            public AddDays($value: number): System.DateTime
            public AddHours($value: number): System.DateTime
            public AddMilliseconds($value: number): System.DateTime
            public AddMinutes($value: number): System.DateTime
            public AddMonths($months: number): System.DateTime
            public AddSeconds($value: number): System.DateTime
            public AddTicks($value: bigint): System.DateTime
            public AddYears($value: number): System.DateTime
            public static Compare($t1: System.DateTime, $t2: System.DateTime): number
            public CompareTo($value: any): number
            public CompareTo($value: System.DateTime): number
            public static DaysInMonth($year: number, $month: number): number
            public Equals($value: any): boolean
            public Equals($value: System.DateTime): boolean
            public static Equals($t1: System.DateTime, $t2: System.DateTime): boolean
            public static FromBinary($dateData: bigint): System.DateTime
            public static FromFileTime($fileTime: bigint): System.DateTime
            public static FromFileTimeUtc($fileTime: bigint): System.DateTime
            public static FromOADate($d: number): System.DateTime
            public IsDaylightSavingTime(): boolean
            public static SpecifyKind($value: System.DateTime, $kind: System.DateTimeKind): System.DateTime
            public ToBinary(): bigint
            public static IsLeapYear($year: number): boolean
            public static Parse($s: string): System.DateTime
            public static Parse($s: string, $provider: System.IFormatProvider): System.DateTime
            public static Parse($s: string, $provider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles): System.DateTime
            public static ParseExact($s: string, $format: string, $provider: System.IFormatProvider): System.DateTime
            public static ParseExact($s: string, $format: string, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles): System.DateTime
            public static ParseExact($s: string, $formats: System.Array$1<string>, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles): System.DateTime
            public Subtract($value: System.DateTime): System.TimeSpan
            public Subtract($value: System.TimeSpan): System.DateTime
            public ToOADate(): number
            public ToFileTime(): bigint
            public ToFileTimeUtc(): bigint
            public ToLocalTime(): System.DateTime
            public ToLongDateString(): string
            public ToLongTimeString(): string
            public ToShortDateString(): string
            public ToShortTimeString(): string
            public ToString(): string
            public ToString($format: string): string
            public ToString($provider: System.IFormatProvider): string
            public ToString($format: string, $provider: System.IFormatProvider): string
            public ToUniversalTime(): System.DateTime
            public static TryParse($s: string, $result: $Ref<System.DateTime>): boolean
            public static TryParse($s: string, $provider: System.IFormatProvider, $styles: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTime>): boolean
            public static TryParseExact($s: string, $format: string, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTime>): boolean
            public static TryParseExact($s: string, $formats: System.Array$1<string>, $provider: System.IFormatProvider, $style: System.Globalization.DateTimeStyles, $result: $Ref<System.DateTime>): boolean
            public static op_Addition($d: System.DateTime, $t: System.TimeSpan): System.DateTime
            public static op_Subtraction($d: System.DateTime, $t: System.TimeSpan): System.DateTime
            public static op_Subtraction($d1: System.DateTime, $d2: System.DateTime): System.TimeSpan
            public static op_Equality($d1: System.DateTime, $d2: System.DateTime): boolean
            public static op_Inequality($d1: System.DateTime, $d2: System.DateTime): boolean
            public static op_LessThan($t1: System.DateTime, $t2: System.DateTime): boolean
            public static op_LessThanOrEqual($t1: System.DateTime, $t2: System.DateTime): boolean
            public static op_GreaterThan($t1: System.DateTime, $t2: System.DateTime): boolean
            public static op_GreaterThanOrEqual($t1: System.DateTime, $t2: System.DateTime): boolean
            public GetDateTimeFormats(): System.Array$1<string>
            public GetDateTimeFormats($provider: System.IFormatProvider): System.Array$1<string>
            public GetDateTimeFormats($format: number): System.Array$1<string>
            public GetDateTimeFormats($format: number, $provider: System.IFormatProvider): System.Array$1<string>
            public GetTypeCode(): System.TypeCode
            public constructor($ticks: bigint)
            public constructor($ticks: bigint, $kind: System.DateTimeKind)
            public constructor($year: number, $month: number, $day: number)
            public constructor($year: number, $month: number, $day: number, $calendar: System.Globalization.Calendar)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $kind: System.DateTimeKind)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $calendar: System.Globalization.Calendar)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $kind: System.DateTimeKind)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $calendar: System.Globalization.Calendar)
            public constructor($year: number, $month: number, $day: number, $hour: number, $minute: number, $second: number, $millisecond: number, $calendar: System.Globalization.Calendar, $kind: System.DateTimeKind)
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        interface IFormatProvider {
        }
        class ReadOnlySpan$1<T> extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        class UInt16 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number> {
            protected [__keep_incompatibility]: never;
        }
        class SystemException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
        }
        interface Action$3<T1, T2, T3> {
            (arg1: T1, arg2: T2, arg3: T3): void;
            Invoke?: (arg1: T1, arg2: T2, arg3: T3) => void;
        }
        interface Func$2<T, TResult> {
            (arg: T): TResult;
            Invoke?: (arg: T) => TResult;
        }
        interface Func$3<T1, T2, TResult> {
            (arg1: T1, arg2: T2): TResult;
            Invoke?: (arg1: T1, arg2: T2) => TResult;
        }
        interface Func$4<T1, T2, T3, TResult> {
            (arg1: T1, arg2: T2, arg3: T3): TResult;
            Invoke?: (arg1: T1, arg2: T2, arg3: T3) => TResult;
        }
        interface Action$4<T1, T2, T3, T4> {
            (arg1: T1, arg2: T2, arg3: T3, arg4: T4): void;
            Invoke?: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void;
        }
        interface Converter$2<TInput, TOutput> {
            (input: TInput): TOutput;
            Invoke?: (input: TInput) => TOutput;
        }
        interface Comparison$1<T> {
            (x: T, y: T): number;
            Invoke?: (x: T, y: T) => number;
        }
        interface Predicate$1<T> {
            (obj: T): boolean;
            Invoke?: (obj: T) => boolean;
        }
        class Guid extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<System.Guid>, System.IEquatable$1<System.Guid> {
            protected [__keep_incompatibility]: never;
            public static Empty: System.Guid
            public static NewGuid(): System.Guid
            public static Parse($input: string): System.Guid
            public static TryParse($input: string, $result: $Ref<System.Guid>): boolean
            public static ParseExact($input: string, $format: string): System.Guid
            public static TryParseExact($input: string, $format: string, $result: $Ref<System.Guid>): boolean
            public ToByteArray(): System.Array$1<number>
            public ToString(): string
            public Equals($o: any): boolean
            public Equals($g: System.Guid): boolean
            public CompareTo($value: any): number
            public CompareTo($value: System.Guid): number
            public static op_Equality($a: System.Guid, $b: System.Guid): boolean
            public static op_Inequality($a: System.Guid, $b: System.Guid): boolean
            public ToString($format: string): string
            public ToString($format: string, $provider: System.IFormatProvider): string
            public constructor($b: System.Array$1<number>)
            public constructor($a: number, $b: number, $c: number, $d: number, $e: number, $f: number, $g: number, $h: number, $i: number, $j: number, $k: number)
            public constructor($a: number, $b: number, $c: number, $d: System.Array$1<number>)
            public constructor($g: string)
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        class TimeSpan extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<System.TimeSpan>, System.IEquatable$1<System.TimeSpan> {
            protected [__keep_incompatibility]: never;
        }
        enum DateTimeKind { Unspecified = 0, Utc = 1, Local = 2 }
        enum DayOfWeek { Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6 }
        enum TypeCode { Empty = 0, Object = 1, DBNull = 2, Boolean = 3, Char = 4, SByte = 5, Byte = 6, Int16 = 7, UInt16 = 8, Int32 = 9, UInt32 = 10, Int64 = 11, UInt64 = 12, Single = 13, Double = 14, Decimal = 15, DateTime = 16, String = 18 }
        class RuntimeTypeHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
        }
        class RuntimeMethodHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
        }
        class RuntimeFieldHandle extends System.ValueType implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
        }
        enum StringComparison { CurrentCulture = 0, CurrentCultureIgnoreCase = 1, InvariantCulture = 2, InvariantCultureIgnoreCase = 3, Ordinal = 4, OrdinalIgnoreCase = 5 }
        enum StringSplitOptions { None = 0, RemoveEmptyEntries = 1 }
        class CharEnumerator extends System.Object implements System.ICloneable, System.Collections.Generic.IEnumerator$1<number>, System.IDisposable, System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
            public get Current(): any;
            public MoveNext(): boolean
            public Reset(): void
        }
    }

    namespace System.IO {
        class Stream extends System.MarshalByRefObject implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
            public static Null: System.IO.Stream
            public get CanRead(): boolean;
            public get CanSeek(): boolean;
            public get CanTimeout(): boolean;
            public get CanWrite(): boolean;
            public get Length(): bigint;
            public get Position(): bigint;
            public set Position(value: bigint);
            public get ReadTimeout(): number;
            public set ReadTimeout(value: number);
            public get WriteTimeout(): number;
            public set WriteTimeout(value: number);
            public CopyToAsync($destination: System.IO.Stream): $Task<any>
            public CopyToAsync($destination: System.IO.Stream, $bufferSize: number): $Task<any>
            public CopyToAsync($destination: System.IO.Stream, $cancellationToken: System.Threading.CancellationToken): $Task<any>
            public CopyToAsync($destination: System.IO.Stream, $bufferSize: number, $cancellationToken: System.Threading.CancellationToken): $Task<any>
            public CopyTo($destination: System.IO.Stream): void
            public CopyTo($destination: System.IO.Stream, $bufferSize: number): void
            public Close(): void
            public Dispose(): void
            public Flush(): void
            public FlushAsync(): $Task<any>
            public FlushAsync($cancellationToken: System.Threading.CancellationToken): $Task<any>
            public BeginRead($buffer: System.Array$1<number>, $offset: number, $count: number, $callback: System.AsyncCallback, $state: any): System.IAsyncResult
            public EndRead($asyncResult: System.IAsyncResult): number
            public ReadAsync($buffer: System.Array$1<number>, $offset: number, $count: number): System.Threading.Tasks.Task$1<number>
            public ReadAsync($buffer: System.Array$1<number>, $offset: number, $count: number, $cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<number>
            public BeginWrite($buffer: System.Array$1<number>, $offset: number, $count: number, $callback: System.AsyncCallback, $state: any): System.IAsyncResult
            public EndWrite($asyncResult: System.IAsyncResult): void
            public WriteAsync($buffer: System.Array$1<number>, $offset: number, $count: number): $Task<any>
            public WriteAsync($buffer: System.Array$1<number>, $offset: number, $count: number, $cancellationToken: System.Threading.CancellationToken): $Task<any>
            public Seek($offset: bigint, $origin: System.IO.SeekOrigin): bigint
            public SetLength($value: bigint): void
            public Read($buffer: System.Array$1<number>, $offset: number, $count: number): number
            public ReadByte(): number
            public Write($buffer: System.Array$1<number>, $offset: number, $count: number): void
            public WriteByte($value: number): void
            public static Synchronized($stream: System.IO.Stream): System.IO.Stream
            public DisposeAsync(): System.Threading.Tasks.ValueTask
        }
        enum FileMode { CreateNew = 1, Create = 2, Open = 3, OpenOrCreate = 4, Truncate = 5, Append = 6 }
        class MemoryStream extends System.IO.Stream implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class BinaryReader extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class BinaryWriter extends System.Object implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class File extends System.Object {
            protected [__keep_incompatibility]: never;
            public static OpenText($path: string): System.IO.StreamReader
            public static CreateText($path: string): System.IO.StreamWriter
            public static AppendText($path: string): System.IO.StreamWriter
            public static Copy($sourceFileName: string, $destFileName: string): void
            public static Copy($sourceFileName: string, $destFileName: string, $overwrite: boolean): void
            public static Create($path: string): System.IO.FileStream
            public static Create($path: string, $bufferSize: number): System.IO.FileStream
            public static Create($path: string, $bufferSize: number, $options: System.IO.FileOptions): System.IO.FileStream
            public static Delete($path: string): void
            public static Exists($path: string): boolean
            public static Open($path: string, $mode: System.IO.FileMode): System.IO.FileStream
            public static Open($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess): System.IO.FileStream
            public static Open($path: string, $mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare): System.IO.FileStream
            public static SetCreationTime($path: string, $creationTime: System.DateTime): void
            public static SetCreationTimeUtc($path: string, $creationTimeUtc: System.DateTime): void
            public static GetCreationTime($path: string): System.DateTime
            public static GetCreationTimeUtc($path: string): System.DateTime
            public static SetLastAccessTime($path: string, $lastAccessTime: System.DateTime): void
            public static SetLastAccessTimeUtc($path: string, $lastAccessTimeUtc: System.DateTime): void
            public static GetLastAccessTime($path: string): System.DateTime
            public static GetLastAccessTimeUtc($path: string): System.DateTime
            public static SetLastWriteTime($path: string, $lastWriteTime: System.DateTime): void
            public static SetLastWriteTimeUtc($path: string, $lastWriteTimeUtc: System.DateTime): void
            public static GetLastWriteTime($path: string): System.DateTime
            public static GetLastWriteTimeUtc($path: string): System.DateTime
            public static GetAttributes($path: string): System.IO.FileAttributes
            public static SetAttributes($path: string, $fileAttributes: System.IO.FileAttributes): void
            public static OpenRead($path: string): System.IO.FileStream
            public static OpenWrite($path: string): System.IO.FileStream
            public static ReadAllText($path: string): string
            public static ReadAllText($path: string, $encoding: System.Text.Encoding): string
            public static WriteAllText($path: string, $contents: string): void
            public static WriteAllText($path: string, $contents: string, $encoding: System.Text.Encoding): void
            public static ReadAllBytes($path: string): System.Array$1<number>
            public static WriteAllBytes($path: string, $bytes: System.Array$1<number>): void
            public static ReadAllLines($path: string): System.Array$1<string>
            public static ReadAllLines($path: string, $encoding: System.Text.Encoding): System.Array$1<string>
            public static ReadLines($path: string): System.Collections.Generic.IEnumerable$1<string>
            public static ReadLines($path: string, $encoding: System.Text.Encoding): System.Collections.Generic.IEnumerable$1<string>
            public static WriteAllLines($path: string, $contents: System.Array$1<string>): void
            public static WriteAllLines($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>): void
            public static WriteAllLines($path: string, $contents: System.Array$1<string>, $encoding: System.Text.Encoding): void
            public static WriteAllLines($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding): void
            public static AppendAllText($path: string, $contents: string): void
            public static AppendAllText($path: string, $contents: string, $encoding: System.Text.Encoding): void
            public static AppendAllLines($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>): void
            public static AppendAllLines($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding): void
            public static Replace($sourceFileName: string, $destinationFileName: string, $destinationBackupFileName: string): void
            public static Replace($sourceFileName: string, $destinationFileName: string, $destinationBackupFileName: string, $ignoreMetadataErrors: boolean): void
            public static Move($sourceFileName: string, $destFileName: string): void
            public static Encrypt($path: string): void
            public static Decrypt($path: string): void
            public static ReadAllTextAsync($path: string, $cancellationToken?: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<string>
            public static ReadAllTextAsync($path: string, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<string>
            public static WriteAllTextAsync($path: string, $contents: string, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static WriteAllTextAsync($path: string, $contents: string, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static ReadAllBytesAsync($path: string, $cancellationToken?: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<System.Array$1<number>>
            public static WriteAllBytesAsync($path: string, $bytes: System.Array$1<number>, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static ReadAllLinesAsync($path: string, $cancellationToken?: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<System.Array$1<string>>
            public static ReadAllLinesAsync($path: string, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): System.Threading.Tasks.Task$1<System.Array$1<string>>
            public static WriteAllLinesAsync($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static WriteAllLinesAsync($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static AppendAllTextAsync($path: string, $contents: string, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static AppendAllTextAsync($path: string, $contents: string, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static AppendAllLinesAsync($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
            public static AppendAllLinesAsync($path: string, $contents: System.Collections.Generic.IEnumerable$1<string>, $encoding: System.Text.Encoding, $cancellationToken?: System.Threading.CancellationToken): $Task<any>
        }
        class TextReader extends System.MarshalByRefObject implements System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class StreamReader extends System.IO.TextReader implements System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class TextWriter extends System.MarshalByRefObject implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class StreamWriter extends System.IO.TextWriter implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        class FileStream extends System.IO.Stream implements System.IAsyncDisposable, System.IDisposable {
            protected [__keep_incompatibility]: never;
        }
        enum FileOptions { None = 0, WriteThrough = -2147483648, Asynchronous = 1073741824, RandomAccess = 268435456, DeleteOnClose = 67108864, SequentialScan = 134217728, Encrypted = 16384 }
        enum FileAccess { Read = 1, Write = 2, ReadWrite = 3 }
        enum FileShare { None = 0, Read = 1, Write = 2, ReadWrite = 3, Delete = 4, Inheritable = 16 }
        enum FileAttributes { ReadOnly = 1, Hidden = 2, System = 4, Directory = 16, Archive = 32, Device = 64, Normal = 128, Temporary = 256, SparseFile = 512, ReparsePoint = 1024, Compressed = 2048, Offline = 4096, NotContentIndexed = 8192, Encrypted = 16384, IntegrityStream = 32768, NoScrubData = 131072 }
        class Directory extends System.Object {
            protected [__keep_incompatibility]: never;
            public static GetParent($path: string): System.IO.DirectoryInfo
            public static CreateDirectory($path: string): System.IO.DirectoryInfo
            public static Exists($path: string): boolean
            public static SetCreationTime($path: string, $creationTime: System.DateTime): void
            public static SetCreationTimeUtc($path: string, $creationTimeUtc: System.DateTime): void
            public static GetCreationTime($path: string): System.DateTime
            public static GetCreationTimeUtc($path: string): System.DateTime
            public static SetLastWriteTime($path: string, $lastWriteTime: System.DateTime): void
            public static SetLastWriteTimeUtc($path: string, $lastWriteTimeUtc: System.DateTime): void
            public static GetLastWriteTime($path: string): System.DateTime
            public static GetLastWriteTimeUtc($path: string): System.DateTime
            public static SetLastAccessTime($path: string, $lastAccessTime: System.DateTime): void
            public static SetLastAccessTimeUtc($path: string, $lastAccessTimeUtc: System.DateTime): void
            public static GetLastAccessTime($path: string): System.DateTime
            public static GetLastAccessTimeUtc($path: string): System.DateTime
            public static GetFiles($path: string): System.Array$1<string>
            public static GetFiles($path: string, $searchPattern: string): System.Array$1<string>
            public static GetFiles($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<string>
            public static GetFiles($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<string>
            public static GetDirectories($path: string): System.Array$1<string>
            public static GetDirectories($path: string, $searchPattern: string): System.Array$1<string>
            public static GetDirectories($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<string>
            public static GetDirectories($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<string>
            public static GetFileSystemEntries($path: string): System.Array$1<string>
            public static GetFileSystemEntries($path: string, $searchPattern: string): System.Array$1<string>
            public static GetFileSystemEntries($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<string>
            public static GetFileSystemEntries($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<string>
            public static EnumerateDirectories($path: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateDirectories($path: string, $searchPattern: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateDirectories($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateDirectories($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles($path: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles($path: string, $searchPattern: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFiles($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries($path: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries($path: string, $searchPattern: string): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries($path: string, $searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<string>
            public static EnumerateFileSystemEntries($path: string, $searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<string>
            public static GetDirectoryRoot($path: string): string
            public static GetCurrentDirectory(): string
            public static SetCurrentDirectory($path: string): void
            public static Move($sourceDirName: string, $destDirName: string): void
            public static Delete($path: string): void
            public static Delete($path: string, $recursive: boolean): void
            public static GetLogicalDrives(): System.Array$1<string>
        }
        class FileSystemInfo extends System.MarshalByRefObject implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
            public get Attributes(): System.IO.FileAttributes;
            public set Attributes(value: System.IO.FileAttributes);
            public get FullName(): string;
            public get Extension(): string;
            public get Name(): string;
            public get Exists(): boolean;
            public get CreationTime(): System.DateTime;
            public set CreationTime(value: System.DateTime);
            public get CreationTimeUtc(): System.DateTime;
            public set CreationTimeUtc(value: System.DateTime);
            public get LastAccessTime(): System.DateTime;
            public set LastAccessTime(value: System.DateTime);
            public get LastAccessTimeUtc(): System.DateTime;
            public set LastAccessTimeUtc(value: System.DateTime);
            public get LastWriteTime(): System.DateTime;
            public set LastWriteTime(value: System.DateTime);
            public get LastWriteTimeUtc(): System.DateTime;
            public set LastWriteTimeUtc(value: System.DateTime);
            public Refresh(): void
            public GetObjectData($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext): void
            public Delete(): void
        }
        class DirectoryInfo extends System.IO.FileSystemInfo implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
            public get Parent(): System.IO.DirectoryInfo;
            public get Root(): System.IO.DirectoryInfo;
            public CreateSubdirectory($path: string): System.IO.DirectoryInfo
            public Create(): void
            public GetFiles(): System.Array$1<System.IO.FileInfo>
            public GetFiles($searchPattern: string): System.Array$1<System.IO.FileInfo>
            public GetFiles($searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<System.IO.FileInfo>
            public GetFiles($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<System.IO.FileInfo>
            public GetFileSystemInfos(): System.Array$1<System.IO.FileSystemInfo>
            public GetFileSystemInfos($searchPattern: string): System.Array$1<System.IO.FileSystemInfo>
            public GetFileSystemInfos($searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<System.IO.FileSystemInfo>
            public GetFileSystemInfos($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<System.IO.FileSystemInfo>
            public GetDirectories(): System.Array$1<System.IO.DirectoryInfo>
            public GetDirectories($searchPattern: string): System.Array$1<System.IO.DirectoryInfo>
            public GetDirectories($searchPattern: string, $searchOption: System.IO.SearchOption): System.Array$1<System.IO.DirectoryInfo>
            public GetDirectories($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Array$1<System.IO.DirectoryInfo>
            public EnumerateDirectories(): System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateDirectories($searchPattern: string): System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateDirectories($searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateDirectories($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<System.IO.DirectoryInfo>
            public EnumerateFiles(): System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFiles($searchPattern: string): System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFiles($searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFiles($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<System.IO.FileInfo>
            public EnumerateFileSystemInfos(): System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public EnumerateFileSystemInfos($searchPattern: string): System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public EnumerateFileSystemInfos($searchPattern: string, $searchOption: System.IO.SearchOption): System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public EnumerateFileSystemInfos($searchPattern: string, $enumerationOptions: System.IO.EnumerationOptions): System.Collections.Generic.IEnumerable$1<System.IO.FileSystemInfo>
            public MoveTo($destDirName: string): void
            public Delete(): void
            public Delete($recursive: boolean): void
            public constructor($path: string)
            public constructor()
        }
        enum SearchOption { TopDirectoryOnly = 0, AllDirectories = 1 }
        class EnumerationOptions extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        class FileInfo extends System.IO.FileSystemInfo implements System.Runtime.Serialization.ISerializable {
            protected [__keep_incompatibility]: never;
            public get Length(): bigint;
            public get DirectoryName(): string;
            public get Directory(): System.IO.DirectoryInfo;
            public get IsReadOnly(): boolean;
            public set IsReadOnly(value: boolean);
            public get Name(): string;
            public OpenText(): System.IO.StreamReader
            public CreateText(): System.IO.StreamWriter
            public AppendText(): System.IO.StreamWriter
            public CopyTo($destFileName: string): System.IO.FileInfo
            public CopyTo($destFileName: string, $overwrite: boolean): System.IO.FileInfo
            public Create(): System.IO.FileStream
            public Open($mode: System.IO.FileMode): System.IO.FileStream
            public Open($mode: System.IO.FileMode, $access: System.IO.FileAccess): System.IO.FileStream
            public Open($mode: System.IO.FileMode, $access: System.IO.FileAccess, $share: System.IO.FileShare): System.IO.FileStream
            public OpenRead(): System.IO.FileStream
            public OpenWrite(): System.IO.FileStream
            public MoveTo($destFileName: string): void
            public Replace($destinationFileName: string, $destinationBackupFileName: string): System.IO.FileInfo
            public Replace($destinationFileName: string, $destinationBackupFileName: string, $ignoreMetadataErrors: boolean): System.IO.FileInfo
            public Decrypt(): void
            public Encrypt(): void
            public constructor($fileName: string)
            public constructor()
        }
        class Path extends System.Object {
            protected [__keep_incompatibility]: never;
            public static AltDirectorySeparatorChar: number
            public static DirectorySeparatorChar: number
            public static PathSeparator: number
            public static VolumeSeparatorChar: number
            public static ChangeExtension($path: string, $extension: string): string
            public static Combine($path1: string, $path2: string): string
            public static GetDirectoryName($path: string): string
            public static GetExtension($path: string): string
            public static GetFileName($path: string): string
            public static GetFileNameWithoutExtension($path: string): string
            public static GetFullPath($path: string): string
            public static GetPathRoot($path: string): string
            public static GetTempFileName(): string
            public static GetTempPath(): string
            public static HasExtension($path: string): boolean
            public static IsPathRooted($path: string): boolean
            public static GetInvalidFileNameChars(): System.Array$1<number>
            public static GetInvalidPathChars(): System.Array$1<number>
            public static GetRandomFileName(): string
            public static Combine(...paths: string[]): string
            public static Combine($path1: string, $path2: string, $path3: string): string
            public static Combine($path1: string, $path2: string, $path3: string, $path4: string): string
            public static GetRelativePath($relativeTo: string, $path: string): string
            public static IsPathFullyQualified($path: string): boolean
            public static GetFullPath($path: string, $basePath: string): string
        }
        enum SeekOrigin { Begin = 0, Current = 1, End = 2 }
    }

    namespace System.Collections.Generic {
        interface IEnumerable$1<T> extends System.Collections.IEnumerable {
        }
        interface IReadOnlyList$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<T> {
        }
        interface IReadOnlyCollection$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable {
        }
        interface IList$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<T> {
        }
        interface ICollection$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable {
        }
        class List$1<T> extends System.Object implements System.Collections.Generic.IReadOnlyList$1<T>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<T>, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.IList, System.Collections.Generic.ICollection$1<T> {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator](): IterableIterator<T>
        }
        class KeyValuePair$2<TKey, TValue> extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        interface IEnumerator$1<T> extends System.Collections.IEnumerator, System.IDisposable {
        }
        class HashSet$1<T> extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.ISet$1<T>, System.Collections.Generic.ICollection$1<T> {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator](): IterableIterator<T>
        }
        interface ISet$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<T> {
        }
        interface IDictionary$2<TKey, TValue> extends System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>> {
        }
        class Dictionary$2<TKey, TValue> extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.Collections.Generic.IReadOnlyDictionary$2<TKey, TValue>, System.Collections.Generic.IDictionary$2<TKey, TValue>, System.Runtime.Serialization.ISerializable, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>> {
            protected [__keep_incompatibility]: never;
            public get Comparer(): System.Collections.Generic.IEqualityComparer$1<TKey>;
            public get Count(): number;
            public get Keys(): System.Collections.Generic.Dictionary$2.KeyCollection<TKey, TValue>;
            public get Values(): System.Collections.Generic.Dictionary$2.ValueCollection<TKey, TValue>;
            public get_Item($key: TKey): TValue
            public set_Item($key: TKey, $value: TValue): void
            public Add($key: TKey, $value: TValue): void
            public Clear(): void
            public ContainsKey($key: TKey): boolean
            public ContainsValue($value: TValue): boolean
            public GetEnumerator(): System.Collections.Generic.Dictionary$2.Enumerator<TKey, TValue>
            public GetObjectData($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext): void
            public OnDeserialization($sender: any): void
            public Remove($key: TKey): boolean
            public TryGetValue($key: TKey, $value: $Ref<TValue>): boolean
            public EnsureCapacity($capacity: number): number
            public TrimExcess(): void
            public TrimExcess($capacity: number): void
            public constructor()
            public constructor($capacity: number)
            public constructor($comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor($capacity: number, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor($dictionary: System.Collections.Generic.IDictionary$2<TKey, TValue>)
            public constructor($dictionary: System.Collections.Generic.IDictionary$2<TKey, TValue>, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public constructor($collection: System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>)
            public constructor($collection: System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, $comparer: System.Collections.Generic.IEqualityComparer$1<TKey>)
            public [Symbol.iterator](): IterableIterator<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        }
        interface IReadOnlyDictionary$2<TKey, TValue> extends System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>> {
        }
        interface IEqualityComparer$1<T> {
        }
    }

    namespace UnityEngine {
        /** Interface into functionality unique to handheld devices.
        */
        class Handheld extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode, $scalingMode: UnityEngine.FullScreenMovieScalingMode): boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode): boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie($path: string, $bgColor: UnityEngine.Color): boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie($path: string): boolean
            /** Triggers device vibration.
            */
            public static Vibrate(): void
            public static SetActivityIndicatorStyle($style: UnityEngine.iOS.ActivityIndicatorStyle): void
            /** Sets the desired activity indicator style.
            */
            public static SetActivityIndicatorStyle($style: UnityEngine.AndroidActivityIndicatorStyle): void
            /** Gets the current activity indicator style.
            */
            public static GetActivityIndicatorStyle(): number
            /** Starts os activity indicator.
            */
            public static StartActivityIndicator(): void
            /** Stops os activity indicator.
            */
            public static StopActivityIndicator(): void
            public static ClearShaderCache(): void
            public constructor()
        }
        /** Representation of RGBA colors.
        */
        class Color extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Color> {
            protected [__keep_incompatibility]: never;
            /** Red component of the color.
            */
            public r: number
            /** Green component of the color.
            */
            public g: number
            /** Blue component of the color.
            */
            public b: number
            /** Alpha component of the color (0 is transparent, 1 is opaque).
            */
            public a: number
            /** Solid red. RGBA is (1, 0, 0, 1).
            */
            public static get red(): UnityEngine.Color;
            /** Solid green. RGBA is (0, 1, 0, 1).
            */
            public static get green(): UnityEngine.Color;
            /** Solid blue. RGBA is (0, 0, 1, 1).
            */
            public static get blue(): UnityEngine.Color;
            /** Solid white. RGBA is (1, 1, 1, 1).
            */
            public static get white(): UnityEngine.Color;
            /** Solid black. RGBA is (0, 0, 0, 1).
            */
            public static get black(): UnityEngine.Color;
            /** Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!
            */
            public static get yellow(): UnityEngine.Color;
            /** Cyan. RGBA is (0, 1, 1, 1).
            */
            public static get cyan(): UnityEngine.Color;
            /** Magenta. RGBA is (1, 0, 1, 1).
            */
            public static get magenta(): UnityEngine.Color;
            /** Gray. RGBA is (0.5, 0.5, 0.5, 1).
            */
            public static get gray(): UnityEngine.Color;
            /** English spelling for gray. RGBA is the same (0.5, 0.5, 0.5, 1).
            */
            public static get grey(): UnityEngine.Color;
            /** Completely transparent. RGBA is (0, 0, 0, 0).
            */
            public static get clear(): UnityEngine.Color;
            /** The grayscale value of the color. (Read Only)
            */
            public get grayscale(): number;
            /** A linear value of an sRGB color.
            */
            public get linear(): UnityEngine.Color;
            /** A version of the color that has had the gamma curve applied.
            */
            public get gamma(): UnityEngine.Color;
            /** Returns the maximum color component value: Max(r,g,b).
            */
            public get maxColorComponent(): number;
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString(): string
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string): string
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string, $formatProvider: System.IFormatProvider): string
            public Equals($other: any): boolean
            public Equals($other: UnityEngine.Color): boolean
            public static op_Addition($a: UnityEngine.Color, $b: UnityEngine.Color): UnityEngine.Color
            public static op_Subtraction($a: UnityEngine.Color, $b: UnityEngine.Color): UnityEngine.Color
            public static op_Multiply($a: UnityEngine.Color, $b: UnityEngine.Color): UnityEngine.Color
            public static op_Multiply($a: UnityEngine.Color, $b: number): UnityEngine.Color
            public static op_Multiply($b: number, $a: UnityEngine.Color): UnityEngine.Color
            public static op_Division($a: UnityEngine.Color, $b: number): UnityEngine.Color
            public static op_Equality($lhs: UnityEngine.Color, $rhs: UnityEngine.Color): boolean
            public static op_Inequality($lhs: UnityEngine.Color, $rhs: UnityEngine.Color): boolean
            /** Linearly interpolates between colors a and b by t.
            * @param $a Color a.
            * @param $b Color b.
            * @param $t Float for combining a and b.
            */
            public static Lerp($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number): UnityEngine.Color
            /** Linearly interpolates between colors a and b by t.
            */
            public static LerpUnclamped($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number): UnityEngine.Color
            public static op_Implicit($c: UnityEngine.Color): UnityEngine.Vector4
            public static op_Implicit($v: UnityEngine.Vector4): UnityEngine.Color
            public get_Item($index: number): number
            public set_Item($index: number, $value: number): void
            /** Calculates the hue, saturation and value of an RGB input color.
            * @param $rgbColor An input color.
            * @param $H Output variable for hue.
            * @param $S Output variable for saturation.
            * @param $V Output variable for value.
            */
            public static RGBToHSV($rgbColor: UnityEngine.Color, $H: $Ref<number>, $S: $Ref<number>, $V: $Ref<number>): void
            /** Creates an RGB colour from HSV input.
            * @param $H Hue [0..1].
            * @param $S Saturation [0..1].
            * @param $V Brightness value [0..1].
            * @param $hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB($H: number, $S: number, $V: number): UnityEngine.Color
            /** Creates an RGB colour from HSV input.
            * @param $H Hue [0..1].
            * @param $S Saturation [0..1].
            * @param $V Brightness value [0..1].
            * @param $hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB($H: number, $S: number, $V: number, $hdr: boolean): UnityEngine.Color
            public constructor($r: number, $g: number, $b: number, $a: number)
            public constructor($r: number, $g: number, $b: number)
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        /** Describes options for displaying movie playback controls.
        */
        enum FullScreenMovieControlMode { Full = 0, Minimal = 1, CancelOnInput = 2, Hidden = 3 }
        /** Describes scaling modes for displaying movies.
        */
        enum FullScreenMovieScalingMode { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3 }
        /** ActivityIndicator Style (Android Specific).
        */
        enum AndroidActivityIndicatorStyle { DontShow = -1, Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3 }
        /** AndroidJavaRunnable is the Unity representation of a java.lang.Runnable object.
        */
        interface AndroidJavaRunnable {
            (): void;
            Invoke?: () => void;
        }
        var AndroidJavaRunnable: { new(func: () => void): AndroidJavaRunnable; }
        class AndroidJavaException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public get StackTrace(): string;
        }
        /** AndroidJavaObject is the Unity representation of a generic instance of java.lang.Object.
        */
        class AndroidJavaObject extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** IDisposable callback.
            */
            public Dispose(): void
            /** Call a Java method on an object.
            * @param $methodName Specifies which method to call.
            * @param $args An array of parameters passed to the method.
            */
            public Call($methodName: string, ...args: any[]): void
            /** Calls a Java method on an object (non-static).
            * @param $args An array of parameters passed to the method.
            * @param $methodID The ID of the method to call.
            */
            public Call($methodID: System.IntPtr, ...args: any[]): void
            /** Call a static Java method on a class.
            * @param $methodName Specifies which method to call.
            * @param $args An array of parameters passed to the method.
            */
            public CallStatic($methodName: string, ...args: any[]): void
            /** Call a static Java method on a class.
            * @param $args An array of parameters passed to the method.
            * @param $methodID The ID of the method to call.
            */
            public CallStatic($methodID: System.IntPtr, ...args: any[]): void
            /** Retrieves the raw <tt>jobject</tt> pointer to the Java object.
            Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
            */
            public GetRawObject(): System.IntPtr
            /** Retrieves the raw <tt>jclass</tt> pointer to the Java class.
            Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
            */
            public GetRawClass(): System.IntPtr
            /** Creates a clone of the C# object that references the same Java object.
            * @returns A new C# object which references the same Java object as the original instance. 
            */
            public CloneReference(): UnityEngine.AndroidJavaObject
            public constructor($className: string, $args: System.Array$1<string>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaObject>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaClass>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaProxy>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaRunnable>)
            public constructor($className: string, ...args: any[])
            public constructor($jobject: System.IntPtr)
            public constructor($clazz: System.IntPtr, $constructorID: System.IntPtr, ...args: any[])
            public constructor()
        }
        /** AndroidJavaClass is the Unity representation of a generic instance of java.lang.Class.
        */
        class AndroidJavaClass extends UnityEngine.AndroidJavaObject implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public constructor($className: string)
            public constructor($className: string, $args: System.Array$1<string>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaObject>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaClass>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaProxy>)
            public constructor($className: string, $args: System.Array$1<UnityEngine.AndroidJavaRunnable>)
            public constructor($className: string, ...args: any[])
            public constructor($jobject: System.IntPtr)
            public constructor($clazz: System.IntPtr, $constructorID: System.IntPtr, ...args: any[])
            public constructor()
        }
        /** This class can be used to implement any java interface. Any java vm method invocation matching the interface on the proxy object will automatically be passed to the c# implementation.
        */
        class AndroidJavaProxy extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Helper interface for JNI interaction; signature creation and method lookups.
        Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
        */
        class AndroidJNIHelper extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Set debug to true to log calls through the AndroidJNIHelper.
            */
            public static get debug(): boolean;
            public static set debug(value: boolean);
            /** Scans a particular Java class for a constructor method matching a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $signature Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            */
            public static GetConstructorID($javaClass: System.IntPtr): System.IntPtr
            /** Scans a particular Java class for a constructor method matching a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $signature Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            */
            public static GetConstructorID($javaClass: System.IntPtr, $signature: string): System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $methodName Name of the method as declared in Java.
            * @param $signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID($javaClass: System.IntPtr, $methodName: string): System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $methodName Name of the method as declared in Java.
            * @param $signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID($javaClass: System.IntPtr, $methodName: string, $signature: string): System.IntPtr
            /** Scans a particular Java class for a method matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $methodName Name of the method as declared in Java.
            * @param $signature Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID($javaClass: System.IntPtr, $methodName: string, $signature: string, $isStatic: boolean): System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $fieldName Name of the field as declared in Java.
            * @param $signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID($javaClass: System.IntPtr, $fieldName: string): System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $fieldName Name of the field as declared in Java.
            * @param $signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID($javaClass: System.IntPtr, $fieldName: string, $signature: string): System.IntPtr
            /** Scans a particular Java class for a field matching a name and a signature.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $fieldName Name of the field as declared in Java.
            * @param $signature Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).
            * @param $isStatic Set to <tt>true<tt> for static fields; <tt>false<tt> for instance (nonstatic) fields.
            */
            public static GetFieldID($javaClass: System.IntPtr, $fieldName: string, $signature: string, $isStatic: boolean): System.IntPtr
            /** Creates a UnityJavaRunnable object (implements java.lang.Runnable).
            * @param $runnable A delegate representing the java.lang.Runnable.
            */
            public static CreateJavaRunnable($jrunnable: UnityEngine.AndroidJavaRunnable): System.IntPtr
            /** Creates a java proxy object which connects to the supplied proxy implementation.
            * @param $proxy An implementatinon of a java interface in c#.
            */
            public static CreateJavaProxy($proxy: UnityEngine.AndroidJavaProxy): System.IntPtr
            /** Creates a Java array from a managed array.
            * @param $array Managed array to be converted into a Java array object.
            */
            public static ConvertToJNIArray($array: System.Array): System.IntPtr
            /** Creates the parameter array to be used as argument list when invoking Java code through CallMethod() in AndroidJNI.
            * @param $args An array of objects that should be converted to Call parameters.
            */
            public static CreateJNIArgArray($args: System.Array$1<any>): System.Array$1<UnityEngine.jvalue>
            /** Deletes any local jni references previously allocated by CreateJNIArgArray().
            * @param $args The array of arguments used as a parameter to CreateJNIArgArray().
            * @param $jniArgs The array returned by CreateJNIArgArray().
            */
            public static DeleteJNIArgArray($args: System.Array$1<any>, $jniArgs: System.Array$1<UnityEngine.jvalue>): void
            /** Get a JNI method ID for a constructor based on calling arguments.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $args Array with parameters to be passed to the constructor when invoked.
            */
            public static GetConstructorID($jclass: System.IntPtr, $args: System.Array$1<any>): System.IntPtr
            /** Get a JNI method ID based on calling arguments.
            * @param $javaClass Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).
            * @param $methodName Name of the method as declared in Java.
            * @param $args Array with parameters to be passed to the method when invoked.
            * @param $isStatic Set to <tt>true<tt> for static methods; <tt>false<tt> for instance (nonstatic) methods.
            */
            public static GetMethodID($jclass: System.IntPtr, $methodName: string, $args: System.Array$1<any>, $isStatic: boolean): System.IntPtr
            /** Creates the JNI signature string for particular object type.
            * @param $obj Object for which a signature is to be produced.
            */
            public static GetSignature($obj: any): string
            /** Creates the JNI signature string for an object parameter list.
            * @param $args Array of object for which a signature is to be produced.
            */
            public static GetSignature($args: System.Array$1<any>): string
            /** Convert primitive to it's object counterpart.
            * @param $value Primitive value to be boxed.
            * @returns A local reference to Java object. 
            */
            public static Box($value: number): System.IntPtr
            /** Convert primitive to it's object counterpart.
            * @param $value Primitive value to be boxed.
            * @returns A local reference to Java object. 
            */
            public static Box($value: bigint): System.IntPtr
            /** Convert primitive to it's object counterpart.
            * @param $value Primitive value to be boxed.
            * @returns A local reference to Java object. 
            */
            public static Box($value: boolean): System.IntPtr
            /** Converts Java object of a boxed type to its primitive counterpart.
            * @param $obj A Java object that is a counterpart of a primitive type of the value parameter.
            * @param $value Destination for the primitive value of obj.
            */
            public static Unbox($obj: System.IntPtr, $value: $Ref<number>): void
            /** Converts Java object of a boxed type to its primitive counterpart.
            * @param $obj A Java object that is a counterpart of a primitive type of the value parameter.
            * @param $value Destination for the primitive value of obj.
            */
            public static Unbox($obj: System.IntPtr, $value: $Ref<bigint>): void
            /** Converts Java object of a boxed type to its primitive counterpart.
            * @param $obj A Java object that is a counterpart of a primitive type of the value parameter.
            * @param $value Destination for the primitive value of obj.
            */
            public static Unbox($obj: System.IntPtr, $value: $Ref<boolean>): void
        }
        class jvalue extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** 'Raw' JNI interface to Android Java VM from Unity scripting (C#).
        Note: Using raw JNI functions requires advanced knowledge of the Android Java Native Interface (JNI). Please take note.
        */
        class AndroidJNI extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns the pointer to JavaVM.
            */
            public static GetJavaVM(): System.IntPtr
            /** Attaches the current thread to a Java (Dalvik) VM.
            */
            public static AttachCurrentThread(): number
            /** Detaches the current thread from a Java (Dalvik) VM.
            */
            public static DetachCurrentThread(): number
            /** Returns the version of the native method interface.
            */
            public static GetVersion(): number
            /** This function loads a locally-defined class.
            */
            public static FindClass($name: string): System.IntPtr
            /** Converts a <tt>java.lang.reflect.Method<tt> or <tt>java.lang.reflect.Constructor<tt> object to a method ID.
            */
            public static FromReflectedMethod($refMethod: System.IntPtr): System.IntPtr
            /** Converts a <tt>java.lang.reflect.Field</tt> to a field ID.
            */
            public static FromReflectedField($refField: System.IntPtr): System.IntPtr
            /** Converts a method ID derived from clazz to a <tt>java.lang.reflect.Method<tt> or <tt>java.lang.reflect.Constructor<tt> object.
            */
            public static ToReflectedMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $isStatic: boolean): System.IntPtr
            /** Converts a field ID derived from cls to a <tt>java.lang.reflect.Field</tt> object.
            */
            public static ToReflectedField($clazz: System.IntPtr, $fieldID: System.IntPtr, $isStatic: boolean): System.IntPtr
            /** If <tt>clazz<tt> represents any class other than the class <tt>Object<tt>, then this function returns the object that represents the superclass of the class specified by <tt>clazz</tt>.
            */
            public static GetSuperclass($clazz: System.IntPtr): System.IntPtr
            /** Determines whether an object of <tt>clazz1<tt> can be safely cast to <tt>clazz2<tt>.
            */
            public static IsAssignableFrom($clazz1: System.IntPtr, $clazz2: System.IntPtr): boolean
            /** Causes a <tt>java.lang.Throwable</tt> object to be thrown.
            */
            public static Throw($obj: System.IntPtr): number
            /** Constructs an exception object from the specified class with the <tt>message</tt> specified by message and causes that exception to be thrown.
            */
            public static ThrowNew($clazz: System.IntPtr, $message: string): number
            /** Determines if an exception is being thrown.
            */
            public static ExceptionOccurred(): System.IntPtr
            /** Prints an exception and a backtrace of the stack to the <tt>logcat</tt>
            */
            public static ExceptionDescribe(): void
            /** Clears any exception that is currently being thrown.
            */
            public static ExceptionClear(): void
            /** Raises a fatal error and does not expect the VM to recover. This function does not return.
            */
            public static FatalError($message: string): void
            /** Creates a new local reference frame, in which at least a given number of local references can be created.
            */
            public static PushLocalFrame($capacity: number): number
            /** Pops off the current local reference frame, frees all the local references, and returns a local reference in the previous local reference frame for the given <tt>result</tt> object.
            */
            public static PopLocalFrame($ptr: System.IntPtr): System.IntPtr
            /** Creates a new global reference to the object referred to by the <tt>obj</tt> argument.
            */
            public static NewGlobalRef($obj: System.IntPtr): System.IntPtr
            /** Deletes the global reference pointed to by <tt>obj</tt>.
            */
            public static DeleteGlobalRef($obj: System.IntPtr): void
            /** Creates a new global weak reference to the object referred to by the <tt>obj</tt> argument.
            */
            public static NewWeakGlobalRef($obj: System.IntPtr): System.IntPtr
            /** Deletes the global weak reference pointed to by <tt>obj</tt>.
            */
            public static DeleteWeakGlobalRef($obj: System.IntPtr): void
            /** Creates a new local reference that refers to the same object as <tt>obj</tt>.
            */
            public static NewLocalRef($obj: System.IntPtr): System.IntPtr
            /** Deletes the local reference pointed to by <tt>obj</tt>.
            */
            public static DeleteLocalRef($obj: System.IntPtr): void
            /** Tests whether two references refer to the same Java object.
            */
            public static IsSameObject($obj1: System.IntPtr, $obj2: System.IntPtr): boolean
            /** Ensures that at least a given number of local references can be created in the current thread.
            */
            public static EnsureLocalCapacity($capacity: number): number
            /** Allocates a new Java object without invoking any of the constructors for the object.
            */
            public static AllocObject($clazz: System.IntPtr): System.IntPtr
            /** Constructs a new Java object. The method ID indicates which constructor method to invoke. This ID must be obtained by calling GetMethodID() with <init> as the method name and void (V) as the return type.
            */
            public static NewObject($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): System.IntPtr
            /** Returns the class of an object.
            */
            public static GetObjectClass($obj: System.IntPtr): System.IntPtr
            /** Tests whether an object is an instance of a class.
            */
            public static IsInstanceOf($obj: System.IntPtr, $clazz: System.IntPtr): boolean
            /** Returns the method ID for an instance (nonstatic) method of a class or interface.
            */
            public static GetMethodID($clazz: System.IntPtr, $name: string, $sig: string): System.IntPtr
            /** Returns the field ID for an instance (nonstatic) field of a class.
            */
            public static GetFieldID($clazz: System.IntPtr, $name: string, $sig: string): System.IntPtr
            /** Returns the method ID for a static method of a class.
            */
            public static GetStaticMethodID($clazz: System.IntPtr, $name: string, $sig: string): System.IntPtr
            /** Returns the field ID for a static field of a class.
            */
            public static GetStaticFieldID($clazz: System.IntPtr, $name: string, $sig: string): System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of Unicode characters.
            */
            public static NewString($chars: string): System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of Unicode characters.
            */
            public static NewString($chars: System.Array$1<number>): System.IntPtr
            /** Constructs a new <tt>java.lang.String</tt> object from an array of characters in modified UTF-8 encoding.
            */
            public static NewStringUTF($bytes: string): System.IntPtr
            /** Returns a pointer to the array of Unicode characters of the string. This pointer is valid until ReleaseStringchars() is called.
            */
            public static GetStringChars($str: System.IntPtr): string
            /** Returns the length (the count of Unicode characters) of a Java string.
            */
            public static GetStringLength($str: System.IntPtr): number
            /** Returns the length in bytes of the modified UTF-8 representation of a string.
            */
            public static GetStringUTFLength($str: System.IntPtr): number
            /** Returns a managed string object representing the string in modified UTF-8 encoding.
            */
            public static GetStringUTFChars($str: System.IntPtr): string
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallStringMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): string
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallObjectMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): System.IntPtr
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallIntMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallBooleanMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): boolean
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallShortMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallSByteMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallCharMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallFloatMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallDoubleMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallLongMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): bigint
            /** Calls a Java instance method defined by <tt>methodID<tt>, optionally passing an array of arguments (<tt>args<tt>) to the method.
            */
            public static CallVoidMethod($obj: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): void
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetStringField($obj: System.IntPtr, $fieldID: System.IntPtr): string
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetObjectField($obj: System.IntPtr, $fieldID: System.IntPtr): System.IntPtr
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetBooleanField($obj: System.IntPtr, $fieldID: System.IntPtr): boolean
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetSByteField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetCharField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetShortField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetIntField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetLongField($obj: System.IntPtr, $fieldID: System.IntPtr): bigint
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetFloatField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of an instance (nonstatic) field of an object.
            */
            public static GetDoubleField($obj: System.IntPtr, $fieldID: System.IntPtr): number
            /** Sets the value of an instance field of the specified object.
            */
            public static SetStringField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: string): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetObjectField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: System.IntPtr): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetBooleanField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: boolean): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetSByteField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetCharField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetShortField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetIntField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetLongField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: bigint): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetFloatField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of an instance field of the specified object.
            */
            public static SetDoubleField($obj: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticStringMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): string
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticObjectMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): System.IntPtr
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticIntMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticBooleanMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): boolean
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticShortMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticSByteMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticCharMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticFloatMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticDoubleMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): number
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticLongMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): bigint
            /** Invokes the specified <tt>methodID<tt> static method on a Java object, optionally passing in an array of arguments (<tt>args<tt>).
            */
            public static CallStaticVoidMethod($clazz: System.IntPtr, $methodID: System.IntPtr, $args: System.Array$1<UnityEngine.jvalue>): void
            /** Returns the value of a static field of an object.
            */
            public static GetStaticStringField($clazz: System.IntPtr, $fieldID: System.IntPtr): string
            /** Returns the value of a static field of an object.
            */
            public static GetStaticObjectField($clazz: System.IntPtr, $fieldID: System.IntPtr): System.IntPtr
            /** Returns the value of a static field of an object.
            */
            public static GetStaticBooleanField($clazz: System.IntPtr, $fieldID: System.IntPtr): boolean
            /** Returns the value of a static field of an object.
            */
            public static GetStaticSByteField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticCharField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticShortField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticIntField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticLongField($clazz: System.IntPtr, $fieldID: System.IntPtr): bigint
            /** Returns the value of a static field of an object.
            */
            public static GetStaticFloatField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Returns the value of a static field of an object.
            */
            public static GetStaticDoubleField($clazz: System.IntPtr, $fieldID: System.IntPtr): number
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticStringField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: string): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticObjectField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: System.IntPtr): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticBooleanField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: boolean): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticSByteField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticCharField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticShortField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticIntField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticLongField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: bigint): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticFloatField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Sets the value of a static field in the specified object.
            */
            public static SetStaticDoubleField($clazz: System.IntPtr, $fieldID: System.IntPtr, $val: number): void
            /** Converts a managed array of System.Boolean to a Java array of <tt>boolean</tt>.
            */
            public static ToBooleanArray($array: System.Array$1<boolean>): System.IntPtr
            /** Converts a managed array of System.SByte to a Java array of <tt>byte</tt>.
            */
            public static ToSByteArray($array: System.Array$1<number>): System.IntPtr
            /** Converts a managed array of System.Char to a Java array of <tt>char</tt>.
            */
            public static ToCharArray($array: System.Array$1<number>): System.IntPtr
            /** Converts a managed array of System.Int16 to a Java array of <tt>short</tt>.
            */
            public static ToShortArray($array: System.Array$1<number>): System.IntPtr
            /** Converts a managed array of System.Int32 to a Java array of <tt>int</tt>.
            */
            public static ToIntArray($array: System.Array$1<number>): System.IntPtr
            /** Converts a managed array of System.Int64 to a Java array of <tt>long</tt>.
            */
            public static ToLongArray($array: System.Array$1<bigint>): System.IntPtr
            /** Converts a managed array of System.Single to a Java array of <tt>float</tt>.
            */
            public static ToFloatArray($array: System.Array$1<number>): System.IntPtr
            /** Converts a managed array of System.Double to a Java array of <tt>double</tt>.
            */
            public static ToDoubleArray($array: System.Array$1<number>): System.IntPtr
            public static ToObjectArray($array: System.Array$1<System.IntPtr>, $arrayClass: System.IntPtr): System.IntPtr
            /** Converts a managed array of System.IntPtr, representing Java objects, to a Java array of <tt>java.lang.Object</tt>.
            */
            public static ToObjectArray($array: System.Array$1<System.IntPtr>): System.IntPtr
            /** Converts a Java array of <tt>boolean</tt> to a managed array of System.Boolean.
            */
            public static FromBooleanArray($array: System.IntPtr): System.Array$1<boolean>
            /** Converts a Java array of <tt>byte</tt> to a managed array of System.SByte.
            */
            public static FromSByteArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>char</tt> to a managed array of System.Char.
            */
            public static FromCharArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>short</tt> to a managed array of System.Int16.
            */
            public static FromShortArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>int</tt> to a managed array of System.Int32.
            */
            public static FromIntArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>long</tt> to a managed array of System.Int64.
            */
            public static FromLongArray($array: System.IntPtr): System.Array$1<bigint>
            /** Converts a Java array of <tt>float</tt> to a managed array of System.Single.
            */
            public static FromFloatArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>double</tt> to a managed array of System.Double.
            */
            public static FromDoubleArray($array: System.IntPtr): System.Array$1<number>
            /** Converts a Java array of <tt>java.lang.Object</tt> to a managed array of System.IntPtr, representing Java objects.
            */
            public static FromObjectArray($array: System.IntPtr): System.Array$1<System.IntPtr>
            /** Returns the number of elements in the array.
            */
            public static GetArrayLength($array: System.IntPtr): number
            /** Constructs a new primitive array object.
            */
            public static NewBooleanArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewSByteArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewCharArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewShortArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewIntArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewLongArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewFloatArray($size: number): System.IntPtr
            /** Constructs a new primitive array object.
            */
            public static NewDoubleArray($size: number): System.IntPtr
            /** Constructs a new array holding objects in class <tt>clazz<tt>. All elements are initially set to <tt>obj<tt>.
            */
            public static NewObjectArray($size: number, $clazz: System.IntPtr, $obj: System.IntPtr): System.IntPtr
            /** Returns the value of one element of a primitive array.
            */
            public static GetBooleanArrayElement($array: System.IntPtr, $index: number): boolean
            /** Returns the value of one element of a primitive array.
            */
            public static GetSByteArrayElement($array: System.IntPtr, $index: number): number
            /** Returns the value of one element of a primitive array.
            */
            public static GetCharArrayElement($array: System.IntPtr, $index: number): number
            /** Returns the value of one element of a primitive array.
            */
            public static GetShortArrayElement($array: System.IntPtr, $index: number): number
            /** Returns the value of one element of a primitive array.
            */
            public static GetIntArrayElement($array: System.IntPtr, $index: number): number
            /** Returns the value of one element of a primitive array.
            */
            public static GetLongArrayElement($array: System.IntPtr, $index: number): bigint
            /** Returns the value of one element of a primitive array.
            */
            public static GetFloatArrayElement($array: System.IntPtr, $index: number): number
            /** Returns the value of one element of a primitive array.
            */
            public static GetDoubleArrayElement($array: System.IntPtr, $index: number): number
            /** Returns an element of an <tt>Object</tt> array.
            */
            public static GetObjectArrayElement($array: System.IntPtr, $index: number): System.IntPtr
            /** Sets the boolean value of one element in a primitive array.
            * @param $array The array of native booleans.
            * @param $index Index of the array element to set.
            * @param $val The value to set.
            */
            public static SetBooleanArrayElement($array: System.IntPtr, $index: number, $val: boolean): void
            /** Sets the sbyte value of one element in a primitive array.
            */
            public static SetSByteArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets the char value of one element in a primitive array.
            */
            public static SetCharArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets the short value of one element in a primitive array.
            */
            public static SetShortArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets the int value of one element in a primitive array.
            */
            public static SetIntArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets the long value of one element in a primitive array.
            */
            public static SetLongArrayElement($array: System.IntPtr, $index: number, $val: bigint): void
            /** Sets the float value of one element in a primitive array.
            */
            public static SetFloatArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets the double value of one element in a primitive array.
            */
            public static SetDoubleArrayElement($array: System.IntPtr, $index: number, $val: number): void
            /** Sets an element of an <tt>Object</tt> array.
            */
            public static SetObjectArrayElement($array: System.IntPtr, $index: number, $obj: System.IntPtr): void
            public static NewDirectByteBuffer($buffer: Unity.Collections.NativeArray$1<number>): System.IntPtr
            /** Fetches and returns the capacity of the memory region referenced by the given direct java.nio.Buffer.
            */
            public static GetDirectBufferCapacity($buffer: System.IntPtr): bigint
            /** Returns the NativeArray backed by the same memory region as the given direct java.nio.Buffer.
            */
            public static GetDirectByteBuffer($buffer: System.IntPtr): Unity.Collections.NativeArray$1<number>
            /** Returns the NativeArray backed by the same memory region as the given direct java.nio.Buffer.
            */
            public static GetDirectSByteBuffer($buffer: System.IntPtr): Unity.Collections.NativeArray$1<number>
            /** Registers native methods with the class specified by the clazz argument.
            * @returns Zero on success, negative value on error. Falsely succeeds in Editor. 
            */
            public static RegisterNatives($clazz: System.IntPtr, $methods: System.Array$1<UnityEngine.JNINativeMethod>): number
            /** Unregisters native methods of a class. The class goes back to the state before it was linked or registered with its native method functions.
            * @returns Zero on success, negative value on error. Falsely succeeds in Editor. 
            */
            public static UnregisterNatives($clazz: System.IntPtr): number
        }
        /** Defines a single method to beregistered using AndroidJNI.RegisterNatives.
        */
        class JNINativeMethod extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Base class for all objects Unity can reference.
        */
        class Object extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The name of the object.
            */
            public get name(): string;
            public set name(value: string);
            /** Should the object be hidden, saved with the Scene or modifiable by the user?
            */
            public get hideFlags(): UnityEngine.HideFlags;
            public set hideFlags(value: UnityEngine.HideFlags);
            /** Gets  the instance ID of the object.
            * @returns Returns the instance ID of the object. 
            */
            public GetInstanceID(): number
            public static op_Implicit($exists: UnityEngine.Object): boolean
            public static InstantiateAsync($original: UnityEngine.Object): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $parent: UnityEngine.Transform): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $parent: UnityEngine.Transform, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $count: number): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $count: number, $parent: UnityEngine.Transform): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $count: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            public static InstantiateAsync($original: UnityEngine.Object, $count: number, $parent: UnityEngine.Transform, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.AsyncInstantiateOperation$1<UnityEngine.Object>
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $parent: UnityEngine.Transform): UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object): UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object, $scene: UnityEngine.SceneManagement.Scene): UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object, $parent: UnityEngine.Transform): UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate($original: UnityEngine.Object, $parent: UnityEngine.Transform, $instantiateInWorldSpace: boolean): UnityEngine.Object
            public static Instantiate($original: UnityEngine.Object, $parent: UnityEngine.Transform, $worldPositionStays: boolean): UnityEngine.Object
            /** Removes a GameObject, component or asset.
            * @param $obj The object to destroy.
            * @param $t The optional amount of time to delay before destroying the object.
            */
            public static Destroy($obj: UnityEngine.Object, $t: number): void
            /** Removes a GameObject, component or asset.
            * @param $obj The object to destroy.
            * @param $t The optional amount of time to delay before destroying the object.
            */
            public static Destroy($obj: UnityEngine.Object): void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param $obj Object to be destroyed.
            * @param $allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate($obj: UnityEngine.Object, $allowDestroyingAssets: boolean): void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param $obj Object to be destroyed.
            * @param $allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate($obj: UnityEngine.Object): void
            /** Gets a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $includeInactive If true, components attached to inactive GameObjects are also included.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsOfType($type: System.Type): System.Array$1<UnityEngine.Object>
            /** Gets a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $includeInactive If true, components attached to inactive GameObjects are also included.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsOfType($type: System.Type, $includeInactive: boolean): System.Array$1<UnityEngine.Object>
            /** Retrieves a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @param $sortMode Whether and how to sort the returned array. Not sorting the array makes this function run significantly faster.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsByType($type: System.Type, $sortMode: UnityEngine.FindObjectsSortMode): System.Array$1<UnityEngine.Object>
            /** Retrieves a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @param $sortMode Whether and how to sort the returned array. Not sorting the array makes this function run significantly faster.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsByType($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive, $sortMode: UnityEngine.FindObjectsSortMode): System.Array$1<UnityEngine.Object>
            /** Do not destroy the target Object when loading a new Scene.
            * @param $target An Object not destroyed on Scene change.
            */
            public static DontDestroyOnLoad($target: UnityEngine.Object): void
            /** Returns the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @returns Object The first active loaded object that matches the specified type. It returns null if no Object matches the type. 
            */
            public static FindObjectOfType($type: System.Type): UnityEngine.Object
            /** Retrieves the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns the first active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindFirstObjectByType($type: System.Type): UnityEngine.Object
            /** Retrieves any active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns an arbitrary active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindAnyObjectByType($type: System.Type): UnityEngine.Object
            /** Returns the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @returns Object The first active loaded object that matches the specified type. It returns null if no Object matches the type. 
            */
            public static FindObjectOfType($type: System.Type, $includeInactive: boolean): UnityEngine.Object
            /** Retrieves the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns the first active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindFirstObjectByType($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive): UnityEngine.Object
            /** Retrieves any active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns an arbitrary active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindAnyObjectByType($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive): UnityEngine.Object
            public static op_Equality($x: UnityEngine.Object, $y: UnityEngine.Object): boolean
            public static op_Inequality($x: UnityEngine.Object, $y: UnityEngine.Object): boolean
            public constructor()
        }
        /** Base class for all objects Unity can reference.
        */
        interface Object {
            GetTransform(): UnityEngine.Transform;
            GetTransform($path: string): UnityEngine.Transform;
            GetChildren($includeInactive?: boolean): System.Array$1<UnityEngine.Transform>;
            GetChildren($path: string, $includeInactive?: boolean): System.Array$1<UnityEngine.Transform>;
            SetPosition($position: UnityEngine.Vector3): void;
            SetPosition($path: string, $position: UnityEngine.Vector3): void;
            SetLocalPosition($position: UnityEngine.Vector3): void;
            SetLocalPosition($path: string, $position: UnityEngine.Vector3): void;
            SetRotation($eulerAngles: UnityEngine.Vector3): void;
            SetRotation($path: string, $eulerAngles: UnityEngine.Vector3): void;
            SetLocalRotation($eulerAngles: UnityEngine.Vector3): void;
            SetLocalRotation($path: string, $eulerAngles: UnityEngine.Vector3): void;
            SetLocalScale($scale: UnityEngine.Vector3): void;
            SetLocalScale($path: string, $scale: UnityEngine.Vector3): void;
            SetParent($parentObj: UnityEngine.Object): UnityEngine.Transform;
            SetParent($parentObj: UnityEngine.Object, $worldPositionStavs: boolean): UnityEngine.Transform;
            SetParent($rootObj: UnityEngine.Object, $parentPath: string): UnityEngine.Transform;
            SetParent($rootObj: UnityEngine.Object, $parentPath: string, $worldPositionStavs?: boolean): UnityEngine.Transform;
            DestroyGO(): void;
            DestroyGO($immediate: boolean): void;
            DestroyGO($path: string): void;
            DestroyGO($path: string, $immediate: boolean): void;
            CloneGO(): UnityEngine.GameObject;
            SetLayer($layerName: string): void;
            SetLayer($path: string, $layerName: string): void;
            SetActiveState($active: boolean): void;
            SetActiveState($path: string, $active: boolean): void;
        }
        /** Base class for everything attached to a GameObject.
        */
        class Component extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The game object this component is attached to. A component is always attached to a game object.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The tag of this game object.
            */
            public get tag(): string;
            public set tag(value: string);
            /** The non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent($type: System.Type): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent($type: System.Type, $component: $Ref<UnityEngine.Component>): boolean
            /** The string-based version of this method.
            * @param $type The name of the type of Component to get.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent($type: string): UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInChildren($t: System.Type, $includeInactive: boolean): UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInChildren($t: System.Type): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren($t: System.Type, $includeInactive: boolean): System.Array$1<UnityEngine.Component>
            public GetComponentsInChildren($t: System.Type): System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent($t: System.Type, $includeInactive: boolean): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent($t: System.Type): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInParent($t: System.Type, $includeInactive: boolean): System.Array$1<UnityEngine.Component>
            public GetComponentsInParent($t: System.Type): System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @returns An array containing all matching components of type type. 
            */
            public GetComponents($type: System.Type): System.Array$1<UnityEngine.Component>
            public GetComponents($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>): void
            /** Gets the index of the component on its parent GameObject.
            * @returns The component index. 
            */
            public GetComponentIndex(): number
            /** Checks the GameObject's tag against the defined tag.
            * @param $tag The tag to compare.
            * @returns Returns true if GameObject has same tag. Returns false otherwise. 
            */
            public CompareTag($tag: string): boolean
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards($methodName: string, $value: any): void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards($methodName: string): void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards($methodName: string, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage($methodName: string, $value: any): void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage($methodName: string): void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage($methodName: string, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage($methodName: string, $parameter: any): void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage($methodName: string): void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage($methodName: string, $options: UnityEngine.SendMessageOptions): void
            public constructor()
        }
        /** Behaviours are Components that can be enabled or disabled.
        */
        class Behaviour extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Enabled Behaviours are Updated, disabled Behaviours are not.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Reports whether a GameObject and its associated Behaviour is active and enabled.
            */
            public get isActiveAndEnabled(): boolean;
            public constructor()
        }
        /** Interface to control the Mecanim animation system.
        */
        class Animator extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Returns true if the current rig is optimizable with AnimatorUtility.OptimizeTransformHierarchy.
            */
            public get isOptimizable(): boolean;
            /** Returns true if the current rig is humanoid, false if it is generic.
            */
            public get isHuman(): boolean;
            /** Returns true if the current rig has root motion.
            */
            public get hasRootMotion(): boolean;
            /** Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).
            */
            public get humanScale(): number;
            /** Returns whether the animator is initialized successfully.
            */
            public get isInitialized(): boolean;
            /** Gets the avatar delta position for the last evaluated frame.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** Gets the avatar delta rotation for the last evaluated frame.
            */
            public get deltaRotation(): UnityEngine.Quaternion;
            /** Gets the avatar velocity  for the last evaluated frame.
            */
            public get velocity(): UnityEngine.Vector3;
            /** Gets the avatar angular velocity for the last evaluated frame.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            /** The root position, the position of the game object.
            */
            public get rootPosition(): UnityEngine.Vector3;
            public set rootPosition(value: UnityEngine.Vector3);
            /** The root rotation, the rotation of the game object.
            */
            public get rootRotation(): UnityEngine.Quaternion;
            public set rootRotation(value: UnityEngine.Quaternion);
            /** Should root motion be applied?
            */
            public get applyRootMotion(): boolean;
            public set applyRootMotion(value: boolean);
            /** Specifies the update mode of the Animator.
            */
            public get updateMode(): UnityEngine.AnimatorUpdateMode;
            public set updateMode(value: UnityEngine.AnimatorUpdateMode);
            /** Returns true if the object has a transform hierarchy.
            */
            public get hasTransformHierarchy(): boolean;
            /** The current gravity weight based on current animations that are played.
            */
            public get gravityWeight(): number;
            /** The position of the body center of mass.
            */
            public get bodyPosition(): UnityEngine.Vector3;
            public set bodyPosition(value: UnityEngine.Vector3);
            /** The rotation of the body center of mass.
            */
            public get bodyRotation(): UnityEngine.Quaternion;
            public set bodyRotation(value: UnityEngine.Quaternion);
            /** Automatic stabilization of feet during transition and blending.
            */
            public get stabilizeFeet(): boolean;
            public set stabilizeFeet(value: boolean);
            /** Returns the number of layers in the controller.
            */
            public get layerCount(): number;
            /** The AnimatorControllerParameter list used by the animator. (Read Only)
            */
            public get parameters(): System.Array$1<UnityEngine.AnimatorControllerParameter>;
            /** Returns the number of parameters in the controller.
            */
            public get parameterCount(): number;
            /** Blends pivot point between body center of mass and feet pivot.
            */
            public get feetPivotActive(): number;
            public set feetPivotActive(value: number);
            /** Gets the pivot weight.
            */
            public get pivotWeight(): number;
            /** Get the current position of the pivot.
            */
            public get pivotPosition(): UnityEngine.Vector3;
            /** If automatic matching is active.
            */
            public get isMatchingTarget(): boolean;
            /** The playback speed of the Animator. 1 is normal playback speed.
            */
            public get speed(): number;
            public set speed(value: number);
            /** Returns the position of the target specified by SetTarget.
            */
            public get targetPosition(): UnityEngine.Vector3;
            /** Returns the rotation of the target specified by SetTarget.
            */
            public get targetRotation(): UnityEngine.Quaternion;
            /** Returns the Avatar root Transform.
            */
            public get avatarRoot(): UnityEngine.Transform;
            /** Controls culling of this Animator component.
            */
            public get cullingMode(): UnityEngine.AnimatorCullingMode;
            public set cullingMode(value: UnityEngine.AnimatorCullingMode);
            /** Sets the playback position in the recording buffer.
            */
            public get playbackTime(): number;
            public set playbackTime(value: number);
            /** Start time of the first frame of the buffer relative to the frame at which StartRecording was called.
            */
            public get recorderStartTime(): number;
            public set recorderStartTime(value: number);
            /** End time of the recorded clip relative to when StartRecording was called.
            */
            public get recorderStopTime(): number;
            public set recorderStopTime(value: number);
            /** Gets the mode of the Animator recorder.
            */
            public get recorderMode(): UnityEngine.AnimatorRecorderMode;
            /** The runtime representation of AnimatorController that controls the Animator.
            */
            public get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
            public set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
            /** Returns true if Animator has any playables assigned to it.
            */
            public get hasBoundPlayables(): boolean;
            /** Gets/Sets the current Avatar.
            */
            public get avatar(): UnityEngine.Avatar;
            public set avatar(value: UnityEngine.Avatar);
            /** The PlayableGraph created by the Animator.
            */
            public get playableGraph(): UnityEngine.Playables.PlayableGraph;
            /** Additional layers affects the center of mass.
            */
            public get layersAffectMassCenter(): boolean;
            public set layersAffectMassCenter(value: boolean);
            /** Get left foot bottom height.
            */
            public get leftFeetBottomHeight(): number;
            /** Get right foot bottom height.
            */
            public get rightFeetBottomHeight(): number;
            public get logWarnings(): boolean;
            public set logWarnings(value: boolean);
            /** Sets whether the Animator sends events of type AnimationEvent.
            */
            public get fireEvents(): boolean;
            public set fireEvents(value: boolean);
            /** Controls the behaviour of the Animator component when a GameObject is inactive.
            */
            public get keepAnimatorStateOnDisable(): boolean;
            public set keepAnimatorStateOnDisable(value: boolean);
            /** Specifies whether playable graph values are reset or preserved when the Animator is disabled.
            */
            public get writeDefaultValuesOnDisable(): boolean;
            public set writeDefaultValuesOnDisable(value: boolean);
            /** Returns the value of the given float parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetFloat($name: string): number
            /** Returns the value of the given float parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetFloat($id: number): number
            /** Send float values to the Animator to affect transitions.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            * @param $dampTime The damper total time.
            * @param $deltaTime The delta time to give to the damper.
            */
            public SetFloat($name: string, $value: number): void
            /** Send float values to the Animator to affect transitions.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            * @param $dampTime The damper total time.
            * @param $deltaTime The delta time to give to the damper.
            */
            public SetFloat($name: string, $value: number, $dampTime: number, $deltaTime: number): void
            /** Send float values to the Animator to affect transitions.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            * @param $dampTime The damper total time.
            * @param $deltaTime The delta time to give to the damper.
            */
            public SetFloat($id: number, $value: number): void
            /** Send float values to the Animator to affect transitions.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            * @param $dampTime The damper total time.
            * @param $deltaTime The delta time to give to the damper.
            */
            public SetFloat($id: number, $value: number, $dampTime: number, $deltaTime: number): void
            /** Returns the value of the given boolean parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetBool($name: string): boolean
            /** Returns the value of the given boolean parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetBool($id: number): boolean
            /** Sets the value of the given boolean parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            */
            public SetBool($name: string, $value: boolean): void
            /** Sets the value of the given boolean parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            */
            public SetBool($id: number, $value: boolean): void
            /** Returns the value of the given integer parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetInteger($name: string): number
            /** Returns the value of the given integer parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns The value of the parameter. 
            */
            public GetInteger($id: number): number
            /** Sets the value of the given integer parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            */
            public SetInteger($name: string, $value: number): void
            /** Sets the value of the given integer parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @param $value The new parameter value.
            */
            public SetInteger($id: number, $value: number): void
            /** Sets the value of the given trigger parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            */
            public SetTrigger($name: string): void
            /** Sets the value of the given trigger parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            */
            public SetTrigger($id: number): void
            /** Resets the value of the given trigger parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            */
            public ResetTrigger($name: string): void
            /** Resets the value of the given trigger parameter.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            */
            public ResetTrigger($id: number): void
            /** Returns true if the parameter is controlled by a curve, false otherwise.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns True if the parameter is controlled by a curve, false otherwise. 
            */
            public IsParameterControlledByCurve($name: string): boolean
            /** Returns true if the parameter is controlled by a curve, false otherwise.
            * @param $name The parameter name.
            * @param $id The parameter ID.
            * @returns True if the parameter is controlled by a curve, false otherwise. 
            */
            public IsParameterControlledByCurve($id: number): boolean
            /** Gets the position of an IK goal.
            * @param $goal The AvatarIKGoal that is queried.
            * @returns Return the current position of this IK goal in world space. 
            */
            public GetIKPosition($goal: UnityEngine.AvatarIKGoal): UnityEngine.Vector3
            /** Sets the position of an IK goal.
            * @param $goal The AvatarIKGoal that is set.
            * @param $goalPosition The position in world space.
            */
            public SetIKPosition($goal: UnityEngine.AvatarIKGoal, $goalPosition: UnityEngine.Vector3): void
            /** Gets the rotation of an IK goal.
            * @param $goal The AvatarIKGoal that is is queried.
            */
            public GetIKRotation($goal: UnityEngine.AvatarIKGoal): UnityEngine.Quaternion
            /** Sets the rotation of an IK goal.
            * @param $goal The AvatarIKGoal that is set.
            * @param $goalRotation The rotation of the goal in world space which should follow Unity's world coordinates convention (see below).
            */
            public SetIKRotation($goal: UnityEngine.AvatarIKGoal, $goalRotation: UnityEngine.Quaternion): void
            /** Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
            * @param $goal The AvatarIKGoal that is queried.
            */
            public GetIKPositionWeight($goal: UnityEngine.AvatarIKGoal): number
            /** Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).
            * @param $goal The AvatarIKGoal that is set.
            * @param $value The translative weight.
            */
            public SetIKPositionWeight($goal: UnityEngine.AvatarIKGoal, $value: number): void
            /** Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
            * @param $goal The AvatarIKGoal that is queried.
            */
            public GetIKRotationWeight($goal: UnityEngine.AvatarIKGoal): number
            /** Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).
            * @param $goal The AvatarIKGoal that is set.
            * @param $value The rotational weight.
            */
            public SetIKRotationWeight($goal: UnityEngine.AvatarIKGoal, $value: number): void
            /** Gets the position of an IK hint.
            * @param $hint The AvatarIKHint that is queried.
            * @returns Return the current position of this IK hint in world space. 
            */
            public GetIKHintPosition($hint: UnityEngine.AvatarIKHint): UnityEngine.Vector3
            /** Sets the position of an IK hint.
            * @param $hint The AvatarIKHint that is set.
            * @param $hintPosition The position in world space.
            */
            public SetIKHintPosition($hint: UnityEngine.AvatarIKHint, $hintPosition: UnityEngine.Vector3): void
            /** Gets the translative weight of an IK Hint (0 = at the original animation before IK, 1 = at the hint).
            * @param $hint The AvatarIKHint that is queried.
            * @returns Return translative weight. 
            */
            public GetIKHintPositionWeight($hint: UnityEngine.AvatarIKHint): number
            /** Sets the translative weight of an IK hint (0 = at the original animation before IK, 1 = at the hint).
            * @param $hint The AvatarIKHint that is set.
            * @param $value The translative weight.
            */
            public SetIKHintPositionWeight($hint: UnityEngine.AvatarIKHint, $value: number): void
            /** Sets the look at position.
            * @param $lookAtPosition The position to lookAt.
            */
            public SetLookAtPosition($lookAtPosition: UnityEngine.Vector3): void
            /** Set look at weights.
            * @param $weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param $bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param $headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param $eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param $clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight($weight: number): void
            /** Set look at weights.
            * @param $weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param $bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param $headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param $eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param $clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight($weight: number, $bodyWeight: number): void
            /** Set look at weights.
            * @param $weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param $bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param $headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param $eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param $clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight($weight: number, $bodyWeight: number, $headWeight: number): void
            /** Set look at weights.
            * @param $weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param $bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param $headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param $eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param $clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight($weight: number, $bodyWeight: number, $headWeight: number, $eyesWeight: number): void
            /** Set look at weights.
            * @param $weight (0-1) the global weight of the LookAt, multiplier for other parameters.
            * @param $bodyWeight (0-1) determines how much the body is involved in the LookAt.
            * @param $headWeight (0-1) determines how much the head is involved in the LookAt.
            * @param $eyesWeight (0-1) determines how much the eyes are involved in the LookAt.
            * @param $clampWeight (0-1) 0.0 means the character is unrestrained in motion. 1.0 means the character is clamped (look at becomes impossible). 0.5 means the character is able to move on half of the possible range (180 degrees).
            */
            public SetLookAtWeight($weight: number, $bodyWeight: number, $headWeight: number, $eyesWeight: number, $clampWeight: number): void
            /** Sets local rotation of a human bone during a IK pass.
            * @param $humanBoneId The human bone Id.
            * @param $rotation The local rotation.
            */
            public SetBoneLocalRotation($humanBoneId: UnityEngine.HumanBodyBones, $rotation: UnityEngine.Quaternion): void
            public GetBehaviours($fullPathHash: number, $layerIndex: number): System.Array$1<UnityEngine.StateMachineBehaviour>
            /** Returns the layer name.
            * @param $layerIndex The layer index.
            * @returns The layer name. 
            */
            public GetLayerName($layerIndex: number): string
            /** Returns the index of the layer with the given name.
            * @param $layerName The layer name.
            * @returns The layer index. 
            */
            public GetLayerIndex($layerName: string): number
            /** Returns the weight of the layer at the specified index.
            * @param $layerIndex The layer index.
            * @returns The layer weight. 
            */
            public GetLayerWeight($layerIndex: number): number
            /** Sets the weight of the layer at the given index.
            * @param $layerIndex The layer index.
            * @param $weight The new layer weight.
            */
            public SetLayerWeight($layerIndex: number, $weight: number): void
            /** Returns an AnimatorStateInfo with the information on the current state.
            * @param $layerIndex The layer index.
            * @returns An AnimatorStateInfo with the information on the current state. 
            */
            public GetCurrentAnimatorStateInfo($layerIndex: number): UnityEngine.AnimatorStateInfo
            /** Returns an AnimatorStateInfo with the information on the next state.
            * @param $layerIndex The layer index.
            * @returns An AnimatorStateInfo with the information on the next state. 
            */
            public GetNextAnimatorStateInfo($layerIndex: number): UnityEngine.AnimatorStateInfo
            /** Returns an AnimatorTransitionInfo with the informations on the current transition.
            * @param $layerIndex The layer's index.
            * @returns An AnimatorTransitionInfo with the informations on the current transition. 
            */
            public GetAnimatorTransitionInfo($layerIndex: number): UnityEngine.AnimatorTransitionInfo
            /** Returns the number of AnimatorClipInfo in the current state.
            * @param $layerIndex The layer index.
            * @returns The number of AnimatorClipInfo in the current state. 
            */
            public GetCurrentAnimatorClipInfoCount($layerIndex: number): number
            /** Returns the number of AnimatorClipInfo in the next state.
            * @param $layerIndex The layer index.
            * @returns The number of AnimatorClipInfo in the next state. 
            */
            public GetNextAnimatorClipInfoCount($layerIndex: number): number
            /** Returns an array of all the AnimatorClipInfo in the current state of the given layer.
            * @param $layerIndex The layer index.
            * @returns An array of all the AnimatorClipInfo in the current state. 
            */
            public GetCurrentAnimatorClipInfo($layerIndex: number): System.Array$1<UnityEngine.AnimatorClipInfo>
            /** Returns an array of all the AnimatorClipInfo in the next state of the given layer.
            * @param $layerIndex The layer index.
            * @returns An array of all the AnimatorClipInfo in the next state. 
            */
            public GetNextAnimatorClipInfo($layerIndex: number): System.Array$1<UnityEngine.AnimatorClipInfo>
            public GetCurrentAnimatorClipInfo($layerIndex: number, $clips: System.Collections.Generic.List$1<UnityEngine.AnimatorClipInfo>): void
            public GetNextAnimatorClipInfo($layerIndex: number, $clips: System.Collections.Generic.List$1<UnityEngine.AnimatorClipInfo>): void
            /** Returns true if there is a transition on the given layer, false otherwise.
            * @param $layerIndex The layer index.
            * @returns True if there is a transition on the given layer, false otherwise. 
            */
            public IsInTransition($layerIndex: number): boolean
            /** See AnimatorController.parameters.
            */
            public GetParameter($index: number): UnityEngine.AnimatorControllerParameter
            public MatchTarget($matchPosition: UnityEngine.Vector3, $matchRotation: UnityEngine.Quaternion, $targetBodyPart: UnityEngine.AvatarTarget, $weightMask: UnityEngine.MatchTargetWeightMask, $startNormalizedTime: number): void
            /** Automatically adjust the GameObject position and rotation.
            * @param $matchPosition The position we want the body part to reach.
            * @param $matchRotation The rotation in which we want the body part to be.
            * @param $targetBodyPart The body part that is involved in the match.
            * @param $weightMask Structure that contains weights for matching position and rotation.
            * @param $startNormalizedTime Start time within the animation clip (0 - beginning of clip, 1 - end of clip).
            * @param $targetNormalizedTime End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.
            * @param $completeMatch Allows you to specify what should happen if the MatchTarget function is interrupted. A value of true causes the GameObject to immediately move to the matchPosition if interrupted. A value of false causes the GameObject to stay at its current position if interrupted.
            */
            public MatchTarget($matchPosition: UnityEngine.Vector3, $matchRotation: UnityEngine.Quaternion, $targetBodyPart: UnityEngine.AvatarTarget, $weightMask: UnityEngine.MatchTargetWeightMask, $startNormalizedTime: number, $targetNormalizedTime: number): void
            public MatchTarget($matchPosition: UnityEngine.Vector3, $matchRotation: UnityEngine.Quaternion, $targetBodyPart: UnityEngine.AvatarTarget, $weightMask: UnityEngine.MatchTargetWeightMask, $startNormalizedTime: number, $targetNormalizedTime: number, $completeMatch: boolean): void
            /** Interrupts the automatic target matching.
            */
            public InterruptMatchTarget(): void
            /** Interrupts the automatic target matching.
            */
            public InterruptMatchTarget($completeMatch: boolean): void
            public CrossFadeInFixedTime($stateName: string, $fixedTransitionDuration: number): void
            public CrossFadeInFixedTime($stateName: string, $fixedTransitionDuration: number, $layer: number): void
            public CrossFadeInFixedTime($stateName: string, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number): void
            /** Creates a crossfade from the current state to any other state using times in seconds.
            * @param $stateName The name of the state.
            * @param $stateHashName The hash name of the state.
            * @param $fixedTransitionDuration The duration of the transition (in seconds).
            * @param $layer The layer where the crossfade occurs.
            * @param $fixedTimeOffset The time of the state (in seconds).
            * @param $normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFadeInFixedTime($stateName: string, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number, $normalizedTransitionTime: number): void
            public CrossFadeInFixedTime($stateHashName: number, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number): void
            public CrossFadeInFixedTime($stateHashName: number, $fixedTransitionDuration: number, $layer: number): void
            public CrossFadeInFixedTime($stateHashName: number, $fixedTransitionDuration: number): void
            /** Creates a crossfade from the current state to any other state using times in seconds.
            * @param $stateName The name of the state.
            * @param $stateHashName The hash name of the state.
            * @param $fixedTransitionDuration The duration of the transition (in seconds).
            * @param $layer The layer where the crossfade occurs.
            * @param $fixedTimeOffset The time of the state (in seconds).
            * @param $normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFadeInFixedTime($stateHashName: number, $fixedTransitionDuration: number, $layer: number, $fixedTimeOffset: number, $normalizedTransitionTime: number): void
            /** Forces a write of the default values stored in the animator.
            */
            public WriteDefaultValues(): void
            public CrossFade($stateName: string, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number): void
            public CrossFade($stateName: string, $normalizedTransitionDuration: number, $layer: number): void
            public CrossFade($stateName: string, $normalizedTransitionDuration: number): void
            /** Creates a crossfade from the current state to any other state using normalized times.
            * @param $stateName The name of the state.
            * @param $stateHashName The hash name of the state.
            * @param $normalizedTransitionDuration The duration of the transition (normalized).
            * @param $layer The layer where the crossfade occurs.
            * @param $normalizedTimeOffset The time of the state (normalized).
            * @param $normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFade($stateName: string, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number, $normalizedTransitionTime: number): void
            /** Creates a crossfade from the current state to any other state using normalized times.
            * @param $stateName The name of the state.
            * @param $stateHashName The hash name of the state.
            * @param $normalizedTransitionDuration The duration of the transition (normalized).
            * @param $layer The layer where the crossfade occurs.
            * @param $normalizedTimeOffset The time of the state (normalized).
            * @param $normalizedTransitionTime The time of the transition (normalized).
            */
            public CrossFade($stateHashName: number, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number, $normalizedTransitionTime: number): void
            public CrossFade($stateHashName: number, $normalizedTransitionDuration: number, $layer: number, $normalizedTimeOffset: number): void
            public CrossFade($stateHashName: number, $normalizedTransitionDuration: number, $layer: number): void
            public CrossFade($stateHashName: number, $normalizedTransitionDuration: number): void
            public PlayInFixedTime($stateName: string, $layer: number): void
            public PlayInFixedTime($stateName: string): void
            /** Plays a state.
            * @param $stateName The state name.
            * @param $stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param $layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param $fixedTime The time offset (in seconds).
            */
            public PlayInFixedTime($stateName: string, $layer: number, $fixedTime: number): void
            /** Plays a state.
            * @param $stateName The state name.
            * @param $stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param $layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param $fixedTime The time offset (in seconds).
            */
            public PlayInFixedTime($stateNameHash: number, $layer: number, $fixedTime: number): void
            public PlayInFixedTime($stateNameHash: number, $layer: number): void
            public PlayInFixedTime($stateNameHash: number): void
            public Play($stateName: string, $layer: number): void
            public Play($stateName: string): void
            /** Plays a state.
            * @param $stateName The state name.
            * @param $stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param $layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param $normalizedTime The time offset between zero and one.
            */
            public Play($stateName: string, $layer: number, $normalizedTime: number): void
            /** Plays a state.
            * @param $stateName The state name.
            * @param $stateNameHash The state hash name. If stateNameHash is 0, it changes the current state time.
            * @param $layer The layer index. If layer is -1, it plays the first state with the given state name or hash.
            * @param $normalizedTime The time offset between zero and one.
            */
            public Play($stateNameHash: number, $layer: number, $normalizedTime: number): void
            public Play($stateNameHash: number, $layer: number): void
            public Play($stateNameHash: number): void
            /** Sets an AvatarTarget and a targetNormalizedTime for the current state.
            * @param $targetIndex The avatar body part that is queried.
            * @param $targetNormalizedTime The current state Time that is queried.
            */
            public SetTarget($targetIndex: UnityEngine.AvatarTarget, $targetNormalizedTime: number): void
            /** Retrieves the Transform mapped to a human bone based on its id.
            * @param $humanBoneId The human bone to be queried. See the HumanBodyBones enum for a list of possible values.
            * @returns Returns the Transform mapped to the human bone. Returns null if the human bone has no Transform. 
            */
            public GetBoneTransform($humanBoneId: UnityEngine.HumanBodyBones): UnityEngine.Transform
            /** Sets the animator in playback mode.
            */
            public StartPlayback(): void
            /** Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic.
            */
            public StopPlayback(): void
            /** Sets the animator in recording mode, and allocates a circular buffer of size frameCount.
            * @param $frameCount The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.
            */
            public StartRecording($frameCount: number): void
            /** Stops animator record mode.
            */
            public StopRecording(): void
            /** Returns true if the state exists in this layer, false otherwise.
            * @param $layerIndex The layer index.
            * @param $stateID The state ID.
            * @returns True if the state exists in this layer, false otherwise. 
            */
            public HasState($layerIndex: number, $stateID: number): boolean
            /** Generates an parameter id from a string.
            * @param $name The string to convert to Id.
            */
            public static StringToHash($name: string): number
            /** Evaluates the animator based on deltaTime.
            * @param $deltaTime The time delta.
            */
            public Update($deltaTime: number): void
            /** Rebind all the animated properties and mesh data with the Animator.
            */
            public Rebind(): void
            /** Apply the default Root Motion.
            */
            public ApplyBuiltinRootMotion(): void
            public constructor()
        }
        /** Representation of 3D vectors and points.
        */
        class Vector3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector3> {
            protected [__keep_incompatibility]: never;
            public static kEpsilon: number
            public static kEpsilonNormalSqrt: number
            /** X component of the vector.
            */
            public x: number
            /** Y component of the vector.
            */
            public y: number
            /** Z component of the vector.
            */
            public z: number
            /** Returns a normalized vector based on the current vector. The normalized vector has a magnitude of 1 and is in the same direction as the current vector. Returns a zero vector If the current vector is too small to be normalized.
            */
            public get normalized(): UnityEngine.Vector3;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector3(0, 0, 0).
            */
            public static get zero(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 1, 1).
            */
            public static get one(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, 1).
            */
            public static get forward(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, -1).
            */
            public static get back(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 1, 0).
            */
            public static get up(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, -1, 0).
            */
            public static get down(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(-1, 0, 0).
            */
            public static get left(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 0, 0).
            */
            public static get right(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector3;
            /** Spherically interpolates between two vectors.
            */
            public static Slerp($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number): UnityEngine.Vector3
            /** Spherically interpolates between two vectors.
            */
            public static SlerpUnclamped($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number): UnityEngine.Vector3
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>): void
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>, $binormal: $Ref<UnityEngine.Vector3>): void
            /** Rotates a vector current towards target.
            * @param $current The vector being managed.
            * @param $target The vector.
            * @param $maxRadiansDelta The maximum angle in radians allowed for this rotation.
            * @param $maxMagnitudeDelta The maximum allowed change in vector magnitude for this rotation.
            * @returns The location that RotateTowards generates. 
            */
            public static RotateTowards($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxRadiansDelta: number, $maxMagnitudeDelta: number): UnityEngine.Vector3
            /** Linearly interpolates between two points.
            * @param $a Start value, returned when t = 0.
            * @param $b End value, returned when t = 1.
            * @param $t Value used to interpolate between a and b.
            * @returns Interpolated value, equals to a + (b - a) * t. 
            */
            public static Lerp($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number): UnityEngine.Vector3
            /** Linearly interpolates between two vectors.
            */
            public static LerpUnclamped($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number): UnityEngine.Vector3
            /** Calculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistanceDelta.
            * @param $current The position to move from.
            * @param $target The position to move towards.
            * @param $maxDistanceDelta Distance to move current per call.
            * @returns The new position. 
            */
            public static MoveTowards($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxDistanceDelta: number): UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number): UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number): UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number, $deltaTime: number): UnityEngine.Vector3
            public get_Item($index: number): number
            public set_Item($index: number, $value: number): void
            /** Set x, y and z components of an existing Vector3.
            */
            public Set($newX: number, $newY: number, $newZ: number): void
            /** Multiplies two vectors component-wise.
            */
            public static Scale($a: UnityEngine.Vector3, $b: UnityEngine.Vector3): UnityEngine.Vector3
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale($scale: UnityEngine.Vector3): void
            /** Cross Product of two vectors.
            */
            public static Cross($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): UnityEngine.Vector3
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals($other: any): boolean
            public Equals($other: UnityEngine.Vector3): boolean
            /** Reflects a vector off the plane defined by a normal.
            * @param $inDirection The direction vector towards the plane.
            * @param $inNormal The normal vector that defines the plane.
            */
            public static Reflect($inDirection: UnityEngine.Vector3, $inNormal: UnityEngine.Vector3): UnityEngine.Vector3
            /** Returns a normalized vector based on the given vector. The normalized vector has a magnitude of 1 and is in the same direction as the given vector. Returns a zero vector If the given vector is too small to be normalized.
            * @param $value The vector to be normalized.
            * @returns A new vector with the same direction as the original vector but with a magnitude of 1.0. 
            */
            public static Normalize($value: UnityEngine.Vector3): UnityEngine.Vector3
            /** Makes this vector have a magnitude of 1.
            */
            public Normalize(): void
            /** Dot Product of two vectors.
            */
            public static Dot($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): number
            /** Projects a vector onto another vector.
            */
            public static Project($vector: UnityEngine.Vector3, $onNormal: UnityEngine.Vector3): UnityEngine.Vector3
            /** Projects a vector onto a plane.
            * @param $vector The vector to project on the plane.
            * @param $planeNormal The normal which defines the plane to project on.
            * @returns The orthogonal projection of vector on the plane. 
            */
            public static ProjectOnPlane($vector: UnityEngine.Vector3, $planeNormal: UnityEngine.Vector3): UnityEngine.Vector3
            /** Calculates the angle between two vectors.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The angle in degrees between the two vectors. 
            */
            public static Angle($from: UnityEngine.Vector3, $to: UnityEngine.Vector3): number
            /** Calculates the signed angle between vectors from and to in relation to axis.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @param $axis A vector around which the other vectors are rotated.
            * @returns Returns the signed angle between from and to in degrees. 
            */
            public static SignedAngle($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $axis: UnityEngine.Vector3): number
            /** Returns the distance between a and b.
            */
            public static Distance($a: UnityEngine.Vector3, $b: UnityEngine.Vector3): number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude($vector: UnityEngine.Vector3, $maxLength: number): UnityEngine.Vector3
            public static Magnitude($vector: UnityEngine.Vector3): number
            public static SqrMagnitude($vector: UnityEngine.Vector3): number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): UnityEngine.Vector3
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): UnityEngine.Vector3
            public static op_Addition($a: UnityEngine.Vector3, $b: UnityEngine.Vector3): UnityEngine.Vector3
            public static op_Subtraction($a: UnityEngine.Vector3, $b: UnityEngine.Vector3): UnityEngine.Vector3
            public static op_UnaryNegation($a: UnityEngine.Vector3): UnityEngine.Vector3
            public static op_Multiply($a: UnityEngine.Vector3, $d: number): UnityEngine.Vector3
            public static op_Multiply($d: number, $a: UnityEngine.Vector3): UnityEngine.Vector3
            public static op_Division($a: UnityEngine.Vector3, $d: number): UnityEngine.Vector3
            public static op_Equality($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): boolean
            public static op_Inequality($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3): boolean
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString(): string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string): string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string, $formatProvider: System.IFormatProvider): string
            public constructor($x: number, $y: number, $z: number)
            public constructor($x: number, $y: number)
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        /** Quaternions are used to represent rotations.
        */
        class Quaternion extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Quaternion> {
            protected [__keep_incompatibility]: never;
        }
        /** The update mode of the Animator.
        */
        enum AnimatorUpdateMode { Normal = 0, AnimatePhysics = 1, UnscaledTime = 2 }
        /** IK Goal.
        */
        enum AvatarIKGoal { LeftFoot = 0, RightFoot = 1, LeftHand = 2, RightHand = 3 }
        /** IK Hint.
        */
        enum AvatarIKHint { LeftKnee = 0, RightKnee = 1, LeftElbow = 2, RightElbow = 3 }
        /** Human Body Bones.
        */
        enum HumanBodyBones { Hips = 0, LeftUpperLeg = 1, RightUpperLeg = 2, LeftLowerLeg = 3, RightLowerLeg = 4, LeftFoot = 5, RightFoot = 6, Spine = 7, Chest = 8, UpperChest = 54, Neck = 9, Head = 10, LeftShoulder = 11, RightShoulder = 12, LeftUpperArm = 13, RightUpperArm = 14, LeftLowerArm = 15, RightLowerArm = 16, LeftHand = 17, RightHand = 18, LeftToes = 19, RightToes = 20, LeftEye = 21, RightEye = 22, Jaw = 23, LeftThumbProximal = 24, LeftThumbIntermediate = 25, LeftThumbDistal = 26, LeftIndexProximal = 27, LeftIndexIntermediate = 28, LeftIndexDistal = 29, LeftMiddleProximal = 30, LeftMiddleIntermediate = 31, LeftMiddleDistal = 32, LeftRingProximal = 33, LeftRingIntermediate = 34, LeftRingDistal = 35, LeftLittleProximal = 36, LeftLittleIntermediate = 37, LeftLittleDistal = 38, RightThumbProximal = 39, RightThumbIntermediate = 40, RightThumbDistal = 41, RightIndexProximal = 42, RightIndexIntermediate = 43, RightIndexDistal = 44, RightMiddleProximal = 45, RightMiddleIntermediate = 46, RightMiddleDistal = 47, RightRingProximal = 48, RightRingIntermediate = 49, RightRingDistal = 50, RightLittleProximal = 51, RightLittleIntermediate = 52, RightLittleDistal = 53, LastBone = 55 }
        /** A class you can derive from if you want to create objects that live independently of GameObjects.
        */
        class ScriptableObject extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Creates an instance of a scriptable object.
            * @param $className The type of the ScriptableObject to create, as the name of the type.
            * @param $type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance($className: string): UnityEngine.ScriptableObject
            /** Creates an instance of a scriptable object.
            * @param $className The type of the ScriptableObject to create, as the name of the type.
            * @param $type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance($type: System.Type): UnityEngine.ScriptableObject
            public constructor()
        }
        /** StateMachineBehaviour is a component that can be added to a state machine state. It's the base class any script on a state must derive from.
        */
        class StateMachineBehaviour extends UnityEngine.ScriptableObject {
            protected [__keep_incompatibility]: never;
            public OnStateEnter($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number): void
            public OnStateUpdate($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number): void
            public OnStateExit($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number): void
            public OnStateMove($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number): void
            public OnStateIK($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number): void
            /** Invoked on the first update frame when taking a transition into a state machine. Implement this message to influence the entry transition into the sub-state machine.
            * @param $animator The Animator evaluating the state machine.
            * @param $stateMachinePathHash The hash of the full path to the state machine.
            */
            public OnStateMachineEnter($animator: UnityEngine.Animator, $stateMachinePathHash: number): void
            /** Invoked on the last update frame when taking a transition out of a StateMachine. Implement this message to influence the exit transition out of the sub-state machine
            * @param $animator The Animator evaluating the state machine.
            * @param $stateMachinePathHash The hash of the full path to the state machine.
            */
            public OnStateMachineExit($animator: UnityEngine.Animator, $stateMachinePathHash: number): void
            public OnStateEnter($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateUpdate($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateExit($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateMove($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateIK($animator: UnityEngine.Animator, $stateInfo: UnityEngine.AnimatorStateInfo, $layerIndex: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateMachineEnter($animator: UnityEngine.Animator, $stateMachinePathHash: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
            public OnStateMachineExit($animator: UnityEngine.Animator, $stateMachinePathHash: number, $controller: UnityEngine.Animations.AnimatorControllerPlayable): void
        }
        /** Information about the current or next state.
        */
        class AnimatorStateInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Information about the current transition.
        */
        class AnimatorTransitionInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Information about clip being played and blended by the Animator.
        */
        class AnimatorClipInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Used to communicate between scripting and the controller. Some parameters can be set in scripting and used by the controller, while other parameters are based on Custom Curves in Animation Clips and can be sampled using the scripting API.
        */
        class AnimatorControllerParameter extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns the hash of the parameter based on its name.
            */
            public get nameHash(): number;
            /** The type of the parameter.
            */
            public get type(): UnityEngine.AnimatorControllerParameterType;
            public set type(value: UnityEngine.AnimatorControllerParameterType);
            /** The default float value for the parameter.
            */
            public get defaultFloat(): number;
            public set defaultFloat(value: number);
            /** The default int value for the parameter.
            */
            public get defaultInt(): number;
            public set defaultInt(value: number);
            /** The default bool value for the parameter.
            */
            public get defaultBool(): boolean;
            public set defaultBool(value: boolean);
            public constructor()
        }
        /** Target.
        */
        enum AvatarTarget { Root = 0, Body = 1, LeftFoot = 2, RightFoot = 3, LeftHand = 4, RightHand = 5 }
        /** Use this struct to specify the position and rotation weight mask for Animator.MatchTarget.
        */
        class MatchTargetWeightMask extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Position, rotation and scale of an object.
        */
        class Transform extends UnityEngine.Component implements System.Collections.IEnumerable {
            protected [__keep_incompatibility]: never;
            /** The world space position of the Transform.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** Position of the transform relative to the parent transform.
            */
            public get localPosition(): UnityEngine.Vector3;
            public set localPosition(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees.
            */
            public get eulerAngles(): UnityEngine.Vector3;
            public set eulerAngles(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees relative to the parent transform's rotation.
            */
            public get localEulerAngles(): UnityEngine.Vector3;
            public set localEulerAngles(value: UnityEngine.Vector3);
            /** The red axis of the transform in world space.
            */
            public get right(): UnityEngine.Vector3;
            public set right(value: UnityEngine.Vector3);
            /** The green axis of the transform in world space.
            */
            public get up(): UnityEngine.Vector3;
            public set up(value: UnityEngine.Vector3);
            /** Returns a normalized vector representing the blue axis of the transform in world space.
            */
            public get forward(): UnityEngine.Vector3;
            public set forward(value: UnityEngine.Vector3);
            /** A Quaternion that stores the rotation of the Transform in world space.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The rotation of the transform relative to the transform rotation of the parent.
            */
            public get localRotation(): UnityEngine.Quaternion;
            public set localRotation(value: UnityEngine.Quaternion);
            /** The scale of the transform relative to the GameObjects parent.
            */
            public get localScale(): UnityEngine.Vector3;
            public set localScale(value: UnityEngine.Vector3);
            /** The parent of the transform.
            */
            public get parent(): UnityEngine.Transform;
            public set parent(value: UnityEngine.Transform);
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Returns the topmost transform in the hierarchy.
            */
            public get root(): UnityEngine.Transform;
            /** The number of children the parent Transform has.
            */
            public get childCount(): number;
            /** The global scale of the object (Read Only).
            */
            public get lossyScale(): UnityEngine.Vector3;
            /** Has the transform changed since the last time the flag was set to 'false'?
            */
            public get hasChanged(): boolean;
            public set hasChanged(value: boolean);
            /** The transform capacity of the transform's hierarchy data structure.
            */
            public get hierarchyCapacity(): number;
            public set hierarchyCapacity(value: number);
            /** The number of transforms in the transform's hierarchy data structure.
            */
            public get hierarchyCount(): number;
            /** Set the parent of the transform.
            * @param $parent The parent Transform to use.
            * @param $worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent($p: UnityEngine.Transform): void
            /** Set the parent of the transform.
            * @param $parent The parent Transform to use.
            * @param $worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent($parent: UnityEngine.Transform, $worldPositionStays: boolean): void
            /** Sets the world space position and rotation of the Transform component.
            */
            public SetPositionAndRotation($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            /** Sets the position and rotation of the Transform component in local space (i.e. relative to its parent transform).
            */
            public SetLocalPositionAndRotation($localPosition: UnityEngine.Vector3, $localRotation: UnityEngine.Quaternion): void
            /** Gets the position and rotation of the Transform component in world space.
            */
            public GetPositionAndRotation($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>): void
            /** Gets the position and rotation of the Transform component in local space (that is, relative to its parent transform).
            */
            public GetLocalPositionAndRotation($localPosition: $Ref<UnityEngine.Vector3>, $localRotation: $Ref<UnityEngine.Quaternion>): void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Space): void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate($translation: UnityEngine.Vector3): void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Space): void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate($x: number, $y: number, $z: number): void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Transform): void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Transform): void
            /** Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).
            * @param $eulers The rotation to apply in euler angles.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to  the GameObject or relative to the Scene in world space.
            */
            public Rotate($eulers: UnityEngine.Vector3, $relativeTo: UnityEngine.Space): void
            /** Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).
            * @param $eulers The rotation to apply in euler angles.
            */
            public Rotate($eulers: UnityEngine.Vector3): void
            /** The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).
            * @param $xAngle Degrees to rotate the GameObject around the X axis.
            * @param $yAngle Degrees to rotate the GameObject around the Y axis.
            * @param $zAngle Degrees to rotate the GameObject around the Z axis.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            */
            public Rotate($xAngle: number, $yAngle: number, $zAngle: number, $relativeTo: UnityEngine.Space): void
            /** The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).
            * @param $xAngle Degrees to rotate the GameObject around the X axis.
            * @param $yAngle Degrees to rotate the GameObject around the Y axis.
            * @param $zAngle Degrees to rotate the GameObject around the Z axis.
            */
            public Rotate($xAngle: number, $yAngle: number, $zAngle: number): void
            /** Rotates the object around the given axis by the number of degrees defined by the given angle.
            * @param $axis The axis to apply rotation to.
            * @param $angle The degrees of rotation to apply.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            */
            public Rotate($axis: UnityEngine.Vector3, $angle: number, $relativeTo: UnityEngine.Space): void
            /** Rotates the object around the given axis by the number of degrees defined by the given angle.
            * @param $axis The axis to apply rotation to.
            * @param $angle The degrees of rotation to apply.
            */
            public Rotate($axis: UnityEngine.Vector3, $angle: number): void
            /** Rotates the transform about axis passing through point in world coordinates by angle degrees.
            */
            public RotateAround($point: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $angle: number): void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param $target Object to point towards.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt($target: UnityEngine.Transform, $worldUp: UnityEngine.Vector3): void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param $target Object to point towards.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt($target: UnityEngine.Transform): void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param $worldPosition Point to look at.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt($worldPosition: UnityEngine.Vector3, $worldUp: UnityEngine.Vector3): void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param $worldPosition Point to look at.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt($worldPosition: UnityEngine.Vector3): void
            /** Transforms direction from local space to world space.
            */
            public TransformDirection($direction: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms direction x, y, z from local space to world space.
            */
            public TransformDirection($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection($direction: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Transforms vector from local space to world space.
            */
            public TransformVector($vector: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms vector x, y, z from local space to world space.
            */
            public TransformVector($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Transforms a vector from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector($vector: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms the vector x, y, z from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Transforms position from local space to world space.
            */
            public TransformPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms the position x, y, z from local space to world space.
            */
            public TransformPoint($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Transforms position from world space to local space.
            */
            public InverseTransformPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms the position x, y, z from world space to local space.
            */
            public InverseTransformPoint($x: number, $y: number, $z: number): UnityEngine.Vector3
            /** Unparents all children.
            */
            public DetachChildren(): void
            /** Move the transform to the start of the local transform list.
            */
            public SetAsFirstSibling(): void
            /** Move the transform to the end of the local transform list.
            */
            public SetAsLastSibling(): void
            /** Sets the sibling index.
            * @param $index Index to set.
            */
            public SetSiblingIndex($index: number): void
            /** Gets the sibling index.
            */
            public GetSiblingIndex(): number
            /** Finds a child by name n and returns it.
            * @param $n Name of child to be found.
            * @returns The found child transform. Null if child with matching name isn't found. 
            */
            public Find($n: string): UnityEngine.Transform
            /** Is this transform a child of parent?
            */
            public IsChildOf($parent: UnityEngine.Transform): boolean
            public GetEnumerator(): System.Collections.IEnumerator
            /** Returns a transform child by index.
            * @param $index Index of the child transform to return. Must be smaller than Transform.childCount.
            * @returns Transform child by index. 
            */
            public GetChild($index: number): UnityEngine.Transform
            public SetParent($parentObj: UnityEngine.Object): UnityEngine.Transform
            public SetParent($parentObj: UnityEngine.Object, $worldPositionStavs: boolean): UnityEngine.Transform
            public SetParent($rootObj: UnityEngine.Object, $parentPath: string): UnityEngine.Transform
            public SetParent($rootObj: UnityEngine.Object, $parentPath: string, $worldPositionStavs?: boolean): UnityEngine.Transform
        }
        /** Position, rotation and scale of an object.
        */
        interface Transform {
            Index($name: string, $type?: System.Type): any;
            AddChild($prefab: UnityEngine.GameObject, $layer?: number): UnityEngine.GameObject;
            EnsureChild($count: number, $active?: boolean, $prefab?: UnityEngine.GameObject): void;
            EachChild($handler: EP.U3D.UI.UIHelper.EachChildHandler): void;
            ShowChild($handler?: EP.U3D.UI.UIHelper.EachChildHandler): void;
            HideChild($handler?: EP.U3D.UI.UIHelper.EachChildHandler): void;
        }
        /** Culling mode for the Animator.
        */
        enum AnimatorCullingMode { AlwaysAnimate = 0, CullUpdateTransforms = 1, CullCompletely = 2, BasedOnRenderers = 1 }
        /** The mode of the Animator's recorder.
        */
        enum AnimatorRecorderMode { Offline = 0, Playback = 1, Record = 2 }
        /** The runtime representation of the AnimatorController. Use this representation to change the Animator Controller during runtime.
        */
        class RuntimeAnimatorController extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Retrieves all AnimationClip used by the controller.
            */
            public get animationClips(): System.Array$1<UnityEngine.AnimationClip>;
        }
        /** Avatar definition.
        */
        class Avatar extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.
            */
            public get isValid(): boolean;
            /** Return true if this avatar is a valid human avatar.
            */
            public get isHuman(): boolean;
            /** Returns the HumanDescription used to create this Avatar.
            */
            public get humanDescription(): UnityEngine.HumanDescription;
        }
        interface IAnimationClipSource {
            GetAnimationClips($results: System.Collections.Generic.List$1<UnityEngine.AnimationClip>): void
        }
        /** Base class for AnimationClips and BlendTrees.
        */
        class Motion extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            public get averageDuration(): number;
            public get averageAngularSpeed(): number;
            public get averageSpeed(): UnityEngine.Vector3;
            public get apparentSpeed(): number;
            public get isLooping(): boolean;
            public get legacy(): boolean;
            public get isHumanMotion(): boolean;
        }
        /** Stores keyframe based animations.
        */
        class AnimationClip extends UnityEngine.Motion {
            protected [__keep_incompatibility]: never;
            /** Animation length in seconds. (Read Only)
            */
            public get length(): number;
            /** Frame rate at which keyframes are sampled. (Read Only)
            */
            public get frameRate(): number;
            public set frameRate(value: number);
            /** Sets the default wrap mode used in the animation state.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** AABB of this Animation Clip in local space of Animation component that it is attached too.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Set to true if the AnimationClip will be used with the Legacy Animation component ( instead of the Animator ).
            */
            public get legacy(): boolean;
            public set legacy(value: boolean);
            /** Returns true if the animation contains curve that drives a humanoid rig.
            */
            public get humanMotion(): boolean;
            /** Returns true if the animation clip has no curves and no events.
            */
            public get empty(): boolean;
            /** Returns true if the Animation has animation on the root transform.
            */
            public get hasGenericRootTransform(): boolean;
            /** Returns true if the AnimationClip has editor curves for its root motion.
            */
            public get hasMotionFloatCurves(): boolean;
            /** Returns true if the AnimationClip has root motion curves.
            */
            public get hasMotionCurves(): boolean;
            /** Returns true if the AnimationClip has root Curves.
            */
            public get hasRootCurves(): boolean;
            /** Animation Events for this animation clip.
            */
            public get events(): System.Array$1<UnityEngine.AnimationEvent>;
            public set events(value: System.Array$1<UnityEngine.AnimationEvent>);
            /** Samples an animation at a given time for any animated properties.
            * @param $go The animated game object.
            * @param $time The time to sample an animation.
            */
            public SampleAnimation($go: UnityEngine.GameObject, $time: number): void
            /** Assigns the curve to animate a specific property.
            * @param $relativePath Path to the game object this curve applies to. The relativePath
            is formatted similar to a pathname, e.g. "rootspineleftArm".  If relativePath
            is empty it refers to the game object the animation clip is attached to.
            * @param $type The class type of the component that is animated.
            * @param $propertyName The name or path to the property being animated.
            * @param $curve The animation curve.
            */
            public SetCurve($relativePath: string, $type: System.Type, $propertyName: string, $curve: UnityEngine.AnimationCurve): void
            /** Realigns quaternion keys to ensure shortest interpolation paths.
            */
            public EnsureQuaternionContinuity(): void
            /** Clears all curves from the clip.
            */
            public ClearCurves(): void
            /** Adds an animation event to the clip.
            * @param $evt AnimationEvent to add.
            */
            public AddEvent($evt: UnityEngine.AnimationEvent): void
            public constructor()
        }
        /** The SharedBetweenAnimatorsAttribute specifies that this StateMachineBehaviour is instantiated only once and shared by all Animator instances. This attribute reduces the memory footprint for each controller instance.
        */
        class SharedBetweenAnimatorsAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** The animation component is used to play back animations.
        */
        class Animation extends UnityEngine.Behaviour implements System.Collections.IEnumerable {
            protected [__keep_incompatibility]: never;
            /** The default animation.
            */
            public get clip(): UnityEngine.AnimationClip;
            public set clip(value: UnityEngine.AnimationClip);
            /** Should the default animation clip (the Animation.clip property) automatically start playing on startup?
            */
            public get playAutomatically(): boolean;
            public set playAutomatically(value: boolean);
            /** How should time beyond the playback range of the clip be treated?
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** Is an animation currently being played?
            */
            public get isPlaying(): boolean;
            /** When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.
            */
            public get animatePhysics(): boolean;
            public set animatePhysics(value: boolean);
            /** Controls culling of this Animation component.
            */
            public get cullingType(): UnityEngine.AnimationCullingType;
            public set cullingType(value: UnityEngine.AnimationCullingType);
            /** AABB of this Animation animation component in local space.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Stops all playing animations that were started with this Animation.
            */
            public Stop(): void
            /** Stops an animation named name.
            */
            public Stop($name: string): void
            /** Rewinds all animations.
            */
            public Rewind(): void
            /** Rewinds the animation named name.
            */
            public Rewind($name: string): void
            /** Samples animations at the current state.
            */
            public Sample(): void
            /** Is the animation named name playing?
            */
            public IsPlaying($name: string): boolean
            public get_Item($name: string): UnityEngine.AnimationState
            public Play(): boolean
            /** Plays an animation without blending.
            * @returns If no name is supplied and there is no default animation, then this method returns false. Otherwise, it returns true. 
            */
            public Play($mode: UnityEngine.PlayMode): boolean
            /** Plays an animation without blending.
            * @returns If no name is supplied and there is no default animation, then this method returns false. Otherwise, it returns true. 
            */
            public Play($animation: string): boolean
            /** Plays an animation without blending.
            * @returns If no name is supplied and there is no default animation, then this method returns false. Otherwise, it returns true. 
            */
            public Play($animation: string, $mode: UnityEngine.PlayMode): boolean
            /** Fades in the animation with the name animation over a period of time defined by fadeLength.
            */
            public CrossFade($animation: string): void
            /** Fades in the animation with the name animation over a period of time defined by fadeLength.
            */
            public CrossFade($animation: string, $fadeLength: number): void
            /** Fades in the animation with the name animation over a period of time defined by fadeLength.
            */
            public CrossFade($animation: string, $fadeLength: number, $mode: UnityEngine.PlayMode): void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend($animation: string): void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend($animation: string, $targetWeight: number): void
            /** Blends the animation named animation towards targetWeight over the next time seconds.
            */
            public Blend($animation: string, $targetWeight: number, $fadeLength: number): void
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued($animation: string): UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued($animation: string, $fadeLength: number): UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued($animation: string, $fadeLength: number, $queue: UnityEngine.QueueMode): UnityEngine.AnimationState
            /** Cross fades an animation after previous animations has finished playing.
            */
            public CrossFadeQueued($animation: string, $fadeLength: number, $queue: UnityEngine.QueueMode, $mode: UnityEngine.PlayMode): UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued($animation: string): UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued($animation: string, $queue: UnityEngine.QueueMode): UnityEngine.AnimationState
            /** Plays an animation after previous animations has finished playing.
            */
            public PlayQueued($animation: string, $queue: UnityEngine.QueueMode, $mode: UnityEngine.PlayMode): UnityEngine.AnimationState
            /** Adds a clip to the animation with name newName.
            */
            public AddClip($clip: UnityEngine.AnimationClip, $newName: string): void
            /** Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
            * @param $addLoopFrame Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.
            */
            public AddClip($clip: UnityEngine.AnimationClip, $newName: string, $firstFrame: number, $lastFrame: number): void
            /** Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.
            * @param $addLoopFrame Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.
            */
            public AddClip($clip: UnityEngine.AnimationClip, $newName: string, $firstFrame: number, $lastFrame: number, $addLoopFrame: boolean): void
            /** Remove clip from the animation list.
            */
            public RemoveClip($clip: UnityEngine.AnimationClip): void
            /** Remove clip from the animation list.
            */
            public RemoveClip($clipName: string): void
            /** Get the number of clips currently assigned to this animation.
            */
            public GetClipCount(): number
            public SyncLayer($layer: number): void
            public GetEnumerator(): System.Collections.IEnumerator
            public GetClip($name: string): UnityEngine.AnimationClip
            public constructor()
        }
        /** Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.
        */
        enum WrapMode { Once = 1, Loop = 2, PingPong = 4, Default = 0, ClampForever = 8, Clamp = 1 }
        class TrackedReference extends System.Object {
            protected [__keep_incompatibility]: never;
            public static op_Equality($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference): boolean
            public static op_Inequality($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference): boolean
            public static op_Implicit($exists: UnityEngine.TrackedReference): boolean
        }
        /** The AnimationState gives full control over animation blending.
        */
        class AnimationState extends UnityEngine.TrackedReference {
            protected [__keep_incompatibility]: never;
            /** Enables / disables the animation.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The weight of animation.
            */
            public get weight(): number;
            public set weight(value: number);
            /** Wrapping mode of the animation.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** The current time of the animation.
            */
            public get time(): number;
            public set time(value: number);
            /** Normalized time of the State.
            */
            public get normalizedTime(): number;
            public set normalizedTime(value: number);
            /** The playback speed of the animation. 1 is normal playback speed.
            */
            public get speed(): number;
            public set speed(value: number);
            /** The normalized playback speed.
            */
            public get normalizedSpeed(): number;
            public set normalizedSpeed(value: number);
            /** The length of the animation clip in seconds.
            */
            public get length(): number;
            public get layer(): number;
            public set layer(value: number);
            /** The clip that is being played by this animation state.
            */
            public get clip(): UnityEngine.AnimationClip;
            /** The name of the animation.
            */
            public get name(): string;
            public set name(value: string);
            /** Which blend mode should be used?
            */
            public get blendMode(): UnityEngine.AnimationBlendMode;
            public set blendMode(value: UnityEngine.AnimationBlendMode);
            /** Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
            * @param $mix The transform to animate.
            * @param $recursive Whether to also animate all children of the specified transform.
            */
            public AddMixingTransform($mix: UnityEngine.Transform): void
            /** Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.
            * @param $mix The transform to animate.
            * @param $recursive Whether to also animate all children of the specified transform.
            */
            public AddMixingTransform($mix: UnityEngine.Transform, $recursive: boolean): void
            /** Removes a transform which should be animated.
            */
            public RemoveMixingTransform($mix: UnityEngine.Transform): void
            public constructor()
        }
        /** Used by Animation.Play function.
        */
        enum PlayMode { StopSameLayer = 0, StopAll = 4 }
        /** Used by Animation.Play function.
        */
        enum QueueMode { CompleteOthers = 0, PlayNow = 2 }
        enum AnimationPlayMode { Stop = 0, Queue = 1, Mix = 2 }
        /** This enum controlls culling of Animation component.
        */
        enum AnimationCullingType { AlwaysAnimate = 0, BasedOnRenderers = 1, BasedOnClipBounds = 2, BasedOnUserBounds = 3 }
        /** Represents an axis aligned bounding box.
        */
        class Bounds extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Bounds> {
            protected [__keep_incompatibility]: never;
        }
        /** Used by Animation.Play function.
        */
        enum AnimationBlendMode { Blend = 0, Additive = 1 }
        /** AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.
        */
        class AnimationEvent extends System.Object {
            protected [__keep_incompatibility]: never;
            /** String parameter that is stored in the event and will be sent to the function.
            */
            public get stringParameter(): string;
            public set stringParameter(value: string);
            /** Float parameter that is stored in the event and will be sent to the function.
            */
            public get floatParameter(): number;
            public set floatParameter(value: number);
            /** Int parameter that is stored in the event and will be sent to the function.
            */
            public get intParameter(): number;
            public set intParameter(value: number);
            /** Object reference parameter that is stored in the event and will be sent to the function.
            */
            public get objectReferenceParameter(): UnityEngine.Object;
            public set objectReferenceParameter(value: UnityEngine.Object);
            /** The name of the function that will be called.
            */
            public get functionName(): string;
            public set functionName(value: string);
            /** The time at which the event will be fired off.
            */
            public get time(): number;
            public set time(value: number);
            /** Function call options.
            */
            public get messageOptions(): UnityEngine.SendMessageOptions;
            public set messageOptions(value: UnityEngine.SendMessageOptions);
            /** Returns true if this Animation event has been fired by an Animation component.
            */
            public get isFiredByLegacy(): boolean;
            /** Returns true if this Animation event has been fired by an Animator component.
            */
            public get isFiredByAnimator(): boolean;
            /** The animation state that fired this event (Read Only).
            */
            public get animationState(): UnityEngine.AnimationState;
            /** The animator state info related to this event (Read Only).
            */
            public get animatorStateInfo(): UnityEngine.AnimatorStateInfo;
            /** The animator clip info related to this event (Read Only).
            */
            public get animatorClipInfo(): UnityEngine.AnimatorClipInfo;
            public constructor()
        }
        /** Options for how to send a message.
        */
        enum SendMessageOptions { RequireReceiver = 0, DontRequireReceiver = 1 }
        /** Base class for all entities in Unity Scenes.
        */
        class GameObject extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The layer the GameObject is in.
            */
            public get layer(): number;
            public set layer(value: number);
            /** The local active state of this GameObject. (Read Only)
            */
            public get activeSelf(): boolean;
            /** Defines whether the GameObject is active in the Scene.
            */
            public get activeInHierarchy(): boolean;
            /** Gets and sets the GameObject's StaticEditorFlags.
            */
            public get isStatic(): boolean;
            public set isStatic(value: boolean);
            /** The tag of this GameObject.
            */
            public get tag(): string;
            public set tag(value: string);
            /** Scene that the GameObject is part of.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            /** Scene culling mask Unity uses to determine which scene to render the GameObject in.
            */
            public get sceneCullingMask(): bigint;
            public get gameObject(): UnityEngine.GameObject;
            /** Creates a GameObject with a primitive mesh renderer and appropriate collider.
            * @param $type The type of primitive object to create.
            */
            public static CreatePrimitive($type: UnityEngine.PrimitiveType): UnityEngine.GameObject
            /** The non-generic version of this method.
            * @param $type The type of Component to search for.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent($type: System.Type): UnityEngine.Component
            /** The string-based version of this method.
            * @param $type The name of the type of Component to search for.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent($type: string): UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren($type: System.Type, $includeInactive: boolean): UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren($type: System.Type): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent($type: System.Type, $includeInactive: boolean): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent($type: System.Type): UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @returns An array containing all matching components of type type. 
            */
            public GetComponents($type: System.Type): System.Array$1<UnityEngine.Component>
            public GetComponents($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>): void
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren($type: System.Type): System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren($type: System.Type, $includeInactive: boolean): System.Array$1<UnityEngine.Component>
            public GetComponentsInParent($type: System.Type): System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInParent($type: System.Type, $includeInactive: boolean): System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent($type: System.Type, $component: $Ref<UnityEngine.Component>): boolean
            /** Returns one active GameObject tagged tag. Returns null if no GameObject was found.
            * @param $tag The tag to search for.
            */
            public static FindWithTag($tag: string): UnityEngine.GameObject
            public SendMessageUpwards($methodName: string, $options: UnityEngine.SendMessageOptions): void
            public SendMessage($methodName: string, $options: UnityEngine.SendMessageOptions): void
            public BroadcastMessage($methodName: string, $options: UnityEngine.SendMessageOptions): void
            /** Adds a component class of type componentType to the GameObject. C# Users can use a generic version.
            */
            public AddComponent($componentType: System.Type): UnityEngine.Component
            /** Returns the number of components on this GameObject.
            * @returns The number of components. 
            */
            public GetComponentCount(): number
            /** Gets a reference to a component of type T at a specific index on the specified GameObject.
            * @param $index The component index.
            * @returns A reference to a component of the type T at an index. Otherwise, returns null. 
            */
            public GetComponentAtIndex($index: number): UnityEngine.Component
            /** Gets the index of the component specified on the specified GameObject.
            * @param $component The component to search for.
            * @returns The component index. Otherwise, returns -1. 
            */
            public GetComponentIndex($component: UnityEngine.Component): number
            /** ActivatesDeactivates the GameObject, depending on the given true or false/ value.
            * @param $value Activate or deactivate the object, where true activates the GameObject and false deactivates the GameObject.
            */
            public SetActive($value: boolean): void
            /** Is this GameObject tagged with tag ?
            * @param $tag The tag to compare.
            */
            public CompareTag($tag: string): boolean
            public static FindGameObjectWithTag($tag: string): UnityEngine.GameObject
            /** Returns an array of active GameObjects tagged tag. Returns empty array if no GameObject was found.
            * @param $tag The name of the tag to search GameObjects for.
            */
            public static FindGameObjectsWithTag($tag: string): System.Array$1<UnityEngine.GameObject>
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards($methodName: string, $value: any): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards($methodName: string): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage($methodName: string, $value: any): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage($methodName: string): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage($methodName: string, $parameter: any): void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage($methodName: string): void
            /** Finds a GameObject by name and returns it.
            */
            public static Find($name: string): UnityEngine.GameObject
            public static SetGameObjectsActive($instanceIDs: Unity.Collections.NativeArray$1<number>, $active: boolean): void
            public static InstantiateGameObjects($sourceInstanceID: number, $count: number, $newInstanceIDs: Unity.Collections.NativeArray$1<number>, $newTransformInstanceIDs: Unity.Collections.NativeArray$1<number>, $destinationScene?: UnityEngine.SceneManagement.Scene): void
            /** Returns the Scene of a GameObject given by instance ID.
            * @param $instanceID The instance ID of a GameObject.
            * @returns Scene of GameObject of instance ID. 
            */
            public static GetScene($instanceID: number): UnityEngine.SceneManagement.Scene
            public constructor($name: string)
            public constructor()
            public constructor($name: string, ...components: System.Type[])
            public SetLayer($layerName: string): void
            public SetLayer($path: string, $layerName: string): void
        }
        /** Base class for all entities in Unity Scenes.
        */
        interface GameObject {
            Index($name: string, $type?: System.Type): any;
            SetLayer($layer: number): void;
        }
        /** Store a collection of Keyframes that can be evaluated over time.
        */
        class AnimationCurve extends System.Object implements System.IEquatable$1<UnityEngine.AnimationCurve> {
            protected [__keep_incompatibility]: never;
            /** All keys defined in the animation curve.
            */
            public get keys(): System.Array$1<UnityEngine.Keyframe>;
            public set keys(value: System.Array$1<UnityEngine.Keyframe>);
            /** The number of keys in the curve. (Read Only)
            */
            public get length(): number;
            /** The behaviour of the animation before the first keyframe.
            */
            public get preWrapMode(): UnityEngine.WrapMode;
            public set preWrapMode(value: UnityEngine.WrapMode);
            /** The behaviour of the animation after the last keyframe.
            */
            public get postWrapMode(): UnityEngine.WrapMode;
            public set postWrapMode(value: UnityEngine.WrapMode);
            /** Evaluate the curve at time.
            * @param $time The time within the curve you want to evaluate (the horizontal axis in the curve graph).
            * @returns The value of the curve, at the point in time specified. 
            */
            public Evaluate($time: number): number
            /** Add a new key to the curve.
            * @param $time The time at which to add the key (horizontal axis in the curve graph).
            * @param $value The value for the key (vertical axis in the curve graph).
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey($time: number, $value: number): number
            /** Add a new key to the curve.
            * @param $key The key to add to the curve.
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey($key: UnityEngine.Keyframe): number
            /** Moves the key at index to key.time and key.value.
            * @param $index The index of the key to move.
            * @param $key The keyframe containing the new time and value.
            * @returns The index of the keyframe after moving it. 
            */
            public MoveKey($index: number, $key: UnityEngine.Keyframe): number
            /** Erases all KeyFrame from this instance of the AnimationCurve.
            */
            public ClearKeys(): void
            /** Removes a key.
            * @param $index The index of the key to remove.
            */
            public RemoveKey($index: number): void
            public get_Item($index: number): UnityEngine.Keyframe
            /** Smooth the in and out tangents of the keyframe at index.
            * @param $index The index of the keyframe to be smoothed.
            * @param $weight The smoothing weight to apply to the keyframe's tangents.
            */
            public SmoothTangents($index: number, $weight: number): void
            /** Creates a constant "curve" starting at timeStart, ending at timeEnd, and set to the value value.
            * @param $timeStart The start time for the constant curve.
            * @param $timeEnd The end time for the constant curve.
            * @param $value The value for the constant curve.
            * @returns The constant curve created from the specified values. 
            */
            public static Constant($timeStart: number, $timeEnd: number, $value: number): UnityEngine.AnimationCurve
            /** A straight Line starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param $timeStart The start time for the linear curve.
            * @param $valueStart The start value for the linear curve.
            * @param $timeEnd The end time for the linear curve.
            * @param $valueEnd The end value for the linear curve.
            * @returns The linear curve created from the specified values. 
            */
            public static Linear($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number): UnityEngine.AnimationCurve
            /** Creates an ease-in and out curve starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param $timeStart The start time for the ease curve.
            * @param $valueStart The start value for the ease curve.
            * @param $timeEnd The end time for the ease curve.
            * @param $valueEnd The end value for the ease curve.
            * @returns The ease-in and out curve generated from the specified values. 
            */
            public static EaseInOut($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number): UnityEngine.AnimationCurve
            public Equals($o: any): boolean
            public Equals($other: UnityEngine.AnimationCurve): boolean
            /** Copies the keys and properties of the specified AnimationCurve object into this instance of the  AnimationCurve class.
            * @param $other The AnimationCurve object to obtain the values to copy.
            */
            public CopyFrom($other: UnityEngine.AnimationCurve): void
            public constructor(...keys: UnityEngine.Keyframe[])
            public constructor()
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
        }
        /** The type of the parameter.
        */
        enum AnimatorControllerParameterType { Float = 1, Int = 3, Bool = 4, Trigger = 9 }
        /** Interface to control Animator Override Controller.
        */
        class AnimatorOverrideController extends UnityEngine.RuntimeAnimatorController {
            protected [__keep_incompatibility]: never;
            /** The Runtime Animator Controller that the Animator Override Controller overrides.
            */
            public get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
            public set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
            /** Returns the count of overrides.
            */
            public get overridesCount(): number;
            public get_Item($name: string): UnityEngine.AnimationClip
            public set_Item($name: string, $value: UnityEngine.AnimationClip): void
            public get_Item($clip: UnityEngine.AnimationClip): UnityEngine.AnimationClip
            public set_Item($clip: UnityEngine.AnimationClip, $value: UnityEngine.AnimationClip): void
            public GetOverrides($overrides: System.Collections.Generic.List$1<System.Collections.Generic.KeyValuePair$2<UnityEngine.AnimationClip, UnityEngine.AnimationClip>>): void
            public ApplyOverrides($overrides: System.Collections.Generic.IList$1<System.Collections.Generic.KeyValuePair$2<UnityEngine.AnimationClip, UnityEngine.AnimationClip>>): void
            public constructor()
            public constructor($controller: UnityEngine.RuntimeAnimatorController)
        }
        /** This class defines a pair of clips used by AnimatorOverrideController.
        */
        class AnimationClipPair extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Various utilities for animator manipulation.
        */
        class AnimatorUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** This function will remove all transform hierarchy under GameObject, the animator will write directly transform matrices into the skin mesh matrices saving many CPU cycles.
            * @param $go GameObject to Optimize.
            * @param $exposedTransforms List of transform name to expose.
            */
            public static OptimizeTransformHierarchy($go: UnityEngine.GameObject, $exposedTransforms: System.Array$1<string>): void
            /** This function will recreate all transform hierarchy under GameObject.
            * @param $go GameObject to Deoptimize.
            */
            public static DeoptimizeTransformHierarchy($go: UnityEngine.GameObject): void
            public constructor()
        }
        /** Class that holds humanoid avatar parameters to pass to the AvatarBuilder.BuildHumanAvatar function.
        */
        class HumanDescription extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Class to build avatars from user scripts.
        */
        class AvatarBuilder extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Create a humanoid avatar.
            * @param $go Root object of your transform hierachy. It must be the top most gameobject when you create the avatar.
            * @param $humanDescription Humanoid description of the avatar.
            * @returns Returns the Avatar, you must always always check the avatar is valid before using it with Avatar.isValid. 
            */
            public static BuildHumanAvatar($go: UnityEngine.GameObject, $humanDescription: UnityEngine.HumanDescription): UnityEngine.Avatar
            /** Create a new generic avatar.
            * @param $go Root object of your transform hierarchy.
            * @param $rootMotionTransformName Transform name of the root motion transform. If empty no root motion is defined and you must take care of avatar movement yourself.
            */
            public static BuildGenericAvatar($go: UnityEngine.GameObject, $rootMotionTransformName: string): UnityEngine.Avatar
            public constructor()
        }
        /** AvatarMask is used to mask out humanoid body parts and transforms.
        */
        class AvatarMask extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Number of transforms.
            */
            public get transformCount(): number;
            public set transformCount(value: number);
            /** Returns true if the humanoid body part at the given index is active.
            * @param $index The index of the humanoid body part.
            */
            public GetHumanoidBodyPartActive($index: UnityEngine.AvatarMaskBodyPart): boolean
            /** Sets the humanoid body part at the given index to active or not.
            * @param $index The index of the humanoid body part.
            * @param $value Active or not.
            */
            public SetHumanoidBodyPartActive($index: UnityEngine.AvatarMaskBodyPart, $value: boolean): void
            public AddTransformPath($transform: UnityEngine.Transform): void
            /** Adds a transform path into the AvatarMask.
            * @param $transform The transform to add into the AvatarMask.
            * @param $recursive Whether to also add all children of the specified transform.
            */
            public AddTransformPath($transform: UnityEngine.Transform, $recursive: boolean): void
            public RemoveTransformPath($transform: UnityEngine.Transform): void
            /** Removes a transform path from the AvatarMask.
            * @param $transform The Transform that should be removed from the AvatarMask.
            * @param $recursive Whether to also remove all children of the specified transform.
            */
            public RemoveTransformPath($transform: UnityEngine.Transform, $recursive: boolean): void
            /** Returns the path of the transform at the given index.
            * @param $index The index of the transform.
            */
            public GetTransformPath($index: number): string
            /** Sets the path of the transform at the given index.
            * @param $index The index of the transform.
            * @param $path The path of the transform.
            */
            public SetTransformPath($index: number, $path: string): void
            /** Returns true if the transform at the given index is active.
            * @param $index The index of the transform.
            */
            public GetTransformActive($index: number): boolean
            /** Sets the tranform at the given index to active or not.
            * @param $index The index of the transform.
            * @param $value Active or not.
            */
            public SetTransformActive($index: number, $value: boolean): void
            public constructor()
        }
        /** Avatar body part.
        */
        enum AvatarMaskBodyPart { Root = 0, Body = 1, Head = 2, LeftLeg = 3, RightLeg = 4, LeftArm = 5, RightArm = 6, LeftFingers = 7, RightFingers = 8, LeftFootIK = 9, RightFootIK = 10, LeftHandIK = 11, RightHandIK = 12, LastBodyPart = 13 }
        /** Use this class to create, read, and write the HumanPose for a humanoid avatar skeleton hierarchy or an avatar pose.
        */
        class HumanPoseHandler extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public Dispose(): void
            /** Computes a human pose from the avatar skeleton, stores the pose in the human pose handler, and returns the human pose.
            * @param $humanPose The output human pose. In the human pose, the bodyPosition and bodyRotation are the position and rotation of the approximate center of mass of the humanoid in world space. bodyPosition is normalized: the position is divided by avatar human scale.
            */
            public GetHumanPose($humanPose: $Ref<UnityEngine.HumanPose>): void
            /** Stores the specified human pose inside the human pose handler.
            * @param $humanPose The human pose to set. In the human pose, the bodyPosition and bodyRotation are the position and rotation of the approximate center of mass of the humanoid. This is relative to the humanoid root transform and it is normalized: the local position is divided by avatar human scale.
            */
            public SetHumanPose($humanPose: $Ref<UnityEngine.HumanPose>): void
            /** Gets the internal human pose stored in the human pose handler.
            * @param $humanPose The output human pose. In the human pose, the bodyPosition and bodyRotation are the position and rotation of the approximate center of mass of the humanoid in world space. bodyPosition is normalized: the position is divided by avatar human scale.
            */
            public GetInternalHumanPose($humanPose: $Ref<UnityEngine.HumanPose>): void
            /** Stores the specified human pose as the internal human pose inside the human pose handler.
            * @param $humanPose The human pose to set. In the human pose, the bodyPosition and bodyRotation are the position and rotation of the approximate center of mass of the humanoid. This is relative to the humanoid root transform and it is normalized: the local position is divided by avatar human scale.
            */
            public SetInternalHumanPose($humanPose: $Ref<UnityEngine.HumanPose>): void
            public GetInternalAvatarPose($avatarPose: Unity.Collections.NativeArray$1<number>): void
            public SetInternalAvatarPose($avatarPose: Unity.Collections.NativeArray$1<number>): void
            public constructor($avatar: UnityEngine.Avatar, $root: UnityEngine.Transform)
            public constructor($avatar: UnityEngine.Avatar, $jointPaths: System.Array$1<string>)
            public constructor()
        }
        /** Retargetable humanoid pose.
        */
        class HumanPose extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Details of all the human bone and muscle types defined by Mecanim.
        */
        class HumanTrait extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The number of human muscle types defined by Mecanim.
            */
            public static get MuscleCount(): number;
            /** Array of the names of all human muscle types defined by Mecanim.
            */
            public static get MuscleName(): System.Array$1<string>;
            /** The number of human bone types defined by Mecanim.
            */
            public static get BoneCount(): number;
            /** Array of the names of all human bone types defined by Mecanim.
            */
            public static get BoneName(): System.Array$1<string>;
            /** The number of bone types that are required by Mecanim for any human model.
            */
            public static get RequiredBoneCount(): number;
            /** Obtain the muscle index for a particular bone index and "degree of freedom".
            * @param $i Bone index.
            * @param $dofIndex Number representing a "degree of freedom": 0 for X-Axis, 1 for Y-Axis, 2 for Z-Axis.
            */
            public static MuscleFromBone($i: number, $dofIndex: number): number
            /** Return the bone to which a particular muscle is connected.
            * @param $i Muscle index.
            */
            public static BoneFromMuscle($i: number): number
            /** Is the bone a member of the minimal set of bones that Mecanim requires for a human model?
            * @param $i Index of the bone to test.
            */
            public static RequiredBone($i: number): boolean
            /** Get the default minimum value of rotation for a muscle in degrees.
            * @param $i Muscle index.
            */
            public static GetMuscleDefaultMin($i: number): number
            /** Get the default maximum value of rotation for a muscle in degrees.
            * @param $i Muscle index.
            */
            public static GetMuscleDefaultMax($i: number): number
            /** Gets the bone hierarchy mass.
            * @param $i The humanoid bone index.
            * @returns The bone hierarchy mass. 
            */
            public static GetBoneDefaultHierarchyMass($i: number): number
            /** Returns parent humanoid bone index of a bone.
            * @param $i Humanoid bone index to get parent from.
            * @returns Humanoid bone index of parent. 
            */
            public static GetParentBone($i: number): number
            public constructor()
        }
        /** AssetBundles let you stream additional assets via the UnityWebRequest class and instantiate them at runtime.
        */
        class AssetBundle extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Return true if the AssetBundle is a streamed Scene AssetBundle.
            */
            public get isStreamedSceneAssetBundle(): boolean;
            /** Controls the size of the shared AssetBundle loading cache. Default value is 1MB. 
            */
            public static get memoryBudgetKB(): number;
            public static set memoryBudgetKB(value: number);
            /** Unloads all currently loaded AssetBundles.
            * @param $unloadAllObjects Determines whether the current instances of objects loaded from AssetBundles will also be unloaded.
            */
            public static UnloadAllAssetBundles($unloadAllObjects: boolean): void
            /** To use when you need to get a list of all the currently loaded Asset Bundles.
            * @returns Returns IEnumerable<AssetBundle> of all currently loaded Asset Bundles. 
            */
            public static GetAllLoadedAssetBundles(): System.Collections.Generic.IEnumerable$1<UnityEngine.AssetBundle>
            public static LoadFromFileAsync($path: string): UnityEngine.AssetBundleCreateRequest
            public static LoadFromFileAsync($path: string, $crc: number): UnityEngine.AssetBundleCreateRequest
            /** Asynchronously loads an AssetBundle from a file on disk.
            * @param $path Path of the file on disk.
            * @param $crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @param $offset An optional byte offset. This value specifies where to start reading the AssetBundle from.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromFileAsync($path: string, $crc: number, $offset: bigint): UnityEngine.AssetBundleCreateRequest
            public static LoadFromFile($path: string): UnityEngine.AssetBundle
            public static LoadFromFile($path: string, $crc: number): UnityEngine.AssetBundle
            /** Synchronously loads an AssetBundle from a file on disk.
            * @param $path Path of the file on disk.
            * @param $crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @param $offset An optional byte offset. This value specifies where to start reading the AssetBundle from.
            * @returns Loaded AssetBundle object or null if failed. 
            */
            public static LoadFromFile($path: string, $crc: number, $offset: bigint): UnityEngine.AssetBundle
            public static LoadFromMemoryAsync($binary: System.Array$1<number>): UnityEngine.AssetBundleCreateRequest
            /** Asynchronously create an AssetBundle from a memory region.
            * @param $binary Array of bytes with the AssetBundle data.
            * @param $crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromMemoryAsync($binary: System.Array$1<number>, $crc: number): UnityEngine.AssetBundleCreateRequest
            public static LoadFromMemory($binary: System.Array$1<number>): UnityEngine.AssetBundle
            /** Synchronously create an AssetBundle from a memory region.
            * @param $binary Array of bytes with the AssetBundle data.
            * @param $crc An optional CRC-32 checksum of the uncompressed content. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match.
            * @returns Loaded AssetBundle object or null if failed. 
            */
            public static LoadFromMemory($binary: System.Array$1<number>, $crc: number): UnityEngine.AssetBundle
            /** Asynchronously loads an AssetBundle from a managed Stream.
            * @param $stream The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.
            * @param $crc An optional CRC-32 checksum of the uncompressed content.
            * @param $managedReadBufferSize You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.
            * @returns Asynchronous create request for an AssetBundle. Use AssetBundleCreateRequest.assetBundle property to get an AssetBundle once it is loaded. 
            */
            public static LoadFromStreamAsync($stream: System.IO.Stream, $crc: number, $managedReadBufferSize: number): UnityEngine.AssetBundleCreateRequest
            public static LoadFromStreamAsync($stream: System.IO.Stream, $crc: number): UnityEngine.AssetBundleCreateRequest
            public static LoadFromStreamAsync($stream: System.IO.Stream): UnityEngine.AssetBundleCreateRequest
            /** Synchronously loads an AssetBundle from a managed Stream.
            * @param $stream The managed Stream object. Unity calls Read(), Seek() and the Length property on this object to load the AssetBundle data.
            * @param $crc An optional CRC-32 checksum of the uncompressed content.
            * @param $managedReadBufferSize You can use this to override the size of the read buffer Unity uses while loading data. The default size is 32KB.
            * @returns The loaded AssetBundle object or null when the object fails to load. 
            */
            public static LoadFromStream($stream: System.IO.Stream, $crc: number, $managedReadBufferSize: number): UnityEngine.AssetBundle
            public static LoadFromStream($stream: System.IO.Stream, $crc: number): UnityEngine.AssetBundle
            public static LoadFromStream($stream: System.IO.Stream): UnityEngine.AssetBundle
            /** Check if an AssetBundle contains a specific object.
            */
            public Contains($name: string): boolean
            /** Loads asset with name of type T from the bundle.
            */
            public LoadAsset($name: string): UnityEngine.Object
            /** Loads asset with name of a given type from the bundle.
            */
            public LoadAsset($name: string, $type: System.Type): UnityEngine.Object
            /** Asynchronously loads asset with name of a given T from the bundle.
            */
            public LoadAssetAsync($name: string): UnityEngine.AssetBundleRequest
            /** Asynchronously loads asset with name of a given type from the bundle.
            */
            public LoadAssetAsync($name: string, $type: System.Type): UnityEngine.AssetBundleRequest
            /** Loads asset and sub assets with name of type T from the bundle.
            */
            public LoadAssetWithSubAssets($name: string): System.Array$1<UnityEngine.Object>
            /** Loads asset and sub assets with name of a given type from the bundle.
            */
            public LoadAssetWithSubAssets($name: string, $type: System.Type): System.Array$1<UnityEngine.Object>
            /** Loads asset with sub assets with name of type T from the bundle asynchronously.
            */
            public LoadAssetWithSubAssetsAsync($name: string): UnityEngine.AssetBundleRequest
            /** Loads asset with sub assets with name of a given type from the bundle asynchronously.
            */
            public LoadAssetWithSubAssetsAsync($name: string, $type: System.Type): UnityEngine.AssetBundleRequest
            /** Loads all assets contained in the asset bundle that inherit from type T.
            */
            public LoadAllAssets(): System.Array$1<UnityEngine.Object>
            /** Loads all assets contained in the asset bundle that inherit from type.
            */
            public LoadAllAssets($type: System.Type): System.Array$1<UnityEngine.Object>
            /** Loads all assets contained in the asset bundle that inherit from T asynchronously.
            */
            public LoadAllAssetsAsync(): UnityEngine.AssetBundleRequest
            /** Loads all assets contained in the asset bundle that inherit from type asynchronously.
            */
            public LoadAllAssetsAsync($type: System.Type): UnityEngine.AssetBundleRequest
            /** Unloads an AssetBundle freeing its data.
            * @param $unloadAllLoadedObjects Determines whether the current instances of objects loaded from the AssetBundle will also be unloaded.
            */
            public Unload($unloadAllLoadedObjects: boolean): void
            /** Unloads assets in the bundle.
            * @returns Asynchronous unload request for an AssetBundle. 
            */
            public UnloadAsync($unloadAllLoadedObjects: boolean): UnityEngine.AssetBundleUnloadOperation
            /** Return all asset names in the AssetBundle.
            */
            public GetAllAssetNames(): System.Array$1<string>
            /** Return all the Scene asset paths (paths to *.unity assets) in the AssetBundle.
            */
            public GetAllScenePaths(): System.Array$1<string>
            /** Asynchronously recompress a downloaded/stored AssetBundle from one BuildCompression to another.
            * @param $inputPath Path to the AssetBundle to recompress.
            * @param $outputPath Path to the recompressed AssetBundle to be generated. Can be the same as inputPath.
            * @param $method The compression method, level and blocksize to use during recompression. Only some BuildCompression types are supported (see note).
            * @param $expectedCRC CRC of the AssetBundle to test against. Testing this requires additional file reading and computation. Pass in 0 to skip this check. Unity does not compute a CRC when the source and destination BuildCompression are the same, so no CRC verification takes place (see note).
            * @param $priority The priority at which the recompression operation should run. This sets thread priority during the operation and does not effect the order in which operations are performed. Recompression operations run on a background worker thread.
            */
            public static RecompressAssetBundleAsync($inputPath: string, $outputPath: string, $method: UnityEngine.BuildCompression, $expectedCRC?: number, $priority?: UnityEngine.ThreadPriority): UnityEngine.AssetBundleRecompressOperation
        }
        /** Base class for all yield instructions.
        */
        class YieldInstruction extends System.Object {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Asynchronous operation coroutine.
        */
        class AsyncOperation extends UnityEngine.YieldInstruction {
            protected [__keep_incompatibility]: never;
            /** Has the operation finished? (Read Only)
            */
            public get isDone(): boolean;
            /** What's the operation's progress. (Read Only)
            */
            public get progress(): number;
            /** Priority lets you tweak in which order async operation calls will be performed.
            */
            public get priority(): number;
            public set priority(value: number);
            /** Allow Scenes to be activated as soon as it is ready.
            */
            public get allowSceneActivation(): boolean;
            public set allowSceneActivation(value: boolean);
            public add_completed($value: System.Action$1<UnityEngine.AsyncOperation>): void
            public remove_completed($value: System.Action$1<UnityEngine.AsyncOperation>): void
            public constructor()
        }
        /** Asynchronous create request for an AssetBundle.
        */
        class AssetBundleCreateRequest extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get assetBundle(): UnityEngine.AssetBundle;
            public constructor()
        }
        /** Asynchronous load request from the Resources bundle.
        */
        class ResourceRequest extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get asset(): UnityEngine.Object;
            public constructor()
        }
        /** Asynchronous load request from an AssetBundle.
        */
        class AssetBundleRequest extends UnityEngine.ResourceRequest {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get asset(): UnityEngine.Object;
            /** Asset objects with sub assets being loaded. (Read Only)
            */
            public get allAssets(): System.Array$1<UnityEngine.Object>;
            public constructor()
        }
        /** Async unload operation for an AssetBundle.
        */
        class AssetBundleUnloadOperation extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** Synchronously waits for the operation to complete.
            */
            public WaitForCompletion(): void
            public constructor()
        }
        /** Asynchronous AssetBundle recompression from one compression method and level to another.
        */
        class AssetBundleRecompressOperation extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** A string describing the recompression operation result (Read Only).
            */
            public get humanReadableResult(): string;
            /** Path of the AssetBundle being recompressed (Read Only).
            */
            public get inputPath(): string;
            /** Path of the resulting recompressed AssetBundle (Read Only).
            */
            public get outputPath(): string;
            /** Result of the recompression operation.
            */
            public get result(): UnityEngine.AssetBundleLoadResult;
            /** True if the recompress operation is complete and was successful, otherwise false (Read Only).
            */
            public get success(): boolean;
            public constructor()
        }
        /** Contains information about compression methods, compression levels and block sizes that are supported by Asset Bundle compression at build time and recompression at runtime.
        */
        class BuildCompression extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Priority of a thread.
        */
        enum ThreadPriority { Low = 0, BelowNormal = 1, Normal = 2, High = 4 }
        /** Manifest for all the AssetBundles in the build.
        */
        class AssetBundleManifest extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Get all the AssetBundles in the manifest.
            * @returns An array of asset bundle names. 
            */
            public GetAllAssetBundles(): System.Array$1<string>
            /** Get all the AssetBundles with variant in the manifest.
            * @returns An array of asset bundle names. 
            */
            public GetAllAssetBundlesWithVariant(): System.Array$1<string>
            /** Get the hash for the given AssetBundle.
            * @param $assetBundleName Name of the asset bundle.
            * @returns The 128-bit hash for the asset bundle. 
            */
            public GetAssetBundleHash($assetBundleName: string): UnityEngine.Hash128
            /** Get the direct dependent AssetBundles for the given AssetBundle.
            * @param $assetBundleName Name of the asset bundle.
            * @returns Array of asset bundle names this asset bundle depends on. 
            */
            public GetDirectDependencies($assetBundleName: string): System.Array$1<string>
            /** Get all the dependent AssetBundles for the given AssetBundle.
            * @param $assetBundleName Name of the asset bundle.
            */
            public GetAllDependencies($assetBundleName: string): System.Array$1<string>
        }
        /** Represents  a 128-bit hash value.
        */
        class Hash128 extends System.ValueType implements System.IComparable, System.IComparable$1<UnityEngine.Hash128>, System.IEquatable$1<UnityEngine.Hash128> {
            protected [__keep_incompatibility]: never;
        }
        /** The result of an Asset Bundle Load or Recompress Operation.
        */
        enum AssetBundleLoadResult { Success = 0, Cancelled = 1, NotMatchingCrc = 2, FailedCache = 3, NotValidAssetBundle = 4, NoSerializedData = 5, NotCompatible = 6, AlreadyLoaded = 7, FailedRead = 8, FailedDecompression = 9, FailedWrite = 10, FailedDeleteRecompressionTarget = 11, RecompressionTargetIsLoaded = 12, RecompressionTargetExistsButNotArchive = 13 }
        /** Controls the global audio settings from script.
        */
        class AudioSettings extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns the speaker mode capability of the current audio driver. (Read Only)
            */
            public static get driverCapabilities(): UnityEngine.AudioSpeakerMode;
            /** AudioSettings.speakerMode is deprecated. Use AudioSettings.GetConfiguration and AudioSettings.Reset to adjust audio settings instead.
            */
            public static get speakerMode(): UnityEngine.AudioSpeakerMode;
            public static set speakerMode(value: UnityEngine.AudioSpeakerMode);
            /** Returns the current time of the audio system.
            */
            public static get dspTime(): number;
            /** Get the mixer's current output rate.
            */
            public static get outputSampleRate(): number;
            public static set outputSampleRate(value: number);
            /** Get the mixer's buffer size in samples.
            * @param $bufferLength Is the length of each buffer in the ring buffer.
            * @param $numBuffers Is number of buffers.
            */
            public static GetDSPBufferSize($bufferLength: $Ref<number>, $numBuffers: $Ref<number>): void
            /** Returns the name of the spatializer selected on the currently-running platform.
            * @returns The spatializer plugin name. 
            */
            public static GetSpatializerPluginName(): string
            /** Returns the current configuration of the audio device and system. The values in the struct may then be modified and reapplied via AudioSettings.Reset.
            * @returns The new configuration to be applied. 
            */
            public static GetConfiguration(): UnityEngine.AudioConfiguration
            /** Changes the device configuration and invokes the AudioSettings.OnAudioConfigurationChanged delegate with the argument deviceWasChanged=false. There's no guarantee that the exact settings specified are used, but Unity automatically uses the closest match that it supports. Note: This can cause main thread stalls if AudioSettings.Reset is called when objects are loading asynchronously. 
            * @param $config The new configuration to be used.
            * @returns True if all settings could be successfully applied. 
            */
            public static Reset($config: UnityEngine.AudioConfiguration): boolean
            public static add_OnAudioConfigurationChanged($value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler): void
            public static remove_OnAudioConfigurationChanged($value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler): void
            public constructor()
        }
        /** These are speaker types defined for use with AudioSettings.speakerMode.
        */
        enum AudioSpeakerMode { Raw = 0, Mono = 1, Stereo = 2, Quad = 3, Surround = 4, Mode5point1 = 5, Mode7point1 = 6, Prologic = 7 }
        /** Specifies the current properties or desired properties to be set for the audio system.
        */
        class AudioConfiguration extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The Audio Low Pass Filter passes low frequencies of an AudioSource or all sounds reaching an AudioListener, while removing frequencies higher than the Cutoff Frequency.
        */
        class AudioLowPassFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Returns or sets the current custom frequency cutoff curve.
            */
            public get customCutoffCurve(): UnityEngine.AnimationCurve;
            public set customCutoffCurve(value: UnityEngine.AnimationCurve);
            /** Lowpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.
            */
            public get cutoffFrequency(): number;
            public set cutoffFrequency(value: number);
            /** Determines how much the filter's self-resonance is dampened.
            */
            public get lowpassResonanceQ(): number;
            public set lowpassResonanceQ(value: number);
            public constructor()
        }
        /** The Audio High Pass Filter passes high frequencies of an AudioSource, and cuts off signals with frequencies lower than the Cutoff Frequency.
        */
        class AudioHighPassFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Highpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.
            */
            public get cutoffFrequency(): number;
            public set cutoffFrequency(value: number);
            /** Determines how much the filter's self-resonance isdampened.
            */
            public get highpassResonanceQ(): number;
            public set highpassResonanceQ(value: number);
            public constructor()
        }
        /** The Audio Reverb Filter takes an Audio Clip and distorts it to create a custom reverb effect.
        */
        class AudioReverbFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Set/Get reverb preset properties.
            */
            public get reverbPreset(): UnityEngine.AudioReverbPreset;
            public set reverbPreset(value: UnityEngine.AudioReverbPreset);
            /** Mix level of dry signal in output in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.
            */
            public get dryLevel(): number;
            public set dryLevel(value: number);
            /** Room effect level at low frequencies in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get room(): number;
            public set room(value: number);
            /** Room effect high-frequency level re. low frequency level in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get roomHF(): number;
            public set roomHF(value: number);
            /** Reverberation decay time at low-frequencies in seconds. Ranges from 0.1 to 20.0. Default is 1.0.
            */
            public get decayTime(): number;
            public set decayTime(value: number);
            /** Decay HF Ratio : High-frequency to low-frequency decay time ratio. Ranges from 0.1 to 2.0. Default is 0.5.
            */
            public get decayHFRatio(): number;
            public set decayHFRatio(value: number);
            /** Early reflections level relative to room effect in millibels (mB). Ranges from -10000.0 to 1000.0. Default is -10000.0.
            */
            public get reflectionsLevel(): number;
            public set reflectionsLevel(value: number);
            /** Late reverberation level relative to room effect in millibels (mB). Ranges from -10000.0 to 2000.0. Default is 0.0.
            */
            public get reflectionsDelay(): number;
            public set reflectionsDelay(value: number);
            /** Late reverberation level relative to room effect in millibels (mB). Ranges from -10000.0 to 2000.0. Default is 0.0.
            */
            public get reverbLevel(): number;
            public set reverbLevel(value: number);
            /** Late reverberation delay time relative to first reflection in seconds. Ranges from 0.0 to 0.1. Default is 0.04.
            */
            public get reverbDelay(): number;
            public set reverbDelay(value: number);
            /** Reverberation diffusion (echo density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.
            */
            public get diffusion(): number;
            public set diffusion(value: number);
            /** Reverberation density (modal density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.
            */
            public get density(): number;
            public set density(value: number);
            /** Reference high frequency in hertz (Hz). Ranges from 1000.0 to 20000.0. Default is 5000.0.
            */
            public get hfReference(): number;
            public set hfReference(value: number);
            /** Room effect low-frequency level in millibels (mB). Ranges from -10000.0 to 0.0. Default is 0.0.
            */
            public get roomLF(): number;
            public set roomLF(value: number);
            /** Reference low-frequency in hertz (Hz). Ranges from 20.0 to 1000.0. Default is 250.0.
            */
            public get lfReference(): number;
            public set lfReference(value: number);
            public constructor()
        }
        /** Reverb presets used by the Reverb Zone class and the audio reverb filter.
        */
        enum AudioReverbPreset { Off = 0, Generic = 1, PaddedCell = 2, Room = 3, Bathroom = 4, Livingroom = 5, Stoneroom = 6, Auditorium = 7, Concerthall = 8, Cave = 9, Arena = 10, Hangar = 11, CarpetedHallway = 12, Hallway = 13, StoneCorridor = 14, Alley = 15, Forest = 16, City = 17, Mountains = 18, Quarry = 19, Plain = 20, ParkingLot = 21, SewerPipe = 22, Underwater = 23, Drugged = 24, Dizzy = 25, Psychotic = 26, User = 27 }
        /** A container for audio data.
        */
        class AudioClip extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The length of the audio clip in seconds. (Read Only)
            */
            public get length(): number;
            /** The length of the audio clip in samples. (Read Only)
            */
            public get samples(): number;
            /** The number of channels in the audio clip. (Read Only)
            */
            public get channels(): number;
            /** The sample frequency of the clip in Hertz. (Read Only)
            */
            public get frequency(): number;
            /** The load type of the clip (read-only).
            */
            public get loadType(): UnityEngine.AudioClipLoadType;
            /** Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.
            */
            public get preloadAudioData(): boolean;
            /** Returns true if this audio clip is ambisonic (read-only).
            */
            public get ambisonic(): boolean;
            /** Corresponding to the "Load In Background" flag in the inspector, when this flag is set, the loading will happen delayed without blocking the main thread.
            */
            public get loadInBackground(): boolean;
            /** Returns the current load state of the audio data associated with an AudioClip.
            */
            public get loadState(): UnityEngine.AudioDataLoadState;
            /** Loads the audio data of a clip. Clips that have "Preload Audio Data" set will load the audio data automatically.
            * @returns Returns true if loading succeeded. 
            */
            public LoadAudioData(): boolean
            /** Unloads the audio data associated with the clip. This works only for AudioClips that are based on actual sound file assets.
            * @returns Returns false if unloading failed. 
            */
            public UnloadAudioData(): boolean
            /** Fills an array with sample data from the clip.
            */
            public GetData($data: System.Array$1<number>, $offsetSamples: number): boolean
            /** Set sample data in a clip.
            */
            public SetData($data: System.Array$1<number>, $offsetSamples: number): boolean
            /** Creates a user AudioClip with a name and with the given length in samples, channels and frequency.
            * @param $name Name of clip.
            * @param $lengthSamples Number of sample frames.
            * @param $channels Number of channels per frame.
            * @param $frequency Sample frequency of clip.
            * @param $_3D Audio clip is played back in 3D.
            * @param $stream True if clip is streamed, that is if the pcmreadercallback generates data on the fly.
            * @param $pcmreadercallback This callback is invoked to generate a block of sample data. Non-streamed clips call this only once at creation time while streamed clips call this continuously.
            * @param $pcmsetpositioncallback This callback is invoked whenever the clip loops or changes playback position.
            * @returns A reference to the created AudioClip. 
            */
            public static Create($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean): UnityEngine.AudioClip
            public static Create($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean, $pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback): UnityEngine.AudioClip
            public static Create($name: string, $lengthSamples: number, $channels: number, $frequency: number, $stream: boolean, $pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback, $pcmsetpositioncallback: UnityEngine.AudioClip.PCMSetPositionCallback): UnityEngine.AudioClip
        }
        /** Determines how the audio clip is loaded in.
        */
        enum AudioClipLoadType { DecompressOnLoad = 0, CompressedInMemory = 1, Streaming = 2 }
        /** Value describing the current load state of the audio data associated with an AudioClip.
        */
        enum AudioDataLoadState { Unloaded = 0, Loading = 1, Loaded = 2, Failed = 3 }
        class AudioBehaviour extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Representation of a listener in 3D space.
        */
        class AudioListener extends UnityEngine.AudioBehaviour {
            protected [__keep_incompatibility]: never;
            /** Controls the game sound volume (0.0 to 1.0).
            */
            public static get volume(): number;
            public static set volume(value: number);
            /** The paused state of the audio system.
            */
            public static get pause(): boolean;
            public static set pause(value: boolean);
            /** This lets you set whether the Audio Listener should be updated in the fixed or dynamic update.
            */
            public get velocityUpdateMode(): UnityEngine.AudioVelocityUpdateMode;
            public set velocityUpdateMode(value: UnityEngine.AudioVelocityUpdateMode);
            /** Provides a block of the listener (master)'s output data.
            * @param $samples The array to populate with audio samples. Its length must be a power of 2.
            * @param $channel The channel to sample from.
            */
            public static GetOutputData($samples: System.Array$1<number>, $channel: number): void
            /** Provides a block of the listener (master)'s spectrum data.
            * @param $samples The array to populate with audio samples. Its length must be a power of 2.
            * @param $channel The channel to sample from.
            * @param $window The FFTWindow type to use when sampling.
            */
            public static GetSpectrumData($samples: System.Array$1<number>, $channel: number, $window: UnityEngine.FFTWindow): void
            public constructor()
        }
        /** Describes when an AudioSource or AudioListener is updated.
        */
        enum AudioVelocityUpdateMode { Auto = 0, Fixed = 1, Dynamic = 2 }
        /** Spectrum analysis windowing types.
        */
        enum FFTWindow { Rectangular = 0, Triangle = 1, Hamming = 2, Hanning = 3, Blackman = 4, BlackmanHarris = 5 }
        /** Reverb Zones are used when you want to create location based ambient effects in the Scene.
        */
        class AudioReverbZone extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The distance from the centerpoint that the reverb will have full effect at. Default = 10.0.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** The distance from the centerpoint that the reverb will not have any effect. Default = 15.0.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** Set/Get reverb preset properties.
            */
            public get reverbPreset(): UnityEngine.AudioReverbPreset;
            public set reverbPreset(value: UnityEngine.AudioReverbPreset);
            /** Room effect level (at mid frequencies).
            */
            public get room(): number;
            public set room(value: number);
            /** Relative room effect level at high frequencies.
            */
            public get roomHF(): number;
            public set roomHF(value: number);
            /** Relative room effect level at low frequencies.
            */
            public get roomLF(): number;
            public set roomLF(value: number);
            /** Reverberation decay time at mid frequencies.
            */
            public get decayTime(): number;
            public set decayTime(value: number);
            /** High-frequency to mid-frequency decay time ratio.
            */
            public get decayHFRatio(): number;
            public set decayHFRatio(value: number);
            /** Early reflections level relative to room effect.
            */
            public get reflections(): number;
            public set reflections(value: number);
            /** Initial reflection delay time.
            */
            public get reflectionsDelay(): number;
            public set reflectionsDelay(value: number);
            /** Late reverberation level relative to room effect.
            */
            public get reverb(): number;
            public set reverb(value: number);
            /** Late reverberation delay time relative to initial reflection.
            */
            public get reverbDelay(): number;
            public set reverbDelay(value: number);
            /** Reference high frequency (hz).
            */
            public get HFReference(): number;
            public set HFReference(value: number);
            /** Reference low frequency (hz).
            */
            public get LFReference(): number;
            public set LFReference(value: number);
            /** Value that controls the echo density in the late reverberation decay.
            */
            public get diffusion(): number;
            public set diffusion(value: number);
            /** Value that controls the modal density in the late reverberation decay.
            */
            public get density(): number;
            public set density(value: number);
            public constructor()
        }
        /** The Audio Distortion Filter distorts the sound from an AudioSource or sounds reaching the AudioListener.
        */
        class AudioDistortionFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Distortion value. 0.0 to 1.0. Default = 0.5.
            */
            public get distortionLevel(): number;
            public set distortionLevel(value: number);
            public constructor()
        }
        /** The Audio Echo Filter repeats a sound after a given Delay, attenuating the repetitions based on the Decay Ratio.
        */
        class AudioEchoFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Echo delay in ms. 10 to 5000. Default = 500.
            */
            public get delay(): number;
            public set delay(value: number);
            /** Echo decay per delay. 0 to 1. 1.0 = No decay, 0.0 = total decay (i.e. simple 1 line delay). Default = 0.5.
            */
            public get decayRatio(): number;
            public set decayRatio(value: number);
            /** Volume of original signal to pass to output. 0.0 to 1.0. Default = 1.0.
            */
            public get dryMix(): number;
            public set dryMix(value: number);
            /** Volume of echo signal to pass to output. 0.0 to 1.0. Default = 1.0.
            */
            public get wetMix(): number;
            public set wetMix(value: number);
            public constructor()
        }
        /** The Audio Chorus Filter takes an Audio Clip and processes it creating a chorus effect.
        */
        class AudioChorusFilter extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Volume of original signal to pass to output. 0.0 to 1.0. Default = 0.5.
            */
            public get dryMix(): number;
            public set dryMix(value: number);
            /** Volume of 1st chorus tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix1(): number;
            public set wetMix1(value: number);
            /** Volume of 2nd chorus tap. This tap is 90 degrees out of phase of the first tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix2(): number;
            public set wetMix2(value: number);
            /** Volume of 3rd chorus tap. This tap is 90 degrees out of phase of the second tap. 0.0 to 1.0. Default = 0.5.
            */
            public get wetMix3(): number;
            public set wetMix3(value: number);
            /** Chorus delay in ms. 0.1 to 100.0. Default = 40.0 ms.
            */
            public get delay(): number;
            public set delay(value: number);
            /** Chorus modulation rate in hz. 0.0 to 20.0. Default = 0.8 hz.
            */
            public get rate(): number;
            public set rate(value: number);
            /** Chorus modulation depth. 0.0 to 1.0. Default = 0.03.
            */
            public get depth(): number;
            public set depth(value: number);
            public constructor()
        }
        /** Use this class to record to an AudioClip using a connected microphone.
        */
        class Microphone extends System.Object {
            protected [__keep_incompatibility]: never;
            /** A list of available microphone devices, identified by name.
            */
            public static get devices(): System.Array$1<string>;
            /** Start Recording with device.
            * @param $deviceName The name of the device.
            * @param $loop Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.
            * @param $lengthSec Is the length of the AudioClip produced by the recording.
            * @param $frequency The sample rate of the AudioClip produced by the recording.
            * @returns The function returns null if the recording fails to start. 
            */
            public static Start($deviceName: string, $loop: boolean, $lengthSec: number, $frequency: number): UnityEngine.AudioClip
            /** Stops recording.
            * @param $deviceName The name of the device.
            */
            public static End($deviceName: string): void
            /** Query if a device is currently recording.
            * @param $deviceName The name of the device.
            */
            public static IsRecording($deviceName: string): boolean
            /** Get the position in samples of the recording.
            * @param $deviceName The name of the device.
            */
            public static GetPosition($deviceName: string): number
            /** Get the frequency capabilities of a device.
            * @param $deviceName The name of the device.
            * @param $minFreq Returns the minimum sampling frequency of the device.
            * @param $maxFreq Returns the maximum sampling frequency of the device.
            */
            public static GetDeviceCaps($deviceName: string, $minFreq: $Ref<number>, $maxFreq: $Ref<number>): void
            public constructor()
        }
        /** Allow recording the main output of the game or specific groups in the AudioMixer.
        */
        class AudioRenderer extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Enters audio recording mode. After this Unity will output silence until AudioRenderer.Stop is called.
            * @returns True if the engine was switched into output recording mode. False if it is already recording. 
            */
            public static Start(): boolean
            /** Exits audio recording mode. After this audio output will be audible again.
            * @returns True if the engine was recording when this function was called. 
            */
            public static Stop(): boolean
            /** Returns the number of samples available since the last time AudioRenderer.Render was called. This is dependent on the frame capture rate.
            * @returns Number of samples available since last recorded frame. 
            */
            public static GetSampleCountForCaptureFrame(): number
            public static Render($buffer: Unity.Collections.NativeArray$1<number>): boolean
            public constructor()
        }
        /** Base class for Texture handling.
        */
        class Texture extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Can be used with Texture constructors that take a mip count to indicate that all mips should be generated.  The value of this field is -1.
            */
            public static GenerateAllMips: number
            /** How many mipmap levels are in this Texture (Read Only).
            */
            public get mipmapCount(): number;
            public static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
            public static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
            /** Returns the GraphicsFormat format or color format of a Texture object.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Width of the Texture in pixels (Read Only).
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the Texture in pixels (Read Only).
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the Texture (Read Only).
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** Whether Unity stores an additional copy of this texture's pixel data in CPU-addressable memory.
            */
            public get isReadable(): boolean;
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Filtering mode of the Texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Defines the anisotropic filtering level of the Texture.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** The mipmap bias of the Texture.
            */
            public get mipMapBias(): number;
            public set mipMapBias(value: number);
            public get texelSize(): UnityEngine.Vector2;
            /** This counter is incremented when the Texture is updated.
            */
            public get updateCount(): number;
            /** Returns true if the texture pixel data is in sRGB color space (Read Only).
            */
            public get isDataSRGB(): boolean;
            /** The total amount of Texture memory that Unity would use if it loads all Textures at mipmap level 0. 
            This is a theoretical value that does not take into account any input from the streaming system or any other input, for example when you set the`Texture2D.requestedMipmapLevel` manually. 
            To see a Texture memory value that takes inputs into account, use `desiredTextureMemory`. 
            `totalTextureMemory` only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get totalTextureMemory(): bigint;
            /** The total size of the Textures, in bytes, that Unity loads if there were no other constraints. Before Unity loads any Textures, it applies the which reduces the loaded Texture resolution if the Texture sizes exceed its value. The desiredTextureMemory value takes into account the mipmap levels that Unity has requested or that you have set manually.
            For example, if Unity does not load a Texture at full resolution because it is far away or its requested mipmap level is greater than 0,  Unity reduces the desiredTextureMemory value to match the total memory needed.
            The desiredTextureMemory value can be greater than the Texture.targetTextureMemory value.
            */
            public static get desiredTextureMemory(): bigint;
            /** The total amount of Texture memory that Unity allocates to the Textures in the scene after it applies the and finishes loading Textures. `targetTextureMemory`also takes mipmap streaming settings into account. This value only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get targetTextureMemory(): bigint;
            /** The amount of memory that all Textures in the scene use.
            */
            public static get currentTextureMemory(): bigint;
            /** The amount of memory Unity allocates for non-streaming Textures in the scene. This only includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get nonStreamingTextureMemory(): bigint;
            /** How many times has a Texture been uploaded due to Texture mipmap streaming.
            */
            public static get streamingMipmapUploadCount(): bigint;
            /** Number of renderers registered with the Texture streaming system.
            */
            public static get streamingRendererCount(): bigint;
            /** Number of streaming Textures.
            */
            public static get streamingTextureCount(): bigint;
            /** The number of non-streaming Textures in the scene. This includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get nonStreamingTextureCount(): bigint;
            /** Number of streaming Textures with outstanding mipmaps to be loaded.
            */
            public static get streamingTexturePendingLoadCount(): bigint;
            /** Number of streaming Textures with mipmaps currently loading.
            */
            public static get streamingTextureLoadingCount(): bigint;
            /** Force streaming Textures to load all mipmap levels.
            */
            public static get streamingTextureForceLoadAll(): boolean;
            public static set streamingTextureForceLoadAll(value: boolean);
            /** This property forces the streaming Texture system to discard all unused mipmaps instead of caching them until the Texture is exceeded. This is useful when you profile or write tests to keep a predictable set of Textures in memory.
            */
            public static get streamingTextureDiscardUnusedMips(): boolean;
            public static set streamingTextureDiscardUnusedMips(value: boolean);
            /** Allow Unity internals to perform Texture creation on any thread (rather than the dedicated render thread).
            */
            public static get allowThreadedTextureCreation(): boolean;
            public static set allowThreadedTextureCreation(value: boolean);
            /** Sets Anisotropic limits.
            */
            public static SetGlobalAnisotropicFilteringLimits($forcedMin: number, $globalMax: number): void
            /** Retrieve a native (underlying graphics API) pointer to the Texture resource.
            * @returns Pointer to an underlying graphics API Texture resource. 
            */
            public GetNativeTexturePtr(): System.IntPtr
            /** Increment the update counter.
            */
            public IncrementUpdateCount(): void
            /** This function sets mipmap streaming debug properties on any materials that use this Texture through the mipmap streaming system.
            */
            public static SetStreamingTextureMaterialDebugProperties(): void
        }
        /** WebCam Textures are textures onto which the live video input is rendered.
        */
        class WebCamTexture extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** Return a list of available devices.
            */
            public static get devices(): System.Array$1<UnityEngine.WebCamDevice>;
            /** Returns if the camera is currently playing.
            */
            public get isPlaying(): boolean;
            /** Set this to specify the name of the device to use.
            */
            public get deviceName(): string;
            public set deviceName(value: string);
            /** Set the requested frame rate of the camera device (in frames per second).
            */
            public get requestedFPS(): number;
            public set requestedFPS(value: number);
            /** Set the requested width of the camera device.
            */
            public get requestedWidth(): number;
            public set requestedWidth(value: number);
            /** Set the requested height of the camera device.
            */
            public get requestedHeight(): number;
            public set requestedHeight(value: number);
            /** Returns an clockwise angle (in degrees), which can be used to rotate a polygon so camera contents are shown in correct orientation.
            */
            public get videoRotationAngle(): number;
            /** Returns if the texture image is vertically flipped.
            */
            public get videoVerticallyMirrored(): boolean;
            /** Did the video buffer update this frame?
            */
            public get didUpdateThisFrame(): boolean;
            /** This property allows you to set/get the auto focus point of the camera. This works only on Android and iOS devices.
            */
            public get autoFocusPoint(): UnityEngine.Vector2 | null;
            public set autoFocusPoint(value: UnityEngine.Vector2 | null);
            /** This property is true if the texture is based on depth data.
            */
            public get isDepth(): boolean;
            /** Starts the camera.
            */
            public Play(): void
            /** Pauses the camera.
            */
            public Pause(): void
            /** Stops the camera.
            */
            public Stop(): void
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
            * @returns The pixel color. 
            */
            public GetPixel($x: number, $y: number): UnityEngine.Color
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels(): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for part of the texture as Color structs.
            * @param $x The starting x position of the section to fetch.
            * @param $y The starting y position of the section to fetch.
            * @param $blockWidth The width of the section to fetch.
            * @param $blockHeight The height of the section to fetch.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($x: number, $y: number, $blockWidth: number, $blockHeight: number): System.Array$1<UnityEngine.Color>
            public GetPixels32(): System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $colors An optional array to write the pixel data to.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($colors: System.Array$1<UnityEngine.Color32>): System.Array$1<UnityEngine.Color32>
            public constructor($deviceName: string, $requestedWidth: number, $requestedHeight: number, $requestedFPS: number)
            public constructor($deviceName: string, $requestedWidth: number, $requestedHeight: number)
            public constructor($deviceName: string)
            public constructor($requestedWidth: number, $requestedHeight: number, $requestedFPS: number)
            public constructor($requestedWidth: number, $requestedHeight: number)
            public constructor()
        }
        /** A structure describing the webcam device.
        */
        class WebCamDevice extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Representation of RGBA colors in 32 bit format.
        */
        class Color32 extends System.ValueType implements System.IFormattable {
            protected [__keep_incompatibility]: never;
        }
        /** Representation of 2D vectors and points.
        */
        class Vector2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector2> {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public x: number
            /** Y component of the vector.
            */
            public y: number
            public static kEpsilon: number
            public static kEpsilonNormalSqrt: number
            /** Returns a normalized vector based on the current vector. The normalized vector has a magnitude of 1 and is in the same direction as the current vector. Returns a zero vector If the current vector is too small to be normalized.
            */
            public get normalized(): UnityEngine.Vector2;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector2(0, 0).
            */
            public static get zero(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 1).
            */
            public static get one(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, 1).
            */
            public static get up(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, -1).
            */
            public static get down(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(-1, 0).
            */
            public static get left(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 0).
            */
            public static get right(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector2;
            public get_Item($index: number): number
            public set_Item($index: number, $value: number): void
            /** Set x and y components of an existing Vector2.
            */
            public Set($newX: number, $newY: number): void
            /** Linearly interpolates between vectors a and b by t.
            */
            public static Lerp($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number): UnityEngine.Vector2
            /** Linearly interpolates between vectors a and b by t.
            */
            public static LerpUnclamped($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number): UnityEngine.Vector2
            /** Moves a point current towards target.
            */
            public static MoveTowards($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $maxDistanceDelta: number): UnityEngine.Vector2
            /** Multiplies two vectors component-wise.
            */
            public static Scale($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): UnityEngine.Vector2
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale($scale: UnityEngine.Vector2): void
            /** Makes this vector have a magnitude of 1.
            */
            public Normalize(): void
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString(): string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string): string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string, $formatProvider: System.IFormatProvider): string
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals($other: any): boolean
            public Equals($other: UnityEngine.Vector2): boolean
            /** Reflects a vector off the surface defined by a normal.
            * @param $inDirection The direction vector towards the surface.
            * @param $inNormal The normal vector that defines the surface.
            */
            public static Reflect($inDirection: UnityEngine.Vector2, $inNormal: UnityEngine.Vector2): UnityEngine.Vector2
            /** Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            * @param $inDirection The input direction.
            * @returns The perpendicular direction. 
            */
            public static Perpendicular($inDirection: UnityEngine.Vector2): UnityEngine.Vector2
            /** Dot Product of two vectors.
            */
            public static Dot($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2): number
            /** Gets the unsigned angle in degrees between from and to.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The unsigned angle in degrees between the two vectors. 
            */
            public static Angle($from: UnityEngine.Vector2, $to: UnityEngine.Vector2): number
            /** Gets the signed angle in degrees between from and to.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The signed angle in degrees between the two vectors. 
            */
            public static SignedAngle($from: UnityEngine.Vector2, $to: UnityEngine.Vector2): number
            /** Returns the distance between a and b.
            */
            public static Distance($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude($vector: UnityEngine.Vector2, $maxLength: number): UnityEngine.Vector2
            public static SqrMagnitude($a: UnityEngine.Vector2): number
            public SqrMagnitude(): number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2): UnityEngine.Vector2
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2): UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number): UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number): UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number, $deltaTime: number): UnityEngine.Vector2
            public static op_Addition($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_Subtraction($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_Multiply($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_Division($a: UnityEngine.Vector2, $b: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_UnaryNegation($a: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_Multiply($a: UnityEngine.Vector2, $d: number): UnityEngine.Vector2
            public static op_Multiply($d: number, $a: UnityEngine.Vector2): UnityEngine.Vector2
            public static op_Division($a: UnityEngine.Vector2, $d: number): UnityEngine.Vector2
            public static op_Equality($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2): boolean
            public static op_Inequality($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2): boolean
            public static op_Implicit($v: UnityEngine.Vector3): UnityEngine.Vector2
            public static op_Implicit($v: UnityEngine.Vector2): UnityEngine.Vector3
            public constructor($x: number, $y: number)
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
            public constructor()
        }
        /** The Cloth class provides an interface to cloth simulation physics.
        */
        class Cloth extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The current vertex positions of the cloth object.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector3>;
            /** The current normals of the cloth object.
            */
            public get normals(): System.Array$1<UnityEngine.Vector3>;
            /** The cloth skinning coefficients used to set up how the cloth interacts with the skinned mesh.
            */
            public get coefficients(): System.Array$1<UnityEngine.ClothSkinningCoefficient>;
            public set coefficients(value: System.Array$1<UnityEngine.ClothSkinningCoefficient>);
            /** An array of CapsuleColliders which this Cloth instance should collide with.
            */
            public get capsuleColliders(): System.Array$1<UnityEngine.CapsuleCollider>;
            public set capsuleColliders(value: System.Array$1<UnityEngine.CapsuleCollider>);
            /** An array of ClothSphereColliderPairs which this Cloth instance should collide with.
            */
            public get sphereColliders(): System.Array$1<UnityEngine.ClothSphereColliderPair>;
            public set sphereColliders(value: System.Array$1<UnityEngine.ClothSphereColliderPair>);
            /** Cloth's sleep threshold.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** Bending stiffness of the cloth.
            */
            public get bendingStiffness(): number;
            public set bendingStiffness(value: number);
            /** Stretching stiffness of the cloth.
            */
            public get stretchingStiffness(): number;
            public set stretchingStiffness(value: number);
            /** Damp cloth motion.
            */
            public get damping(): number;
            public set damping(value: number);
            /** A constant, external acceleration applied to the cloth.
            */
            public get externalAcceleration(): UnityEngine.Vector3;
            public set externalAcceleration(value: UnityEngine.Vector3);
            /** A random, external acceleration applied to the cloth.
            */
            public get randomAcceleration(): UnityEngine.Vector3;
            public set randomAcceleration(value: UnityEngine.Vector3);
            /** Should gravity affect the cloth simulation?
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Is this cloth enabled?
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The friction of the cloth when colliding with the character.
            */
            public get friction(): number;
            public set friction(value: number);
            /** How much to increase mass of colliding particles.
            */
            public get collisionMassScale(): number;
            public set collisionMassScale(value: number);
            /** Enable continuous collision to improve collision stability.
            */
            public get enableContinuousCollision(): boolean;
            public set enableContinuousCollision(value: boolean);
            /** Add one virtual particle per triangle to improve collision stability.
            */
            public get useVirtualParticles(): number;
            public set useVirtualParticles(value: number);
            /** How much world-space movement of the character will affect cloth vertices.
            */
            public get worldVelocityScale(): number;
            public set worldVelocityScale(value: number);
            /** How much world-space acceleration of the character will affect cloth vertices.
            */
            public get worldAccelerationScale(): number;
            public set worldAccelerationScale(value: number);
            /** Number of cloth solver iterations per second.
            */
            public get clothSolverFrequency(): number;
            public set clothSolverFrequency(value: number);
            /** Use Tether Anchors.
            */
            public get useTethers(): boolean;
            public set useTethers(value: boolean);
            /** Sets the stiffness frequency parameter.
            */
            public get stiffnessFrequency(): number;
            public set stiffnessFrequency(value: number);
            /** Minimum distance at which two cloth particles repel each other (default: 0.0).
            */
            public get selfCollisionDistance(): number;
            public set selfCollisionDistance(value: number);
            /** Self-collision stiffness defines how strong the separating impulse should be for colliding particles.
            */
            public get selfCollisionStiffness(): number;
            public set selfCollisionStiffness(value: number);
            /** Clear the pending transform changes from affecting the cloth simulation.
            */
            public ClearTransformMotion(): void
            public GetSelfAndInterCollisionIndices($indices: System.Collections.Generic.List$1<number>): void
            public SetSelfAndInterCollisionIndices($indices: System.Collections.Generic.List$1<number>): void
            public GetVirtualParticleIndices($indicesOutList: System.Collections.Generic.List$1<number>): void
            public SetVirtualParticleIndices($indicesIn: System.Collections.Generic.List$1<number>): void
            public GetVirtualParticleWeights($weightsOutList: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetVirtualParticleWeights($weights: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            /** Fade the cloth simulation in or out.
            * @param $enabled Fading enabled or not.
            */
            public SetEnabledFading($enabled: boolean, $interpolationTime: number): void
            public SetEnabledFading($enabled: boolean): void
            public constructor()
        }
        /** The ClothSkinningCoefficient struct is used to set up how a Cloth component is allowed to move with respect to the SkinnedMeshRenderer it is attached to.
        */
        class ClothSkinningCoefficient extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A capsule-shaped primitive collider.
        */
        class CapsuleCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The center of the capsule, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere, measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the capsule measured in the object's local space.
            */
            public get height(): number;
            public set height(value: number);
            /** The direction of the capsule.
            */
            public get direction(): number;
            public set direction(value: number);
            public constructor()
        }
        /** A base class of all colliders.
        */
        class Collider extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Enabled Colliders will collide with other Colliders, disabled Colliders won't.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The rigidbody the collider is attached to.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody;
            /** The articulation body the collider is attached to.
            */
            public get attachedArticulationBody(): UnityEngine.ArticulationBody;
            /** Specify if this collider is configured as a trigger.
            */
            public get isTrigger(): boolean;
            public set isTrigger(value: boolean);
            /** Contact offset value of this collider.
            */
            public get contactOffset(): number;
            public set contactOffset(value: number);
            /** The world space bounding volume of the collider (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Specify whether this Collider's contacts are modifiable or not.
            */
            public get hasModifiableContacts(): boolean;
            public set hasModifiableContacts(value: boolean);
            /** Whether or not this Collider generates contacts for Physics.ContactEvent.
            */
            public get providesContacts(): boolean;
            public set providesContacts(value: boolean);
            /** A decision priority assigned to this Collider used when there is a conflicting decision on whether a Collider can contact another Collider.
            */
            public get layerOverridePriority(): number;
            public set layerOverridePriority(value: number);
            /** The additional layers that this Collider should exclude when deciding if the Collider can contact another Collider.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional layers that this Collider should include when deciding if the Collider can contact another Collider.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** The shared physic material of this collider.
            */
            public get sharedMaterial(): UnityEngine.PhysicMaterial;
            public set sharedMaterial(value: UnityEngine.PhysicMaterial);
            /** The material used by the collider.
            */
            public get material(): UnityEngine.PhysicMaterial;
            public set material(value: UnityEngine.PhysicMaterial);
            /** Returns a point on the collider that is closest to a given location.
            * @param $position Location you want to find the closest point to.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public ClosestPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Casts a Ray that ignores all Colliders except this one.
            * @param $ray The starting point and direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit.
            * @param $maxDistance The max length of the ray.
            * @returns True when the ray intersects the collider, otherwise false. 
            */
            public Raycast($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            /** The closest point to the bounding box of the attached collider.
            */
            public ClosestPointOnBounds($position: UnityEngine.Vector3): UnityEngine.Vector3
            public constructor()
        }
        /** A pair of SphereColliders used to define shapes for Cloth objects to collide against.
        */
        class ClothSphereColliderPair extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** SortingLayer allows you to set the render order of multiple sprites easily. There is always a default SortingLayer named "Default" which all sprites are added to initially. Added more SortingLayers to easily control the order of rendering of groups of sprites. Layers can be ordered before or after the default layer.
        */
        class SortingLayer extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A single keyframe that can be injected into an animation curve.
        */
        class Keyframe extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Provides access to application runtime data.
        */
        class Application extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns true when called in any kind of built Player, or when called in the Editor in Play mode (Read Only).
            */
            public static get isPlaying(): boolean;
            /** Whether the Player currently has focus (Read-only).
            */
            public static get isFocused(): boolean;
            /** Returns a GUID for this build (Read Only).
            */
            public static get buildGUID(): string;
            /** Determines whether the Player should run when the application is in the background
            */
            public static get runInBackground(): boolean;
            public static set runInBackground(value: boolean);
            /** Returns true when Unity is launched with the -batchmode flag from the command line (Read Only).
            */
            public static get isBatchMode(): boolean;
            /** Contains the path to the game data folder on the target device (Read Only).
            */
            public static get dataPath(): string;
            /** The path to the StreamingAssets  folder (Read Only).
            */
            public static get streamingAssetsPath(): string;
            /** Contains the path to a persistent data directory (Read-only).
            */
            public static get persistentDataPath(): string;
            /** Contains the path to a temporary data / cache directory (Read Only).
            */
            public static get temporaryCachePath(): string;
            /** The URL of the document. For WebGL, this is a web URL. For Android, iOS, or Universal Windows Platform (UWP) this is a deep link URL (Read Only).
            */
            public static get absoluteURL(): string;
            /** The version of the Unity runtime used to play the content.
            */
            public static get unityVersion(): string;
            /** Returns application version number (Read Only).
            */
            public static get version(): string;
            /** Returns the name of the store or package that installed the application (Read Only).
            */
            public static get installerName(): string;
            /** Returns the application identifier at runtime. 
            */
            public static get identifier(): string;
            /** Returns application install mode (Read Only).
            */
            public static get installMode(): UnityEngine.ApplicationInstallMode;
            /** Returns application running in a sandbox environment (Read-only).
            */
            public static get sandboxType(): UnityEngine.ApplicationSandboxType;
            /** Returns application product name (Read Only).
            */
            public static get productName(): string;
            /** Returns application company name (Read Only).
            */
            public static get companyName(): string;
            /** A unique cloud project identifier. It is unique for every project (Read Only).
            */
            public static get cloudProjectId(): string;
            /** Specifies the target frame rate at which Unity tries to render your game.
            */
            public static get targetFrameRate(): number;
            public static set targetFrameRate(value: number);
            /** Returns the path to the console log file, or an empty string if the current platform does not support log files.
            */
            public static get consoleLogPath(): string;
            /** Priority of background loading thread.
            */
            public static get backgroundLoadingPriority(): UnityEngine.ThreadPriority;
            public static set backgroundLoadingPriority(value: UnityEngine.ThreadPriority);
            /** Returns false if application is altered in any way after it was built.
            */
            public static get genuine(): boolean;
            /** Returns true if application integrity can be confirmed.
            */
            public static get genuineCheckAvailable(): boolean;
            /** Returns the platform the game is running on (Read Only).
            */
            public static get platform(): UnityEngine.RuntimePlatform;
            /** Identifies whether the current Runtime platform is a known mobile platform.
            */
            public static get isMobilePlatform(): boolean;
            /** Is the current Runtime platform a known console platform.
            */
            public static get isConsolePlatform(): boolean;
            /** The language in which the user's operating system is running in.
            */
            public static get systemLanguage(): UnityEngine.SystemLanguage;
            /** Returns the type of internet reachability currently possible on the device.
            */
            public static get internetReachability(): UnityEngine.NetworkReachability;
            /** Cancellation token raised on exiting Play mode (Editor) or on quitting the application (Read Only).
            */
            public static get exitCancellationToken(): System.Threading.CancellationToken;
            /** Whether the game is running inside the Unity Editor (Read Only).
            */
            public static get isEditor(): boolean;
            public static Quit($exitCode: number): void
            /** Quits the player application.
            * @param $exitCode An optional exit code to return when the player application terminates on Windows, Mac and Linux. Defaults to 0.
            */
            public static Quit(): void
            /** Unloads the Unity Player.
            */
            public static Unload(): void
            /** Checks if the streamed level can be loaded.
            */
            public static CanStreamedLevelBeLoaded($levelIndex: number): boolean
            /** Checks if the streamed level can be loaded.
            */
            public static CanStreamedLevelBeLoaded($levelName: string): boolean
            /** Returns true if the given object is part of the playing world either in any kind of built Player or in Play Mode.
            * @param $obj The object to test.
            * @returns True if the object is part of the playing world. 
            */
            public static IsPlaying($obj: UnityEngine.Object): boolean
            /** Is Unity activated with the Pro license?
            */
            public static HasProLicense(): boolean
            public static RequestAdvertisingIdentifierAsync($delegateMethod: UnityEngine.Application.AdvertisingIdentifierCallback): boolean
            /** Opens the URL specified, subject to the permissions and limitations of your app’s current platform and environment. 
            * @param $url The URL to open.
            */
            public static OpenURL($url: string): void
            /** Get stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static GetStackTraceLogType($logType: UnityEngine.LogType): UnityEngine.StackTraceLogType
            /** Set stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static SetStackTraceLogType($logType: UnityEngine.LogType, $stackTraceType: UnityEngine.StackTraceLogType): void
            /** Request authorization to use the webcam or microphone on iOS and WebGL.
            */
            public static RequestUserAuthorization($mode: UnityEngine.UserAuthorization): UnityEngine.AsyncOperation
            /** Check if the user has authorized use of the webcam or microphone on iOS and WebGL.
            */
            public static HasUserAuthorization($mode: UnityEngine.UserAuthorization): boolean
            public static add_lowMemory($value: UnityEngine.Application.LowMemoryCallback): void
            public static remove_lowMemory($value: UnityEngine.Application.LowMemoryCallback): void
            public static add_memoryUsageChanged($value: UnityEngine.Application.MemoryUsageChangedCallback): void
            public static remove_memoryUsageChanged($value: UnityEngine.Application.MemoryUsageChangedCallback): void
            public static add_logMessageReceived($value: UnityEngine.Application.LogCallback): void
            public static remove_logMessageReceived($value: UnityEngine.Application.LogCallback): void
            public static add_logMessageReceivedThreaded($value: UnityEngine.Application.LogCallback): void
            public static remove_logMessageReceivedThreaded($value: UnityEngine.Application.LogCallback): void
            public static add_onBeforeRender($value: UnityEngine.Events.UnityAction): void
            public static remove_onBeforeRender($value: UnityEngine.Events.UnityAction): void
            public static add_focusChanged($value: System.Action$1<boolean>): void
            public static remove_focusChanged($value: System.Action$1<boolean>): void
            public static add_deepLinkActivated($value: System.Action$1<string>): void
            public static remove_deepLinkActivated($value: System.Action$1<string>): void
            public static add_wantsToQuit($value: System.Func$1<boolean>): void
            public static remove_wantsToQuit($value: System.Func$1<boolean>): void
            public static add_quitting($value: System.Action): void
            public static remove_quitting($value: System.Action): void
            public static add_unloading($value: System.Action): void
            public static remove_unloading($value: System.Action): void
            public constructor()
        }
        /** Application installation mode (Read Only).
        */
        enum ApplicationInstallMode { Unknown = 0, Store = 1, DeveloperBuild = 2, Adhoc = 3, Enterprise = 4, Editor = 5 }
        /** Application sandbox type.
        */
        enum ApplicationSandboxType { Unknown = 0, NotSandboxed = 1, Sandboxed = 2, SandboxBroken = 3 }
        /** Stack trace logging options.
        */
        enum StackTraceLogType { None = 0, ScriptOnly = 1, Full = 2 }
        /** The type of the log message in Debug.unityLogger.Log or delegate registered with Application.RegisterLogCallback.
        */
        enum LogType { Error = 0, Assert = 1, Warning = 2, Log = 3, Exception = 4 }
        /** Constants to pass to Application.RequestUserAuthorization.
        */
        enum UserAuthorization { WebCam = 1, Microphone = 2 }
        /** The platform application is running. Returned by Application.platform.
        */
        enum RuntimePlatform { OSXEditor = 0, OSXPlayer = 1, WindowsPlayer = 2, OSXWebPlayer = 3, OSXDashboardPlayer = 4, WindowsWebPlayer = 5, WindowsEditor = 7, IPhonePlayer = 8, XBOX360 = 10, PS3 = 9, Android = 11, NaCl = 12, FlashPlayer = 15, LinuxPlayer = 13, LinuxEditor = 16, WebGLPlayer = 17, MetroPlayerX86 = 18, WSAPlayerX86 = 18, MetroPlayerX64 = 19, WSAPlayerX64 = 19, MetroPlayerARM = 20, WSAPlayerARM = 20, WP8Player = 21, BB10Player = 22, BlackBerryPlayer = 22, TizenPlayer = 23, PSP2 = 24, PS4 = 25, PSM = 26, XboxOne = 27, SamsungTVPlayer = 28, WiiU = 30, tvOS = 31, Switch = 32, Lumin = 33, Stadia = 34, CloudRendering = 35, GameCoreScarlett = -1, GameCoreXboxSeries = 36, GameCoreXboxOne = 37, PS5 = 38, EmbeddedLinuxArm64 = 39, EmbeddedLinuxArm32 = 40, EmbeddedLinuxX64 = 41, EmbeddedLinuxX86 = 42, LinuxServer = 43, WindowsServer = 44, OSXServer = 45, QNXArm32 = 46, QNXArm64 = 47, QNXX64 = 48, QNXX86 = 49, VisionOS = 50 }
        /** The language the user's operating system is running in. Returned by Application.systemLanguage.
        */
        enum SystemLanguage { Afrikaans = 0, Arabic = 1, Basque = 2, Belarusian = 3, Bulgarian = 4, Catalan = 5, Chinese = 6, Czech = 7, Danish = 8, Dutch = 9, English = 10, Estonian = 11, Faroese = 12, Finnish = 13, French = 14, German = 15, Greek = 16, Hebrew = 17, Hugarian = 18, Icelandic = 19, Indonesian = 20, Italian = 21, Japanese = 22, Korean = 23, Latvian = 24, Lithuanian = 25, Norwegian = 26, Polish = 27, Portuguese = 28, Romanian = 29, Russian = 30, SerboCroatian = 31, Slovak = 32, Slovenian = 33, Spanish = 34, Swedish = 35, Thai = 36, Turkish = 37, Ukrainian = 38, Vietnamese = 39, ChineseSimplified = 40, ChineseTraditional = 41, Hindi = 42, Unknown = 43, Hungarian = 18 }
        /** Describes network reachability options.
        */
        enum NetworkReachability { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaLocalAreaNetwork = 2 }
        /** Contains information about a change in the application's memory usage.
        */
        class ApplicationMemoryUsageChange extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A Camera is a device through which the player views the world.
        */
        class Camera extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The minimum allowed aperture.
            */
            public static kMinAperture: number
            /** The maximum allowed aperture.
            */
            public static kMaxAperture: number
            /** The minimum blade count for the aperture diaphragm.
            */
            public static kMinBladeCount: number
            /** The maximum blade count for the aperture diaphragm.
            */
            public static kMaxBladeCount: number
            /** Delegate that you can use to execute custom code before a Camera culls the scene.
            */
            public static onPreCull: UnityEngine.Camera.CameraCallback
            /** Delegate that you can use to execute custom code before a Camera renders the scene.
            */
            public static onPreRender: UnityEngine.Camera.CameraCallback
            /** Delegate that you can use to execute custom code after a Camera renders the scene.
            */
            public static onPostRender: UnityEngine.Camera.CameraCallback
            /** The distance of the near clipping plane from the the Camera, in world units.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The distance of the far clipping plane from the Camera, in world units.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The vertical field of view of the Camera, in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The rendering path that should be used, if possible.
            */
            public get renderingPath(): UnityEngine.RenderingPath;
            public set renderingPath(value: UnityEngine.RenderingPath);
            /** The rendering path that is currently being used (Read Only).
            */
            public get actualRenderingPath(): UnityEngine.RenderingPath;
            /** High dynamic range rendering.
            */
            public get allowHDR(): boolean;
            public set allowHDR(value: boolean);
            /** MSAA rendering.
            */
            public get allowMSAA(): boolean;
            public set allowMSAA(value: boolean);
            /** Dynamic Resolution Scaling.
            */
            public get allowDynamicResolution(): boolean;
            public set allowDynamicResolution(value: boolean);
            /** Should camera rendering be forced into a RenderTexture.
            */
            public get forceIntoRenderTexture(): boolean;
            public set forceIntoRenderTexture(value: boolean);
            /** Camera's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Is the camera orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Opaque object sorting mode.
            */
            public get opaqueSortMode(): UnityEngine.Rendering.OpaqueSortMode;
            public set opaqueSortMode(value: UnityEngine.Rendering.OpaqueSortMode);
            /** Transparent object sorting mode.
            */
            public get transparencySortMode(): UnityEngine.TransparencySortMode;
            public set transparencySortMode(value: UnityEngine.TransparencySortMode);
            /** An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.
            */
            public get transparencySortAxis(): UnityEngine.Vector3;
            public set transparencySortAxis(value: UnityEngine.Vector3);
            /** Camera's depth in the camera rendering order.
            */
            public get depth(): number;
            public set depth(value: number);
            /** The aspect ratio (width divided by height).
            */
            public get aspect(): number;
            public set aspect(value: number);
            /** Get the world-space speed of the camera (Read Only).
            */
            public get velocity(): UnityEngine.Vector3;
            /** This is used to render parts of the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Mask to select which layers can trigger events on the camera.
            */
            public get eventMask(): number;
            public set eventMask(value: number);
            /** How to perform per-layer culling for a Camera.
            */
            public get layerCullSpherical(): boolean;
            public set layerCullSpherical(value: boolean);
            /** Identifies what kind of camera this is, using the CameraType enum.
            */
            public get cameraType(): UnityEngine.CameraType;
            public set cameraType(value: UnityEngine.CameraType);
            /** Sets the culling mask used to determine which objects from which Scenes to draw.
            See EditorSceneManager.SetSceneCullingMask.
            */
            public get overrideSceneCullingMask(): bigint;
            public set overrideSceneCullingMask(value: bigint);
            /** Per-layer culling distances.
            */
            public get layerCullDistances(): System.Array$1<number>;
            public set layerCullDistances(value: System.Array$1<number>);
            /** Whether or not the Camera will use occlusion culling during rendering.
            */
            public get useOcclusionCulling(): boolean;
            public set useOcclusionCulling(value: boolean);
            /** Sets a custom matrix for the camera to use for all culling queries.
            */
            public get cullingMatrix(): UnityEngine.Matrix4x4;
            public set cullingMatrix(value: UnityEngine.Matrix4x4);
            /** The color with which the screen will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** How the camera clears the background.
            */
            public get clearFlags(): UnityEngine.CameraClearFlags;
            public set clearFlags(value: UnityEngine.CameraClearFlags);
            /** How and if camera generates a depth texture.
            */
            public get depthTextureMode(): UnityEngine.DepthTextureMode;
            public set depthTextureMode(value: UnityEngine.DepthTextureMode);
            /** Should the camera clear the stencil buffer after the deferred light pass?
            */
            public get clearStencilAfterLightingPass(): boolean;
            public set clearStencilAfterLightingPass(value: boolean);
            /** Enable usePhysicalProperties to use physical camera properties to compute the field of view and the frustum.
            */
            public get usePhysicalProperties(): boolean;
            public set usePhysicalProperties(value: boolean);
            /** The sensor sensitivity of the camera. To use this property, enable UsePhysicalProperties.
            */
            public get iso(): number;
            public set iso(value: number);
            /** The exposure time of the camera, in seconts. To use this property, enable UsePhysicalProperties.
            */
            public get shutterSpeed(): number;
            public set shutterSpeed(value: number);
            /** The camera aperture. To use this property, enable UsePhysicalProperties.
            */
            public get aperture(): number;
            public set aperture(value: number);
            /** The focus distance of the lens. To use this property, enable UsePhysicalProperties.
            */
            public get focusDistance(): number;
            public set focusDistance(value: number);
            /** The camera focal length, expressed in millimeters. To use this property, enable UsePhysicalProperties.
            */
            public get focalLength(): number;
            public set focalLength(value: number);
            /** The blade count in the lens of the camera. To use this property, enable UsePhysicalProperties.
            */
            public get bladeCount(): number;
            public set bladeCount(value: number);
            /** The curvature of the blades. To use this property, enable UsePhysicalProperties.
            */
            public get curvature(): UnityEngine.Vector2;
            public set curvature(value: UnityEngine.Vector2);
            /** The camera barrel clipping. To use this property, enable UsePhysicalProperties.
            */
            public get barrelClipping(): number;
            public set barrelClipping(value: number);
            /** The camera anamorphism. To use this property, enable UsePhysicalProperties.
            */
            public get anamorphism(): number;
            public set anamorphism(value: number);
            /** The size of the camera sensor, expressed in millimeters.
            */
            public get sensorSize(): UnityEngine.Vector2;
            public set sensorSize(value: UnityEngine.Vector2);
            /** The lens offset of the camera. The lens shift is relative to the sensor size. For example, a lens shift of 0.5 offsets the sensor by half its horizontal size.
            */
            public get lensShift(): UnityEngine.Vector2;
            public set lensShift(value: UnityEngine.Vector2);
            /** There are two gates for a camera, the sensor gate and the resolution gate. The physical camera sensor gate is defined by the sensorSize property, the resolution gate is defined by the render target area.
            */
            public get gateFit(): UnityEngine.Camera.GateFitMode;
            public set gateFit(value: UnityEngine.Camera.GateFitMode);
            /** Where on the screen is the camera rendered in normalized coordinates.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            /** Where on the screen is the camera rendered in pixel coordinates.
            */
            public get pixelRect(): UnityEngine.Rect;
            public set pixelRect(value: UnityEngine.Rect);
            /** How wide is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelWidth(): number;
            /** How tall is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelHeight(): number;
            /** How wide is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelWidth(): number;
            /** How tall is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelHeight(): number;
            /** Destination render texture.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** Gets the temporary RenderTexture target for this Camera.
            */
            public get activeTexture(): UnityEngine.RenderTexture;
            /** Set the target display for this Camera.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Matrix that transforms from camera space to world space (Read Only).
            */
            public get cameraToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms from world to camera space.
            */
            public get worldToCameraMatrix(): UnityEngine.Matrix4x4;
            public set worldToCameraMatrix(value: UnityEngine.Matrix4x4);
            /** Set a custom projection matrix.
            */
            public get projectionMatrix(): UnityEngine.Matrix4x4;
            public set projectionMatrix(value: UnityEngine.Matrix4x4);
            /** Get or set the raw projection matrix with no camera offset (no jittering).
            */
            public get nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
            public set nonJitteredProjectionMatrix(value: UnityEngine.Matrix4x4);
            /** Should the jittered matrix be used for transparency rendering?
            */
            public get useJitteredProjectionMatrixForTransparentRendering(): boolean;
            public set useJitteredProjectionMatrixForTransparentRendering(value: boolean);
            /** Get the view projection matrix used on the last frame.
            */
            public get previousViewProjectionMatrix(): UnityEngine.Matrix4x4;
            /** The first enabled Camera component that is tagged "MainCamera" (Read Only).
            */
            public static get main(): UnityEngine.Camera;
            /** The camera we are currently rendering with, for low-level render control only (Read Only).
            */
            public static get current(): UnityEngine.Camera;
            /** If not null, the camera will only render the contents of the specified Scene.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public set scene(value: UnityEngine.SceneManagement.Scene);
            /** Stereoscopic rendering.
            */
            public get stereoEnabled(): boolean;
            /** The distance between the virtual eyes. Use this to query or set the current eye separation. Note that most VR devices provide this value, in which case setting the value will have no effect.
            */
            public get stereoSeparation(): number;
            public set stereoSeparation(value: number);
            /** Distance to a point where virtual eyes converge.
            */
            public get stereoConvergence(): number;
            public set stereoConvergence(value: number);
            /** Determines whether the stereo view matrices are suitable to allow for a single pass cull.
            */
            public get areVRStereoViewMatricesWithinSingleCullTolerance(): boolean;
            /** Defines which eye of a VR display the Camera renders into.
            */
            public get stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
            public set stereoTargetEye(value: UnityEngine.StereoTargetEyeMask);
            /** Returns the eye that is currently rendering.
            If called when stereo is not enabled it will return Camera.MonoOrStereoscopicEye.Mono.
            If called during a camera rendering callback such as OnRenderImage it will return the currently rendering eye.
            If called outside of a rendering callback and stereo is enabled, it will return the default eye which is Camera.MonoOrStereoscopicEye.Left.
            */
            public get stereoActiveEye(): UnityEngine.Camera.MonoOrStereoscopicEye;
            /** The number of cameras in the current Scene.
            */
            public static get allCamerasCount(): number;
            /** Returns all enabled cameras in the Scene.
            */
            public static get allCameras(): System.Array$1<UnityEngine.Camera>;
            public get sceneViewFilterMode(): UnityEngine.Camera.SceneViewFilterMode;
            /** Number of command buffers set up on this camera (Read Only).
            */
            public get commandBufferCount(): number;
            /** Revert all camera parameters to default.
            */
            public Reset(): void
            /** Resets this Camera's transparency sort settings to the default. Default transparency settings are taken from GraphicsSettings instead of directly from this Camera.
            */
            public ResetTransparencySortSettings(): void
            /** Revert the aspect ratio to the screen's aspect ratio.
            */
            public ResetAspect(): void
            /** Make culling queries reflect the camera's built in parameters.
            */
            public ResetCullingMatrix(): void
            /** Make the camera render with shader replacement.
            */
            public SetReplacementShader($shader: UnityEngine.Shader, $replacementTag: string): void
            /** Remove shader replacement from camera.
            */
            public ResetReplacementShader(): void
            /** 
            Retrieves the effective vertical field of view of the camera, including GateFit.
            Fitting the sensor gate and the resolution gate has an impact on the final field of view. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio or if the camera is not in physical mode, then this method returns the same value as the fieldofview property.
            * @returns Returns the effective vertical field of view. 
            */
            public GetGateFittedFieldOfView(): number
            /** 
            Retrieves the effective lens offset of the camera, including GateFit.
            Fitting the sensor gate and the resolution gate has an impact on the final obliqueness of the projection. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio, then this method returns the same value as the lenshift property. If the camera is not in physical mode, then this methods returns Vector2.zero.
            * @returns Returns the effective lens shift value. 
            */
            public GetGateFittedLensShift(): UnityEngine.Vector2
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param $colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param $depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer): void
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param $colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param $depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers($colorBuffer: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer): void
            /** Make the rendering position reflect the camera's position in the Scene.
            */
            public ResetWorldToCameraMatrix(): void
            /** Make the projection reflect normal camera's parameters.
            */
            public ResetProjectionMatrix(): void
            /** Calculates and returns oblique near-plane projection matrix.
            * @param $clipPlane Vector4 that describes a clip plane.
            * @returns Oblique near-plane projection matrix. 
            */
            public CalculateObliqueMatrix($clipPlane: UnityEngine.Vector4): UnityEngine.Matrix4x4
            public WorldToScreenPoint($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3
            public WorldToViewportPoint($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3
            public ViewportToWorldPoint($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3
            public ScreenToWorldPoint($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3
            /** Transforms position from world space into screen space.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToScreenPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms position from world space into viewport space.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToViewportPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms position from viewport space into world space.
            * @param $position The 3d vector in Viewport space.
            * @returns The 3d vector in World space. 
            */
            public ViewportToWorldPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.
            * @param $position A screen space position (often mouse x, y), plus a z position for depth (for example, a camera clipping plane).
            * @param $eye By default, Camera.MonoOrStereoscopicEye.Mono. Can be set to Camera.MonoOrStereoscopicEye.Left or Camera.MonoOrStereoscopicEye.Right for use in stereoscopic rendering (e.g., for VR).
            * @returns The worldspace point created by converting the screen space point at the provided distance z from the camera plane. 
            */
            public ScreenToWorldPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms position from screen space into viewport space.
            */
            public ScreenToViewportPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Transforms position from viewport space into screen space.
            */
            public ViewportToScreenPoint($position: UnityEngine.Vector3): UnityEngine.Vector3
            public ViewportPointToRay($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray
            /** Returns a ray going from camera through a viewport point.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ViewportPointToRay($pos: UnityEngine.Vector3): UnityEngine.Ray
            public ScreenPointToRay($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray
            /** Returns a ray going from camera through a screen point.
            * @param $pos A 3D point, with the x and y coordinates containing a 2D screenspace point in pixels. The lower left pixel of the screen is (0,0). The upper right pixel of the screen is (screen width in pixels - 1, screen height in pixels - 1). Unity ignores the z coordinate.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ScreenPointToRay($pos: UnityEngine.Vector3): UnityEngine.Ray
            public CalculateFrustumCorners($viewport: UnityEngine.Rect, $z: number, $eye: UnityEngine.Camera.MonoOrStereoscopicEye, $outCorners: System.Array$1<UnityEngine.Vector3>): void
            public static CalculateProjectionMatrixFromPhysicalProperties($output: $Ref<UnityEngine.Matrix4x4>, $focalLength: number, $sensorSize: UnityEngine.Vector2, $lensShift: UnityEngine.Vector2, $nearClip: number, $farClip: number, $gateFitParameters?: UnityEngine.Camera.GateFitParameters): void
            /** Converts focal length to field of view.
            * @param $focalLength Focal length in millimeters.
            * @param $sensorSize Sensor size in millimeters. Use the sensor height to get the vertical field of view. Use the sensor width to get the horizontal field of view.
            * @returns field of view in degrees. 
            */
            public static FocalLengthToFieldOfView($focalLength: number, $sensorSize: number): number
            /** Converts field of view to focal length. Use either sensor height and vertical field of view or sensor width and horizontal field of view.
            * @param $fieldOfView field of view in degrees.
            * @param $sensorSize Sensor size in millimeters.
            * @returns Focal length in millimeters. 
            */
            public static FieldOfViewToFocalLength($fieldOfView: number, $sensorSize: number): number
            /** Converts the horizontal field of view (FOV) to the vertical FOV, based on the value of the aspect ratio parameter.
            * @param $horizontalFOV The horizontal FOV value in degrees.
            * @param $aspectRatio The aspect ratio value used for the conversion
            */
            public static HorizontalToVerticalFieldOfView($horizontalFieldOfView: number, $aspectRatio: number): number
            /** Converts the vertical field of view (FOV) to the horizontal FOV, based on the value of the aspect ratio parameter.
            * @param $verticalFieldOfView The vertical FOV value in degrees.
            * @param $aspectRatio The aspect ratio value used for the conversion
            */
            public static VerticalToHorizontalFieldOfView($verticalFieldOfView: number, $aspectRatio: number): number
            public GetStereoNonJitteredProjectionMatrix($eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4
            public GetStereoViewMatrix($eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4
            public CopyStereoDeviceProjectionMatrixToNonJittered($eye: UnityEngine.Camera.StereoscopicEye): void
            public GetStereoProjectionMatrix($eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4
            public SetStereoProjectionMatrix($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4): void
            /** Reset the camera to using the Unity computed projection matrices for all stereoscopic eyes.
            */
            public ResetStereoProjectionMatrices(): void
            public SetStereoViewMatrix($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4): void
            /** Reset the camera to using the Unity computed view matrices for all stereoscopic eyes.
            */
            public ResetStereoViewMatrices(): void
            /** Fills an array of Camera with the current cameras in the Scene, without allocating a new array.
            * @param $cameras An array to be filled up with cameras currently in the Scene.
            */
            public static GetAllCameras($cameras: System.Array$1<UnityEngine.Camera>): number
            /** Render into a static cubemap from this camera.
            * @param $cubemap The cube map to render to.
            * @param $faceMask A bitmask which determines which of the six faces are rendered to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap($cubemap: UnityEngine.Cubemap, $faceMask: number): boolean
            public RenderToCubemap($cubemap: UnityEngine.Cubemap): boolean
            /** Render into a cubemap from this camera.
            * @param $faceMask A bitfield indicating which cubemap faces should be rendered into.
            * @param $cubemap The texture to render to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap($cubemap: UnityEngine.RenderTexture, $faceMask: number): boolean
            public RenderToCubemap($cubemap: UnityEngine.RenderTexture): boolean
            public RenderToCubemap($cubemap: UnityEngine.RenderTexture, $faceMask: number, $stereoEye: UnityEngine.Camera.MonoOrStereoscopicEye): boolean
            /** Render the camera manually.
            */
            public Render(): void
            /** Render the camera with shader replacement.
            */
            public RenderWithShader($shader: UnityEngine.Shader, $replacementTag: string): void
            public RenderDontRestore(): void
            public static SetupCurrent($cur: UnityEngine.Camera): void
            /** Makes this camera's settings match other camera.
            * @param $other Copy camera settings to the other camera.
            */
            public CopyFrom($other: UnityEngine.Camera): void
            /** Remove command buffers from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers($evt: UnityEngine.Rendering.CameraEvent): void
            /** Remove all command buffers set on this camera.
            */
            public RemoveAllCommandBuffers(): void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public AddCommandBuffer($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer): void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            */
            public AddCommandBufferAsync($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType): void
            /** Remove command buffer from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public RemoveCommandBuffer($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer): void
            /** Get command buffers to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers($evt: UnityEngine.Rendering.CameraEvent): System.Array$1<UnityEngine.Rendering.CommandBuffer>
            /** Get culling parameters for a camera.
            * @param $cullingParameters Resultant culling parameters.
            * @param $stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters($cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>): boolean
            /** Get culling parameters for a camera.
            * @param $cullingParameters Resultant culling parameters.
            * @param $stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters($stereoAware: boolean, $cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>): boolean
            public constructor()
        }
        /** Rendering path of a Camera.
        */
        enum RenderingPath { UsePlayerSettings = -1, VertexLit = 0, Forward = 1, DeferredLighting = 2, DeferredShading = 3 }
        /** Transparent object sorting mode of a Camera.
        */
        enum TransparencySortMode { Default = 0, Perspective = 1, Orthographic = 2, CustomAxis = 3 }
        /** Describes different types of camera.
        */
        enum CameraType { Game = 1, SceneView = 2, Preview = 4, VR = 8, Reflection = 16 }
        /** A standard 4x4 transformation matrix.
        */
        class Matrix4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Matrix4x4> {
            protected [__keep_incompatibility]: never;
        }
        /** Values for Camera.clearFlags, determining what to clear when rendering a Camera.
        */
        enum CameraClearFlags { Skybox = 1, Color = 2, SolidColor = 2, Depth = 3, Nothing = 4 }
        /** Depth texture generation mode for Camera.
        */
        enum DepthTextureMode { None = 0, Depth = 1, DepthNormals = 2, MotionVectors = 4 }
        /** Shader scripts used for all rendering.
        */
        class Shader extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Sets the limit on the number of shader variant chunks Unity loads and keeps in memory.
            */
            public static get maximumChunksOverride(): number;
            public static set maximumChunksOverride(value: number);
            /** Shader LOD level for this shader.
            */
            public get maximumLOD(): number;
            public set maximumLOD(value: number);
            /** Shader LOD level for all shaders.
            */
            public static get globalMaximumLOD(): number;
            public static set globalMaximumLOD(value: number);
            /** Can this shader run on the end-users graphics card? (Read Only)
            */
            public get isSupported(): boolean;
            /** Render pipeline currently in use.
            */
            public static get globalRenderPipeline(): string;
            public static set globalRenderPipeline(value: string);
            /** An array containing the global shader keywords that are currently enabled.
            */
            public static get enabledGlobalKeywords(): System.Array$1<UnityEngine.Rendering.GlobalKeyword>;
            /** An array containing the global shader keywords that currently exist. This includes enabled and disabled global shader keywords.
            */
            public static get globalKeywords(): System.Array$1<UnityEngine.Rendering.GlobalKeyword>;
            /** The local keyword space of this shader.
            */
            public get keywordSpace(): UnityEngine.Rendering.LocalKeywordSpace;
            /** Render queue of this shader. (Read Only)
            */
            public get renderQueue(): number;
            /** Returns the number of shader passes on the active SubShader.
            */
            public get passCount(): number;
            /** Returns the number of SubShaders in this shader.
            */
            public get subshaderCount(): number;
            /** Finds a shader with the given name. Returns null if the shader is not found.
            */
            public static Find($name: string): UnityEngine.Shader
            /** Enables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to enable.
            */
            public static EnableKeyword($keyword: string): void
            /** Disables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to disable.
            */
            public static DisableKeyword($keyword: string): void
            /** Checks whether a global shader keyword is enabled.
            * @param $keyword The name of the Rendering.GlobalKeyword to check.
            * @returns Returns true if a global shader keyword with the given name exists, and is enabled. Otherwise, returns false. 
            */
            public static IsKeywordEnabled($keyword: string): boolean
            /** Enables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to enable.
            */
            public static EnableKeyword($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>): void
            /** Disables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to disable.
            */
            public static DisableKeyword($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>): void
            /** Sets the state of a global shader keyword.
            * @param $keyword The Rendering.GlobalKeyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public static SetKeyword($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>, $value: boolean): void
            /** Checks whether a global shader keyword is enabled.
            * @param $keyword The Rendering.GlobalKeyword to check.
            * @returns Returns true if the given global shader keyword is enabled. Otherwise, returns false. 
            */
            public static IsKeywordEnabled($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>): boolean
            /** Prewarms all shader variants of all Shaders currently in memory.
            */
            public static WarmupAllShaders(): void
            /** Gets unique identifier for a shader property name.
            * @param $name Shader property name.
            * @returns Unique integer for the name. 
            */
            public static PropertyToID($name: string): number
            /** Returns the dependency shader.
            * @param $name The name of the dependency to query.
            */
            public GetDependency($name: string): UnityEngine.Shader
            /** Returns the number of passes in the given SubShader.
            * @param $subshaderIndex The index of the SubShader.
            */
            public GetPassCountInSubshader($subshaderIndex: number): number
            /** Searches for the tag specified by tagName on the shader's active SubShader and returns the value of the tag.
            * @param $passIndex The index of the pass.
            * @param $tagName The name of the tag.
            */
            public FindPassTagValue($passIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId): UnityEngine.Rendering.ShaderTagId
            /** Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
            * @param $subshaderIndex The index of the SubShader.
            * @param $passIndex The index of the pass.
            * @param $tagName The name of the tag.
            */
            public FindPassTagValue($subshaderIndex: number, $passIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId): UnityEngine.Rendering.ShaderTagId
            /** Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
            * @param $subshaderIndex The index of the SubShader.
            * @param $tagName The name of the tag.
            */
            public FindSubshaderTagValue($subshaderIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId): UnityEngine.Rendering.ShaderTagId
            /** This method is deprecated. Use SetGlobalFloat or SetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInt($name: string, $value: number): void
            /** This method is deprecated. Use SetGlobalFloat or SetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInt($nameID: number, $value: number): void
            /** Sets a global float property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloat($name: string, $value: number): void
            /** Sets a global float property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloat($nameID: number, $value: number): void
            /** Sets a global integer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInteger($name: string, $value: number): void
            /** Sets a global integer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInteger($nameID: number, $value: number): void
            /** Sets a global vector property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVector($name: string, $value: UnityEngine.Vector4): void
            /** Sets a global vector property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVector($nameID: number, $value: UnityEngine.Vector4): void
            /** Sets a global color property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalColor($name: string, $value: UnityEngine.Color): void
            /** Sets a global color property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalColor($nameID: number, $value: UnityEngine.Color): void
            /** Sets a global matrix property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrix($name: string, $value: UnityEngine.Matrix4x4): void
            /** Sets a global matrix property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrix($nameID: number, $value: UnityEngine.Matrix4x4): void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture($name: string, $value: UnityEngine.Texture): void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture($nameID: number, $value: UnityEngine.Texture): void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer($name: string, $value: UnityEngine.ComputeBuffer): void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer($nameID: number, $value: UnityEngine.ComputeBuffer): void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer($name: string, $value: UnityEngine.GraphicsBuffer): void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            public static SetGlobalFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public static SetGlobalFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            /** Sets a global float array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloatArray($name: string, $values: System.Array$1<number>): void
            /** Sets a global float array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloatArray($nameID: number, $values: System.Array$1<number>): void
            public static SetGlobalVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public static SetGlobalVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Sets a global vector array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVectorArray($name: string, $values: System.Array$1<UnityEngine.Vector4>): void
            /** Sets a global vector array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVectorArray($nameID: number, $values: System.Array$1<UnityEngine.Vector4>): void
            public static SetGlobalMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public static SetGlobalMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            /** Sets a global matrix array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrixArray($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Sets a global matrix array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrixArray($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** This method is deprecated. Use GetGlobalFloat or GetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInt($name: string): number
            /** This method is deprecated. Use GetGlobalFloat or GetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInt($nameID: number): number
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloat($name: string): number
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloat($nameID: number): number
            /** Gets a global integer property for all shaders previously set using SetGlobalInteger.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInteger($name: string): number
            /** Gets a global integer property for all shaders previously set using SetGlobalInteger.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInteger($nameID: number): number
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVector($name: string): UnityEngine.Vector4
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVector($nameID: number): UnityEngine.Vector4
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalColor($name: string): UnityEngine.Color
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalColor($nameID: number): UnityEngine.Color
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrix($name: string): UnityEngine.Matrix4x4
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrix($nameID: number): UnityEngine.Matrix4x4
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalTexture($name: string): UnityEngine.Texture
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalTexture($nameID: number): UnityEngine.Texture
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloatArray($name: string): System.Array$1<number>
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloatArray($nameID: number): System.Array$1<number>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVectorArray($name: string): System.Array$1<UnityEngine.Vector4>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVectorArray($nameID: number): System.Array$1<UnityEngine.Vector4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrixArray($name: string): System.Array$1<UnityEngine.Matrix4x4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrixArray($nameID: number): System.Array$1<UnityEngine.Matrix4x4>
            public static GetGlobalFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public static GetGlobalFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            public static GetGlobalVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public static GetGlobalVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public static GetGlobalMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public static GetGlobalMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            /** Returns the number of properties in this Shader.
            */
            public GetPropertyCount(): number
            /** Finds the index of a shader property by its name.
            * @param $propertyName The name of the shader property.
            */
            public FindPropertyIndex($propertyName: string): number
            /** Returns the name of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyName($propertyIndex: number): string
            /** Returns the nameId of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyNameId($propertyIndex: number): number
            /** Returns the ShaderPropertyType of the property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyType($propertyIndex: number): UnityEngine.Rendering.ShaderPropertyType
            /** Returns the description string of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDescription($propertyIndex: number): string
            /** Returns the ShaderPropertyFlags of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyFlags($propertyIndex: number): UnityEngine.Rendering.ShaderPropertyFlags
            /** Returns an array of strings containing attributes of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyAttributes($propertyIndex: number): System.Array$1<string>
            /** Returns the default float value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultFloatValue($propertyIndex: number): number
            /** Returns the default Vector4 value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultVectorValue($propertyIndex: number): UnityEngine.Vector4
            /** Returns the min and max limits for a <a href="Rendering.ShaderPropertyType.Range.html">Range</a> property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyRangeLimits($propertyIndex: number): UnityEngine.Vector2
            /** Returns the default int value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultIntValue($propertyIndex: number): number
            /** Returns the TextureDimension of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDimension($propertyIndex: number): UnityEngine.Rendering.TextureDimension
            /** Returns the default Texture name of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDefaultName($propertyIndex: number): string
            /** Find the name of a texture stack a texture belongs too.
            * @param $propertyIndex Index of the property.
            * @param $stackName On exit, contanis the name of the stack if one was found.
            * @param $layerIndex On exit, contains the stack layer index of the texture property.
            * @returns True, if a stack was found for the given texture property, false if not. 
            */
            public FindTextureStack($propertyIndex: number, $stackName: $Ref<string>, $layerIndex: $Ref<number>): boolean
        }
        /** A 2D Rectangle defined by X and Y position, width and height.
        */
        class Rect extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Rect> {
            protected [__keep_incompatibility]: never;
        }
        /** Render textures are textures that can be rendered to.
        */
        class RenderTexture extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** The width of the render texture in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the render texture in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the render texture.
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** The color format of the render texture. You can set the color format to None to achieve depth-only rendering.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set graphicsFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Render texture has mipmaps when this flag is set.
            */
            public get useMipMap(): boolean;
            public set useMipMap(value: boolean);
            /** Does this render texture use sRGB read/write conversions? (Read Only).
            */
            public get sRGB(): boolean;
            /** If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any.
            */
            public get vrUsage(): UnityEngine.VRTextureUsage;
            public set vrUsage(value: UnityEngine.VRTextureUsage);
            /** The render texture memoryless mode property.
            */
            public get memorylessMode(): UnityEngine.RenderTextureMemoryless;
            public set memorylessMode(value: UnityEngine.RenderTextureMemoryless);
            public get format(): UnityEngine.RenderTextureFormat;
            public set format(value: UnityEngine.RenderTextureFormat);
            /** The format of the stencil data that you can encapsulate within a RenderTexture.
            Specifying this property creates a stencil element for the RenderTexture and sets its format.
            This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
            This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.
            Currently, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.
            */
            public get stencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set stencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The format of the depth/stencil buffer.
            */
            public get depthStencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set depthStencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Mipmap levels are generated automatically when this flag is set.
            */
            public get autoGenerateMips(): boolean;
            public set autoGenerateMips(value: boolean);
            /** Volume extent of a 3D render texture or number of slices of array texture.
            */
            public get volumeDepth(): number;
            public set volumeDepth(value: number);
            /** The antialiasing level for the RenderTexture.
            */
            public get antiAliasing(): number;
            public set antiAliasing(value: number);
            /** If true and antiAliasing is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
            */
            public get bindTextureMS(): boolean;
            public set bindTextureMS(value: boolean);
            /** Enable random access write into this render texture on Shader Model 5.0 level shaders.
            */
            public get enableRandomWrite(): boolean;
            public set enableRandomWrite(value: boolean);
            /** Is the render texture marked to be scaled by the.
            */
            public get useDynamicScale(): boolean;
            public set useDynamicScale(value: boolean);
            public get isPowerOfTwo(): boolean;
            public set isPowerOfTwo(value: boolean);
            /** Currently active render texture.
            */
            public static get active(): UnityEngine.RenderTexture;
            public static set active(value: UnityEngine.RenderTexture);
            /** Color buffer of the render texture (Read Only).
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth/stencil buffer of the render texture (Read Only).
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** The precision of the render texture's depth buffer in bits (0, 16, 24 and 32 are supported).
            */
            public get depth(): number;
            public set depth(value: number);
            /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.
            */
            public get descriptor(): UnityEngine.RenderTextureDescriptor;
            public set descriptor(value: UnityEngine.RenderTextureDescriptor);
            /** Retrieve a native (underlying graphics API) pointer to the depth buffer resource.
            * @returns Pointer to an underlying graphics API depth buffer resource. 
            */
            public GetNativeDepthBufferPtr(): System.IntPtr
            /** Hint the GPU driver that the contents of the RenderTexture will not be used.
            * @param $discardColor Should the colour buffer be discarded?
            * @param $discardDepth Should the depth buffer be discarded?
            */
            public DiscardContents($discardColor: boolean, $discardDepth: boolean): void
            /** Hint the GPU driver that the contents of the RenderTexture will not be used.
            * @param $discardColor Should the colour buffer be discarded?
            * @param $discardDepth Should the depth buffer be discarded?
            */
            public DiscardContents(): void
            /** Force an antialiased render texture to be resolved.
            * @param $target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
            */
            public ResolveAntiAliasedSurface(): void
            /** Force an antialiased render texture to be resolved.
            * @param $target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
            */
            public ResolveAntiAliasedSurface($target: UnityEngine.RenderTexture): void
            /** Assigns this RenderTexture as a global shader property named propertyName.
            */
            public SetGlobalShaderProperty($propertyName: string): void
            /** Actually creates the RenderTexture.
            * @returns True if the texture is created, else false. 
            */
            public Create(): boolean
            /** Releases the RenderTexture.
            */
            public Release(): void
            /** Is the render texture actually created?
            */
            public IsCreated(): boolean
            /** Generate mipmap levels of a render texture.
            */
            public GenerateMips(): void
            public ConvertToEquirect($equirect: UnityEngine.RenderTexture, $eye?: UnityEngine.Camera.MonoOrStereoscopicEye): void
            /** Does a RenderTexture have stencil buffer?
            * @param $rt Render texture, or null for main screen.
            */
            public static SupportsStencil($rt: UnityEngine.RenderTexture): boolean
            /** Release a temporary texture allocated with GetTemporary.
            */
            public static ReleaseTemporary($temp: UnityEngine.RenderTexture): void
            /** Allocate a temporary render texture.
            * @param $width Width in pixels.
            * @param $height Height in pixels.
            * @param $depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param $format Render texture format.
            * @param $readWrite Color space conversion mode.
            * @param $antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param $memorylessMode Render texture memoryless mode.
            * @param $vrUsage How Unity uses the RenderTexture as a VR eye texture. The default is VRTextureUsage.None.
            * @param $useDynamicScale Determines whether Unity scales the render texture using. The default is false.
            * @param $desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary($desc: UnityEngine.RenderTextureDescriptor): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat): UnityEngine.RenderTexture
            /** Allocate a temporary render texture.
            * @param $width Width in pixels.
            * @param $height Height in pixels.
            * @param $depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param $format Render texture format.
            * @param $readWrite Color space conversion mode.
            * @param $antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param $memorylessMode Render texture memoryless mode.
            * @param $vrUsage How Unity uses the RenderTexture as a VR eye texture. The default is VRTextureUsage.None.
            * @param $useDynamicScale Determines whether Unity scales the render texture using. The default is false.
            * @param $desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number, $depthBuffer: number): UnityEngine.RenderTexture
            public static GetTemporary($width: number, $height: number): UnityEngine.RenderTexture
            public constructor($desc: UnityEngine.RenderTextureDescriptor)
            public constructor($textureToCopy: UnityEngine.RenderTexture)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor($width: number, $height: number, $depth: number)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor()
        }
        /** Color or depth buffer part of a RenderTexture.
        */
        class RenderBuffer extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Representation of four-dimensional vectors.
        */
        class Vector4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector4> {
            protected [__keep_incompatibility]: never;
        }
        /** Representation of rays.
        */
        class Ray extends System.ValueType implements System.IFormattable {
            protected [__keep_incompatibility]: never;
        }
        /** Enum values for the Camera's targetEye property.
        */
        enum StereoTargetEyeMask { None = 0, Left = 1, Right = 2, Both = 3 }
        /** Class for handling cube maps, Use this to create or modify existing.
        */
        class Cubemap extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Updates Unity cubemap to use different native cubemap texture object.
            * @param $nativeTexture Native cubemap texture object.
            */
            public UpdateExternalTexture($nativeTexture: System.IntPtr): void
            /** Performs smoothing of near edge regions.
            * @param $smoothRegionWidthInPixels Pixel distance at edges over which to apply smoothing.
            */
            public SmoothEdges($smoothRegionWidthInPixels: number): void
            public SmoothEdges(): void
            /** Gets the pixel color data for a mipmap level of a face as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($face: UnityEngine.CubemapFace, $miplevel: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($face: UnityEngine.CubemapFace): System.Array$1<UnityEngine.Color>
            /** Sets the pixel colors of an entire mipmap level of a face.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level of a face.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace): void
            /** Resets the requestedMipmapLevel field.
            */
            public ClearRequestedMipmapLevel(): void
            /** Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
            * @returns True if the mipmap level requested by requestedMipmapLevel has finished loading. 
            */
            public IsRequestedMipmapLevelLoaded(): boolean
            /** Creates a Unity cubemap out of externally created native cubemap object.
            * @param $size The width and height of each face of the cubemap should be the same.
            * @param $format Format of underlying cubemap object.
            * @param $mipmap Does the cubemap have mipmaps?
            * @param $nativeTex Native cubemap texture object.
            */
            public static CreateExternalTexture($width: number, $format: UnityEngine.TextureFormat, $mipmap: boolean, $nativeTex: System.IntPtr): UnityEngine.Cubemap
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write to.
            */
            public SetPixel($face: UnityEngine.CubemapFace, $x: number, $y: number, $color: UnityEngine.Color): void
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write to.
            */
            public SetPixel($face: UnityEngine.CubemapFace, $x: number, $y: number, $color: UnityEngine.Color, $mip: number): void
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mip The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to sample.
            * @returns The pixel color. 
            */
            public GetPixel($face: UnityEngine.CubemapFace, $x: number, $y: number): UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mip The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to sample.
            * @returns The pixel color. 
            */
            public GetPixel($face: UnityEngine.CubemapFace, $x: number, $y: number, $mip: number): UnityEngine.Color
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply($updateMipmaps: boolean, $makeNoLongerReadable: boolean): void
            public Apply($updateMipmaps: boolean): void
            public Apply(): void
            public constructor($width: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor($width: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $createUninitialized: boolean)
            public constructor($width: number, $format: UnityEngine.TextureFormat, $mipCount: number)
            public constructor($width: number, $format: UnityEngine.TextureFormat, $mipCount: number, $createUninitialized: boolean)
            public constructor()
        }
        /** Describes a set of bounding spheres that should have their visibility and distances maintained.
        */
        class CullingGroup extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Sets the callback that will be called when a sphere's visibility and/or distance state has changed.
            */
            public get onStateChanged(): UnityEngine.CullingGroup.StateChanged;
            public set onStateChanged(value: UnityEngine.CullingGroup.StateChanged);
            /** Pauses culling group execution.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Locks the CullingGroup to a specific camera.
            */
            public get targetCamera(): UnityEngine.Camera;
            public set targetCamera(value: UnityEngine.Camera);
            /** Clean up all memory used by the CullingGroup immediately.
            */
            public Dispose(): void
            /** Sets the array of bounding sphere definitions that the CullingGroup should compute culling for.
            * @param $array The BoundingSpheres to cull.
            */
            public SetBoundingSpheres($array: System.Array$1<UnityEngine.BoundingSphere>): void
            /** Sets the number of bounding spheres in the bounding spheres array that are actually being used.
            * @param $count The number of bounding spheres being used.
            */
            public SetBoundingSphereCount($count: number): void
            /** Erase a given bounding sphere by moving the final sphere on top of it.
            * @param $index The index of the entry to erase.
            */
            public EraseSwapBack($index: number): void
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices($visible: boolean, $result: System.Array$1<number>, $firstIndex: number): number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices($distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number): number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices($visible: boolean, $distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number): number
            /** Returns true if the bounding sphere at index is currently visible from any of the contributing cameras.
            * @param $index The index of the bounding sphere.
            * @returns True if the sphere is visible; false if it is invisible. 
            */
            public IsVisible($index: number): boolean
            /** Get the current distance band index of a given sphere.
            * @param $index The index of the sphere.
            * @returns The sphere's current distance band index. 
            */
            public GetDistance($index: number): number
            /** Set bounding distances for 'distance bands' the group should compute, as well as options for how spheres falling into each distance band should be treated.
            * @param $distances An array of bounding distances. The distances should be sorted in increasing order.
            */
            public SetBoundingDistances($distances: System.Array$1<number>): void
            /** Set the reference point from which distance bands are measured.
            * @param $point A fixed point to measure the distance from.
            * @param $transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint($point: UnityEngine.Vector3): void
            /** Set the reference point from which distance bands are measured.
            * @param $point A fixed point to measure the distance from.
            * @param $transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint($transform: UnityEngine.Transform): void
            public constructor()
        }
        /** Provides information about the current and previous states of one sphere in a CullingGroup.
        */
        class CullingGroupEvent extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Describes a single bounding sphere for use by a CullingGroup.
        */
        class BoundingSphere extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** FlareLayer component.
        */
        class FlareLayer extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
        }
        /** The reflection probe is used to capture the surroundings into a texture which is passed to the shaders and used for reflections.
        */
        class ReflectionProbe extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The size of the probe's bounding box in which the probe can contribute to reflections. The size is in world space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The center of the probe's bounding box in which the probe can contribute to reflections. The center is relative to the position of the probe.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The near clipping plane distance when rendering the probe.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance when rendering the probe.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The intensity modifier that is applied to the texture of reflection probe in the shader.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The probe's world space axis-aligned bounding box in which the probe can contribute to reflections (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Should this reflection probe use HDR rendering?
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            /** Specifies whether Unity should render non-static GameObjects into the Reflection Probe. If you set this to true, Unity renders non-static GameObjects into the Reflection Probe. If you set this to false, Unity does not render non-static GameObjects into the Reflection Probe. Unity only takes this property into account if the Reflection Probe's Type is Custom.
            */
            public get renderDynamicObjects(): boolean;
            public set renderDynamicObjects(value: boolean);
            /** Shadow drawing distance when rendering the probe.
            */
            public get shadowDistance(): number;
            public set shadowDistance(value: number);
            /** Resolution of the underlying reflection texture in pixels.
            */
            public get resolution(): number;
            public set resolution(value: number);
            /** This is used to render parts of the reflecion probe's surrounding selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** How the reflection probe clears the background.
            */
            public get clearFlags(): UnityEngine.Rendering.ReflectionProbeClearFlags;
            public set clearFlags(value: UnityEngine.Rendering.ReflectionProbeClearFlags);
            /** The color with which the texture of reflection probe will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** Distance around probe used for blending (used in deferred probes).
            */
            public get blendDistance(): number;
            public set blendDistance(value: number);
            /** Should this reflection probe use box projection?
            */
            public get boxProjection(): boolean;
            public set boxProjection(value: boolean);
            /** Should reflection probe texture be generated in the Editor (ReflectionProbeMode.Baked) or should probe use custom specified texure (ReflectionProbeMode.Custom)?
            */
            public get mode(): UnityEngine.Rendering.ReflectionProbeMode;
            public set mode(value: UnityEngine.Rendering.ReflectionProbeMode);
            /** Reflection probe importance.
            */
            public get importance(): number;
            public set importance(value: number);
            /** Sets the way the probe will refresh.
            Additional resources: ReflectionProbeRefreshMode.
            */
            public get refreshMode(): UnityEngine.Rendering.ReflectionProbeRefreshMode;
            public set refreshMode(value: UnityEngine.Rendering.ReflectionProbeRefreshMode);
            /** Sets this probe time-slicing mode
            Additional resources: ReflectionProbeTimeSlicingMode.
            */
            public get timeSlicingMode(): UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
            public set timeSlicingMode(value: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode);
            /** Reference to the baked texture of the reflection probe's surrounding.
            */
            public get bakedTexture(): UnityEngine.Texture;
            public set bakedTexture(value: UnityEngine.Texture);
            /** Reference to the baked texture of the reflection probe's surrounding. Use this to assign custom reflection texture.
            */
            public get customBakedTexture(): UnityEngine.Texture;
            public set customBakedTexture(value: UnityEngine.Texture);
            /** Reference to the real-time texture of the reflection probe's surroundings. Use this to assign a RenderTexture to use for real-time reflection.
            */
            public get realtimeTexture(): UnityEngine.RenderTexture;
            public set realtimeTexture(value: UnityEngine.RenderTexture);
            /** Texture which is passed to the shader of the objects in the vicinity of the reflection probe (Read Only).
            */
            public get texture(): UnityEngine.Texture;
            /** HDR decode values of the reflection probe texture.
            */
            public get textureHDRDecodeValues(): UnityEngine.Vector4;
            public static get minBakedCubemapResolution(): number;
            public static get maxBakedCubemapResolution(): number;
            /** HDR decode values of the default reflection probe texture.
            */
            public static get defaultTextureHDRDecodeValues(): UnityEngine.Vector4;
            /** The surface texture of the default reflection probe that captures the environment contribution. Read only.
            */
            public static get defaultTexture(): UnityEngine.Texture;
            /** Revert all ReflectionProbe parameters to default.
            */
            public Reset(): void
            public RenderProbe(): number
            /** Refreshes the probe's cubemap.
            * @param $targetTexture Target RenderTexture in which rendering should be done. Specifying null will update the probe's default texture.
            * @returns 
            An integer representing a RenderID which can subsequently be used to check if the probe has finished rendering while rendering in time-slice mode.
            Additional resources: IsFinishedRendering
            Additional resources: timeSlicingMode
            */
            public RenderProbe($targetTexture: UnityEngine.RenderTexture): number
            /** Checks if a probe has finished a time-sliced render.
            * @param $renderId An integer representing the RenderID as returned by the RenderProbe method.
            * @returns 
            True if the render has finished, false otherwise.
            Additional resources: timeSlicingMode
            */
            public IsFinishedRendering($renderId: number): boolean
            /** Utility method to blend 2 cubemaps into a target render texture.
            * @param $src Cubemap to blend from.
            * @param $dst Cubemap to blend to.
            * @param $blend Blend weight.
            * @param $target RenderTexture which will hold the result of the blend.
            * @returns Returns trues if cubemaps were blended, false otherwise. 
            */
            public static BlendCubemap($src: UnityEngine.Texture, $dst: UnityEngine.Texture, $blend: number, $target: UnityEngine.RenderTexture): boolean
            /** Updates the culling system with the ReflectionProbe's current state. This ensures that Unity correctly culls the ReflectionProbe during rendering if you implement your own runtime reflection system.
            */
            public static UpdateCachedState(): void
            public static add_reflectionProbeChanged($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>): void
            public static remove_reflectionProbeChanged($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>): void
            public static add_defaultReflectionSet($value: System.Action$1<UnityEngine.Cubemap>): void
            public static remove_defaultReflectionSet($value: System.Action$1<UnityEngine.Cubemap>): void
            public static add_defaultReflectionTexture($value: System.Action$1<UnityEngine.Texture>): void
            public static remove_defaultReflectionTexture($value: System.Action$1<UnityEngine.Texture>): void
            public constructor()
        }
        /** Holds data for a single application crash event and provides access to all gathered crash reports.
        */
        class CrashReport extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Time, when the crash occured.
            */
            public time: System.DateTime
            /** Crash report data as formatted text.
            */
            public text: string
            /** Returns all currently available reports in a new array.
            */
            public static get reports(): System.Array$1<UnityEngine.CrashReport>;
            /** Returns last crash report, or null if no reports are available.
            */
            public static get lastReport(): UnityEngine.CrashReport;
            /** Remove all reports from available reports list.
            */
            public static RemoveAll(): void
            /** Remove report from available reports list.
            */
            public Remove(): void
        }
        /** Class containing methods to ease debugging while developing a game.
        */
        class Debug extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Get default debug logger.
            */
            public static get unityLogger(): UnityEngine.ILogger;
            /** Allows you to enable or disable the developer console.
            */
            public static get developerConsoleEnabled(): boolean;
            public static set developerConsoleEnabled(value: boolean);
            /** Controls whether the development console is visible.
            */
            public static get developerConsoleVisible(): boolean;
            public static set developerConsoleVisible(value: boolean);
            /** In the Build Settings dialog there is a check box called "Development Build".
            */
            public static get isDebugBuild(): boolean;
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number): void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color): void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine($start: UnityEngine.Vector3, $end: UnityEngine.Vector3): void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean): void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number): void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color): void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3): void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean): void
            /** Pauses the editor.
            */
            public static Break(): void
            public static DebugBreak(): void
            /** Logs a message to the Unity Console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static Log($message: any): void
            /** Logs a message to the Unity Console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static Log($message: any, $context: UnityEngine.Object): void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat($format: string, ...args: any[]): void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat($context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat($logType: UnityEngine.LogType, $logOptions: UnityEngine.LogOption, $context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogError($message: any): void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogError($message: any, $context: UnityEngine.Object): void
            /** Logs a formatted error message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogErrorFormat($format: string, ...args: any[]): void
            /** Logs a formatted error message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogErrorFormat($context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** Clears errors from the developer console.
            */
            public static ClearDeveloperConsole(): void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $context Object to which the message applies.
            * @param $exception Runtime Exception.
            */
            public static LogException($exception: System.Exception): void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $context Object to which the message applies.
            * @param $exception Runtime Exception.
            */
            public static LogException($exception: System.Exception, $context: UnityEngine.Object): void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogWarning($message: any): void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogWarning($message: any, $context: UnityEngine.Object): void
            /** Logs a formatted warning message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogWarningFormat($format: string, ...args: any[]): void
            /** Logs a formatted warning message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogWarningFormat($context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert($condition: boolean): void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert($condition: boolean, $context: UnityEngine.Object): void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert($condition: boolean, $message: any): void
            public static Assert($condition: boolean, $message: string): void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert($condition: boolean, $message: any, $context: UnityEngine.Object): void
            public static Assert($condition: boolean, $message: string, $context: UnityEngine.Object): void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static AssertFormat($condition: boolean, $format: string, ...args: any[]): void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static AssertFormat($condition: boolean, $context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogAssertion($message: any): void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogAssertion($message: any, $context: UnityEngine.Object): void
            /** Logs a formatted assertion message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogAssertionFormat($format: string, ...args: any[]): void
            /** Logs a formatted assertion message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogAssertionFormat($context: UnityEngine.Object, $format: string, ...args: any[]): void
            public constructor()
        }
        interface ILogger extends UnityEngine.ILogHandler {
            /** Set Logger.ILogHandler.
            */
            logHandler: UnityEngine.ILogHandler
            /** To runtime toggle debug logging [ON/OFF].
            */
            logEnabled: boolean
            /** To selective enable debug log message.
            */
            filterLogType: UnityEngine.LogType
            /** Check logging is enabled based on the LogType.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            IsLogTypeAllowed($logType: UnityEngine.LogType): boolean
            /** Logs message to the Unity Console using default logger.
            */
            Log($logType: UnityEngine.LogType, $message: any): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($logType: UnityEngine.LogType, $tag: string, $message: any): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($message: any): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($tag: string, $message: any): void
            /** Logs message to the Unity Console using default logger.
            */
            Log($tag: string, $message: any, $context: UnityEngine.Object): void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning($tag: string, $message: any): void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning($tag: string, $message: any, $context: UnityEngine.Object): void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError($tag: string, $message: any): void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError($tag: string, $message: any, $context: UnityEngine.Object): void
            /** Logs a formatted message.
            */
            LogFormat($logType: UnityEngine.LogType, $format: string, ...args: any[]): void
            /** A variant of ILogger.Log that logs an exception message.
            */
            LogException($exception: System.Exception): void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            LogFormat($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            LogException($exception: System.Exception, $context: UnityEngine.Object): void
        }
        interface ILogHandler {
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            LogFormat($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]): void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            LogException($exception: System.Exception, $context: UnityEngine.Object): void
        }
        /** Option flags for specifying special treatment of a log message.
        */
        enum LogOption { None = 0, NoStacktrace = 1 }
        interface IExposedPropertyTable {
            /** Assigns a value for an ExposedReference.
            * @param $id Identifier of the ExposedReference.
            * @param $value The value to assigned to the ExposedReference.
            */
            SetReferenceValue($id: UnityEngine.PropertyName, $value: UnityEngine.Object): void
            /** Retrieves a value for the given identifier.
            * @param $id Identifier of the ExposedReference.
            * @param $idValid Is the identifier valid?
            * @returns The value stored in the table. 
            */
            GetReferenceValue($id: UnityEngine.PropertyName, $idValid: $Ref<boolean>): UnityEngine.Object
            /** Remove a value for the given reference.
            * @param $id Identifier of the ExposedReference.
            */
            ClearReferenceValue($id: UnityEngine.PropertyName): void
        }
        /** Represents a string as an int for efficient lookup and comparison. Use this for common PropertyNames.
        Internally stores just an int to represent the string. A PropertyName can be created from a string but can not be converted back to a string. The same string always results in the same int representing that string. Thus this is a very efficient string representation in both memory and speed when all you need is comparison.
        PropertyName is serializable.
        ToString() is only implemented for debugging purposes in the editor it returns "theName:3737" in the player it returns "Unknown:3737".
        */
        class PropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.PropertyName> {
            protected [__keep_incompatibility]: never;
        }
        /** Evaluates simple math expressions; supports int  float and operators: + - *  % ^ ( ).
        */
        class ExpressionEvaluator extends System.Object {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Utility class for common geometric functions.
        */
        class GeometryUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Calculates frustum planes.
            * @param $camera The camera with the view frustum that you want to calculate planes from.
            * @returns The planes that form the camera's view frustum. 
            */
            public static CalculateFrustumPlanes($camera: UnityEngine.Camera): System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param $worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @returns The planes that enclose the projection space described by the matrix. 
            */
            public static CalculateFrustumPlanes($worldToProjectionMatrix: UnityEngine.Matrix4x4): System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param $camera The camera with the view frustum that you want to calculate planes from.
            * @param $planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes($camera: UnityEngine.Camera, $planes: System.Array$1<UnityEngine.Plane>): void
            /** Calculates frustum planes.
            * @param $worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @param $planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes($worldToProjectionMatrix: UnityEngine.Matrix4x4, $planes: System.Array$1<UnityEngine.Plane>): void
            /** Calculates the bounding box from the given array of positions and the transformation matrix.
            * @param $positions An array that stores the location of 3d positions.
            * @param $transform A matrix that changes the position, rotation and size of the bounds calculation.
            * @returns Calculates the axis-aligned bounding box. 
            */
            public static CalculateBounds($positions: System.Array$1<UnityEngine.Vector3>, $transform: UnityEngine.Matrix4x4): UnityEngine.Bounds
            /** GeometryUtility.TryCreatePlaneFromPolygon creates a plane from the given list of vertices that define the polygon, as long as they do not characterize a straight line or zero area.
            * @param $vertices An array of vertex positions that define the shape of a polygon.
            * @param $plane A valid plane that goes through the vertices.
            * @returns Returns true on success, false if Unity did not create a plane from the vertices. 
            */
            public static TryCreatePlaneFromPolygon($vertices: System.Array$1<UnityEngine.Vector3>, $plane: $Ref<UnityEngine.Plane>): boolean
            /** Returns true if bounds are inside the plane array.
            */
            public static TestPlanesAABB($planes: System.Array$1<UnityEngine.Plane>, $bounds: UnityEngine.Bounds): boolean
            public constructor()
        }
        /** Representation of a plane in 3D space.
        */
        class Plane extends System.ValueType implements System.IFormattable {
            protected [__keep_incompatibility]: never;
        }
        /** Offsets for rectangles, borders, etc.
        */
        class RectOffset extends System.Object implements System.IFormattable {
            protected [__keep_incompatibility]: never;
            /** Left edge size.
            */
            public get left(): number;
            public set left(value: number);
            /** Right edge size.
            */
            public get right(): number;
            public set right(value: number);
            /** Top edge size.
            */
            public get top(): number;
            public set top(value: number);
            /** Bottom edge size.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Shortcut for left + right. (Read Only)
            */
            public get horizontal(): number;
            /** Shortcut for top + bottom. (Read Only)
            */
            public get vertical(): number;
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString(): string
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string): string
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString($format: string, $formatProvider: System.IFormatProvider): string
            /** Add the border offsets to a rect.
            */
            public Add($rect: UnityEngine.Rect): UnityEngine.Rect
            /** Remove the border offsets from a rect.
            */
            public Remove($rect: UnityEngine.Rect): UnityEngine.Rect
            public constructor()
            public constructor($left: number, $right: number, $top: number, $bottom: number)
        }
        /** Allows to control the dynamic Global Illumination.
        */
        class DynamicGI extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Allows for scaling the contribution coming from real-time & baked lightmaps.
            Note: this value can be set in the Lighting Window UI and it is serialized, that is not the case for other properties in this class.
            */
            public static get indirectScale(): number;
            public static set indirectScale(value: number);
            /** Determines the percentage change in lighting intensity that triggers Unity to recalculate the real-time lightmap.
            */
            public static get updateThreshold(): number;
            public static set updateThreshold(value: number);
            /** The number of milliseconds that can be spent on material updates.
            */
            public static get materialUpdateTimeSlice(): number;
            public static set materialUpdateTimeSlice(value: number);
            /** When enabled, new dynamic Global Illumination output is shown in each frame.
            */
            public static get synchronousMode(): boolean;
            public static set synchronousMode(value: boolean);
            /** Is precomputed Enlighten Realtime Global Illumination output converged?
            */
            public static get isConverged(): boolean;
            /** Allows to set an emissive color for a given renderer quickly, without the need to render the emissive input for the entire system.
            * @param $renderer The Renderer that should get a new color.
            * @param $color The emissive Color.
            */
            public static SetEmissive($renderer: UnityEngine.Renderer, $color: UnityEngine.Color): void
            /** Allows overriding the distant environment lighting for Enlighten Realtime Global Illumination, without changing the Skybox Material.
            * @param $input Array of float values to be used for Enlighten Realtime Global Illumination environment lighting.
            */
            public static SetEnvironmentData($input: System.Array$1<number>): void
            /** Schedules an update of the environment cubemap.
            */
            public static UpdateEnvironment(): void
            public constructor()
        }
        /** General functionality for all renderers.
        */
        class Renderer extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The bounding box of the renderer in world space.
            */
            public get bounds(): UnityEngine.Bounds;
            public set bounds(value: UnityEngine.Bounds);
            /** The bounding box of the renderer in local space.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Makes the rendered 3D object visible if enabled.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Is this renderer visible in any camera? (Read Only)
            */
            public get isVisible(): boolean;
            /** Does this object cast shadows?
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** Does this object receive shadows?
            */
            public get receiveShadows(): boolean;
            public set receiveShadows(value: boolean);
            /** Allows turning off rendering for a specific component.
            */
            public get forceRenderingOff(): boolean;
            public set forceRenderingOff(value: boolean);
            /** Is this renderer a static shadow caster?
            */
            public get staticShadowCaster(): boolean;
            public set staticShadowCaster(value: boolean);
            /** Specifies the mode for motion vector rendering.
            */
            public get motionVectorGenerationMode(): UnityEngine.MotionVectorGenerationMode;
            public set motionVectorGenerationMode(value: UnityEngine.MotionVectorGenerationMode);
            /** The light probe interpolation type.
            */
            public get lightProbeUsage(): UnityEngine.Rendering.LightProbeUsage;
            public set lightProbeUsage(value: UnityEngine.Rendering.LightProbeUsage);
            /** Should reflection probes be used for this Renderer?
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** Determines which rendering layer this renderer lives on, if you use a.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** This value sorts renderers by priority. Lower values are rendered first and higher values are rendered last.
            */
            public get rendererPriority(): number;
            public set rendererPriority(value: number);
            /** Describes how this renderer is updated for ray tracing.
            */
            public get rayTracingMode(): UnityEngine.Experimental.Rendering.RayTracingMode;
            public set rayTracingMode(value: UnityEngine.Experimental.Rendering.RayTracingMode);
            /** Name of the Renderer's sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Unique ID of the Renderer's sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Renderer's order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** Controls if dynamic occlusion culling should be performed for this renderer.
            */
            public get allowOcclusionWhenDynamic(): boolean;
            public set allowOcclusionWhenDynamic(value: boolean);
            /** Indicates whether the renderer is part of a with other renderers.
            */
            public get isPartOfStaticBatch(): boolean;
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** If set, the Renderer will use the Light Probe Proxy Volume component attached to the source GameObject.
            */
            public get lightProbeProxyVolumeOverride(): UnityEngine.GameObject;
            public set lightProbeProxyVolumeOverride(value: UnityEngine.GameObject);
            /** If set, Renderer will use this Transform's position to find the light or reflection probe.
            */
            public get probeAnchor(): UnityEngine.Transform;
            public set probeAnchor(value: UnityEngine.Transform);
            /** The index of the baked lightmap applied to this renderer.
            */
            public get lightmapIndex(): number;
            public set lightmapIndex(value: number);
            /** The index of the real-time lightmap applied to this renderer.
            */
            public get realtimeLightmapIndex(): number;
            public set realtimeLightmapIndex(value: number);
            /** The UV scale & offset used for a lightmap.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The UV scale & offset used for a real-time lightmap.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
            /** Returns all the instantiated materials of this object.
            */
            public get materials(): System.Array$1<UnityEngine.Material>;
            public set materials(value: System.Array$1<UnityEngine.Material>);
            /** Returns the first instantiated Material assigned to the renderer.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The shared material of this object.
            */
            public get sharedMaterial(): UnityEngine.Material;
            public set sharedMaterial(value: UnityEngine.Material);
            /** All the shared materials of this object.
            */
            public get sharedMaterials(): System.Array$1<UnityEngine.Material>;
            public set sharedMaterials(value: System.Array$1<UnityEngine.Material>);
            /** Reset custom world space bounds.
            */
            public ResetBounds(): void
            /** Reset custom local space bounds.
            */
            public ResetLocalBounds(): void
            /** Returns true if the Renderer has a material property block attached via SetPropertyBlock.
            */
            public HasPropertyBlock(): boolean
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param $properties Property block with values you want to override.
            * @param $materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public SetPropertyBlock($properties: UnityEngine.MaterialPropertyBlock): void
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param $properties Property block with values you want to override.
            * @param $materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public SetPropertyBlock($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number): void
            /** Get per-Renderer or per-Material property block.
            * @param $properties Material parameters to retrieve.
            * @param $materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock($properties: UnityEngine.MaterialPropertyBlock): void
            /** Get per-Renderer or per-Material property block.
            * @param $properties Material parameters to retrieve.
            * @param $materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number): void
            public GetMaterials($m: System.Collections.Generic.List$1<UnityEngine.Material>): void
            public SetSharedMaterials($materials: System.Collections.Generic.List$1<UnityEngine.Material>): void
            public SetMaterials($materials: System.Collections.Generic.List$1<UnityEngine.Material>): void
            public GetSharedMaterials($m: System.Collections.Generic.List$1<UnityEngine.Material>): void
            public GetClosestReflectionProbes($result: System.Collections.Generic.List$1<UnityEngine.Rendering.ReflectionProbeBlendInfo>): void
            public constructor()
        }
        /** General functionality for all renderers.
        */
        interface Renderer {
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            UpdateGIMaterials(): void;
        }
        /** Gizmos are used to give visual debugging or setup aids in the Scene view.
        */
        class Gizmos extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Sets the Color of the gizmos that are drawn next.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Sets the Matrix4x4 that the Unity Editor uses to draw Gizmos.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** Set a texture that contains the exposure correction for LightProbe gizmos. The value is sampled from the red channel in the middle of the texture.
            */
            public static get exposure(): UnityEngine.Texture;
            public static set exposure(value: UnityEngine.Texture);
            /** Set a scale for Light Probe gizmos. This scale will be used to render the spherical harmonic preview spheres.
            */
            public static get probeSize(): number;
            /** Draws a line starting at from towards to.
            */
            public static DrawLine($from: UnityEngine.Vector3, $to: UnityEngine.Vector3): void
            /** Draws a wireframe sphere with center and radius.
            */
            public static DrawWireSphere($center: UnityEngine.Vector3, $radius: number): void
            /** Draws a solid sphere with center and radius.
            */
            public static DrawSphere($center: UnityEngine.Vector3, $radius: number): void
            /** Draw a wireframe box with center and size.
            */
            public static DrawWireCube($center: UnityEngine.Vector3, $size: UnityEngine.Vector3): void
            /** Draw a solid box at center with size.
            */
            public static DrawCube($center: UnityEngine.Vector3, $size: UnityEngine.Vector3): void
            /** Draws a mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3): void
            /** Draws a wireframe mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3): void
            /** Draw an icon at a position in the Scene view.
            * @param $center The location of the icon in world space.
            * @param $name The file name of the image relative to the Assets/Gizmos folder.
            * @param $allowScaling Whether the icon is permitted to be scaled.
            * @param $tint A tint applied to the icon. (Optional).
            */
            public static DrawIcon($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean): void
            /** Draw an icon at a position in the Scene view.
            * @param $center The location of the icon in world space.
            * @param $name The file name of the image relative to the Assets/Gizmos folder.
            * @param $allowScaling Whether the icon is permitted to be scaled.
            * @param $tint A tint applied to the icon. (Optional).
            */
            public static DrawIcon($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean, $tint: UnityEngine.Color): void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material): void
            /** Draw a camera frustum using the currently set Gizmos.matrix for its location and rotation.
            * @param $center The apex of the truncated pyramid.
            * @param $fov Vertical field of view (ie, the angle at the apex in degrees).
            * @param $maxRange Distance of the frustum's far plane.
            * @param $minRange Distance of the frustum's near plane.
            * @param $aspect Width/height ratio.
            */
            public static DrawFrustum($center: UnityEngine.Vector3, $fov: number, $maxRange: number, $minRange: number, $aspect: number): void
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay($r: UnityEngine.Ray): void
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay($from: UnityEngine.Vector3, $direction: UnityEngine.Vector3): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3): void
            public static DrawMesh($mesh: UnityEngine.Mesh): void
            /** Draws a mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $submeshIndex: number): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh): void
            /** Draws a wireframe mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3): void
            public static DrawWireMesh($mesh: UnityEngine.Mesh, $submeshIndex: number): void
            public static DrawIcon($center: UnityEngine.Vector3, $name: string): void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture): void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material): void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number): void
            public constructor()
        }
        /** A class that allows you to create or modify meshes.
        */
        class Mesh extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Format of the mesh index buffer data.
            */
            public get indexFormat(): UnityEngine.Rendering.IndexFormat;
            public set indexFormat(value: UnityEngine.Rendering.IndexFormat);
            /** Gets the number of vertex buffers present in the Mesh. (Read Only)
            */
            public get vertexBufferCount(): number;
            /** The intended target usage of the Mesh GPU vertex buffer.
            */
            public get vertexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set vertexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** The intended target usage of the Mesh GPU index buffer.
            */
            public get indexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set indexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** Returns BlendShape count on this mesh.
            */
            public get blendShapeCount(): number;
            /** The number of bindposes in the Mesh.
            */
            public get bindposeCount(): number;
            /** The bind poses. The bind pose at each index refers to the bone with the same index.
            */
            public get bindposes(): System.Array$1<UnityEngine.Matrix4x4>;
            public set bindposes(value: System.Array$1<UnityEngine.Matrix4x4>);
            /** Returns true if the Mesh is read/write enabled, or false if it is not.
            */
            public get isReadable(): boolean;
            /** Returns the number of vertices in the Mesh (Read Only).
            */
            public get vertexCount(): number;
            /** The number of sub-meshes inside the Mesh object.
            */
            public get subMeshCount(): number;
            public set subMeshCount(value: number);
            /** The bounding volume of the Mesh.
            */
            public get bounds(): UnityEngine.Bounds;
            public set bounds(value: UnityEngine.Bounds);
            /** Returns a copy of the vertex positions or assigns a new vertex positions array.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector3>;
            public set vertices(value: System.Array$1<UnityEngine.Vector3>);
            /** The normals of the Mesh.
            */
            public get normals(): System.Array$1<UnityEngine.Vector3>;
            public set normals(value: System.Array$1<UnityEngine.Vector3>);
            /** The tangents of the Mesh.
            */
            public get tangents(): System.Array$1<UnityEngine.Vector4>;
            public set tangents(value: System.Array$1<UnityEngine.Vector4>);
            /** The texture coordinates (UVs) in the first channel.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            public set uv(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the second channel.
            */
            public get uv2(): System.Array$1<UnityEngine.Vector2>;
            public set uv2(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the third channel.
            */
            public get uv3(): System.Array$1<UnityEngine.Vector2>;
            public set uv3(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the fourth channel.
            */
            public get uv4(): System.Array$1<UnityEngine.Vector2>;
            public set uv4(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the fifth channel.
            */
            public get uv5(): System.Array$1<UnityEngine.Vector2>;
            public set uv5(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the sixth channel.
            */
            public get uv6(): System.Array$1<UnityEngine.Vector2>;
            public set uv6(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the seventh channel.
            */
            public get uv7(): System.Array$1<UnityEngine.Vector2>;
            public set uv7(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the eighth channel.
            */
            public get uv8(): System.Array$1<UnityEngine.Vector2>;
            public set uv8(value: System.Array$1<UnityEngine.Vector2>);
            /** Vertex colors of the Mesh.
            */
            public get colors(): System.Array$1<UnityEngine.Color>;
            public set colors(value: System.Array$1<UnityEngine.Color>);
            /** Vertex colors of the Mesh.
            */
            public get colors32(): System.Array$1<UnityEngine.Color32>;
            public set colors32(value: System.Array$1<UnityEngine.Color32>);
            /** Returns the number of vertex attributes that the mesh has. (Read Only)
            */
            public get vertexAttributeCount(): number;
            /** An array containing all triangles in the Mesh.
            */
            public get triangles(): System.Array$1<number>;
            public set triangles(value: System.Array$1<number>);
            /** The BoneWeight for each vertex in the Mesh, which represents 4 bones per vertex.
            */
            public get boneWeights(): System.Array$1<UnityEngine.BoneWeight>;
            public set boneWeights(value: System.Array$1<UnityEngine.BoneWeight>);
            /** The dimension of data in the bone weight buffer.
            */
            public get skinWeightBufferLayout(): UnityEngine.SkinWeights;
            /** Sets the index buffer size and format.
            * @param $indexCount Size of index buffer.
            * @param $format Format of the indices.
            */
            public SetIndexBufferParams($indexCount: number, $format: UnityEngine.Rendering.IndexFormat): void
            /** Returns information about a vertex attribute based on its index.
            * @param $index The vertex attribute index (0 to vertexAttributeCount-1).
            * @returns Information about the vertex attribute. 
            */
            public GetVertexAttribute($index: number): UnityEngine.Rendering.VertexAttributeDescriptor
            /** Checks if a specific vertex data attribute exists on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Returns true if the data attribute is present in the mesh. 
            */
            public HasVertexAttribute($attr: UnityEngine.Rendering.VertexAttribute): boolean
            /** Get dimension of a specific vertex data attribute on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Dimensionality of the data attribute, or zero if it is not present. 
            */
            public GetVertexAttributeDimension($attr: UnityEngine.Rendering.VertexAttribute): number
            /** Get format of a specific vertex data attribute on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Format of the data attribute. 
            */
            public GetVertexAttributeFormat($attr: UnityEngine.Rendering.VertexAttribute): UnityEngine.Rendering.VertexAttributeFormat
            /** Gets the vertex buffer stream index of a specific vertex data attribute on this Mesh.
            * @param $attr The vertex data attribute to check for.
            * @returns Stream index of the data attribute, or -1 if it is not present. 
            */
            public GetVertexAttributeStream($attr: UnityEngine.Rendering.VertexAttribute): number
            /** Get offset within a vertex buffer stream of a specific vertex data attribute on this Mesh.
            * @param $attr The vertex data attribute to check for.
            * @returns The byte offset within a atream of the data attribute, or -1 if it is not present. 
            */
            public GetVertexAttributeOffset($attr: UnityEngine.Rendering.VertexAttribute): number
            /** Get vertex buffer stream stride in bytes.
            * @param $stream Vertex data stream index to check for.
            * @returns Vertex data size in bytes in this stream, or zero if the stream is not present. 
            */
            public GetVertexBufferStride($stream: number): number
            /** Retrieves a native (underlying graphics API) pointer to the vertex buffer.
            * @param $index Which vertex buffer to get (some Meshes might have more than one). See vertexBufferCount.
            * @returns Pointer to the underlying graphics API vertex buffer. 
            */
            public GetNativeVertexBufferPtr($index: number): System.IntPtr
            /** Retrieves a native (underlying graphics API) pointer to the index buffer.
            * @returns Pointer to the underlying graphics API index buffer. 
            */
            public GetNativeIndexBufferPtr(): System.IntPtr
            /** Clears all blend shapes from Mesh.
            */
            public ClearBlendShapes(): void
            /** Returns name of BlendShape by given index.
            */
            public GetBlendShapeName($shapeIndex: number): string
            /** Returns index of BlendShape by given name.
            */
            public GetBlendShapeIndex($blendShapeName: string): number
            /** Returns the frame count for a blend shape.
            * @param $shapeIndex The shape index to get frame count from.
            */
            public GetBlendShapeFrameCount($shapeIndex: number): number
            /** Returns the weight of a blend shape frame.
            * @param $shapeIndex The shape index of the frame.
            * @param $frameIndex The frame index to get the weight from.
            */
            public GetBlendShapeFrameWeight($shapeIndex: number, $frameIndex: number): number
            /** Retreives deltaVertices, deltaNormals and deltaTangents of a blend shape frame.
            * @param $shapeIndex The shape index of the frame.
            * @param $frameIndex The frame index to get the weight from.
            * @param $deltaVertices Delta vertices output array for the frame being retreived.
            * @param $deltaNormals Delta normals output array for the frame being retreived.
            * @param $deltaTangents Delta tangents output array for the frame being retreived.
            */
            public GetBlendShapeFrameVertices($shapeIndex: number, $frameIndex: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>): void
            /** Adds a new blend shape frame.
            * @param $shapeName Name of the blend shape to add a frame to.
            * @param $frameWeight Weight for the frame being added.
            * @param $deltaVertices Delta vertices for the frame being added.
            * @param $deltaNormals Delta normals for the frame being added.
            * @param $deltaTangents Delta tangents for the frame being added.
            */
            public AddBlendShapeFrame($shapeName: string, $frameWeight: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>): void
            public SetBoneWeights($bonesPerVertex: Unity.Collections.NativeArray$1<number>, $weights: Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>): void
            /** Gets the bone weights for the Mesh.
            * @returns Returns all non-zero bone weights for the Mesh, in vertex index order. 
            */
            public GetAllBoneWeights(): Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>
            /** The number of non-zero bone weights for each vertex.
            * @returns Returns the number of non-zero bone weights for each vertex. 
            */
            public GetBonesPerVertex(): Unity.Collections.NativeArray$1<number>
            /** Gets the bind poses of the Mesh.
            * @returns The array of bindposes belonging to the Mesh. 
            */
            public GetBindposes(): Unity.Collections.NativeArray$1<UnityEngine.Matrix4x4>
            /** Sets the information about a sub-mesh of the Mesh.
            * @param $index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @param $desc Sub-mesh data.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMesh($index: number, $desc: UnityEngine.Rendering.SubMeshDescriptor, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Get information about a sub-mesh of the Mesh.
            * @param $index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @returns Sub-mesh data. 
            */
            public GetSubMesh($index: number): UnityEngine.Rendering.SubMeshDescriptor
            /** Notify Renderer components of mesh geometry change.
            */
            public MarkModified(): void
            /** The UV distribution metric can be used to calculate the desired mipmap level based on the position of the camera.
            * @param $uvSetIndex UV set index to return the UV distibution metric for. 0 for first.
            * @returns Average of triangle area / uv area. 
            */
            public GetUVDistributionMetric($uvSetIndex: number): number
            public GetVertices($vertices: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetVertices($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetVertices($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number): void
            public SetVertices($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Assigns a new vertex positions array.
            * @param $inVertices Per-vertex positions.
            */
            public SetVertices($inVertices: System.Array$1<UnityEngine.Vector3>): void
            /** Sets the vertex positions of the Mesh, using a part of the input array.
            * @param $inVertices Per-vertex positions.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetVertices($inVertices: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number): void
            /** Sets the vertex positions of the Mesh, using a part of the input array.
            * @param $inVertices Per-vertex positions.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetVertices($inVertices: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetNormals($normals: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetNormals($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetNormals($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number): void
            public SetNormals($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Set the normals of the Mesh.
            * @param $inNormals Per-vertex normals.
            */
            public SetNormals($inNormals: System.Array$1<UnityEngine.Vector3>): void
            /** Sets the vertex normals of the Mesh, using a part of the input array.
            * @param $inNormals Per-vertex normals.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetNormals($inNormals: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number): void
            /** Sets the vertex normals of the Mesh, using a part of the input array.
            * @param $inNormals Per-vertex normals.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetNormals($inNormals: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetTangents($tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public SetTangents($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public SetTangents($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number): void
            public SetTangents($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Set the tangents of the Mesh.
            * @param $inTangents Per-vertex tangents.
            */
            public SetTangents($inTangents: System.Array$1<UnityEngine.Vector4>): void
            /** Sets the tangents of the Mesh, using a part of the input array.
            * @param $inTangents Per-vertex tangents.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetTangents($inTangents: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number): void
            /** Sets the tangents of the Mesh, using a part of the input array.
            * @param $inTangents Per-vertex tangents.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetTangents($inTangents: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetColors($colors: System.Collections.Generic.List$1<UnityEngine.Color>): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color>): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color>, $start: number, $length: number): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Set the per-vertex colors of the Mesh.
            * @param $inColors Per-vertex colors.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color>): void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color>, $start: number, $length: number): void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetColors($colors: System.Collections.Generic.List$1<UnityEngine.Color32>): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>, $start: number, $length: number): void
            public SetColors($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Set the per-vertex colors of the Mesh.
            * @param $inColors Per-vertex colors.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color32>): void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color32>, $start: number, $length: number): void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors($inColors: System.Array$1<UnityEngine.Color32>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>, $start: number, $length: number): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number): void
            public SetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>): void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>): void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>, $start: number, $length: number): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number): void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            public GetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public GetUVs($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Get information about vertex attributes of a Mesh.
            * @returns Array of vertex attribute information. 
            */
            public GetVertexAttributes(): System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>
            /** Get information about vertex attributes of a Mesh, without memory allocations.
            * @param $attributes Collection of vertex attributes to receive the results.
            * @returns The number of vertex attributes returned in the attributes container. 
            */
            public GetVertexAttributes($attributes: System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>): number
            public GetVertexAttributes($attributes: System.Collections.Generic.List$1<UnityEngine.Rendering.VertexAttributeDescriptor>): number
            /** Sets the vertex buffer size and layout.
            * @param $vertexCount The number of vertices in the Mesh.
            * @param $attributes Layout of the vertex data -- which attributes are present, their data types and so on.
            */
            public SetVertexBufferParams($vertexCount: number, ...attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]): void
            public SetVertexBufferParams($vertexCount: number, $attributes: Unity.Collections.NativeArray$1<UnityEngine.Rendering.VertexAttributeDescriptor>): void
            /** Gets a snapshot of Mesh data for read-only access.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData($mesh: UnityEngine.Mesh): UnityEngine.Mesh.MeshDataArray
            /** Gets a snapshot of Mesh data for read-only access.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData($meshes: System.Array$1<UnityEngine.Mesh>): UnityEngine.Mesh.MeshDataArray
            public static AcquireReadOnlyMeshData($meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>): UnityEngine.Mesh.MeshDataArray
            /** Allocates data structures for Mesh creation using C# Jobs.
            * @param $meshCount The amount of meshes that will be created.
            * @returns Returns a MeshDataArray containing writeable MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AllocateWritableMeshData($meshCount: number): UnityEngine.Mesh.MeshDataArray
            public static ApplyAndDisposeWritableMeshData($data: UnityEngine.Mesh.MeshDataArray, $mesh: UnityEngine.Mesh, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            public static ApplyAndDisposeWritableMeshData($data: UnityEngine.Mesh.MeshDataArray, $meshes: System.Array$1<UnityEngine.Mesh>, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            public static ApplyAndDisposeWritableMeshData($data: UnityEngine.Mesh.MeshDataArray, $meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Retrieves a GraphicsBuffer that provides direct acces to the GPU vertex buffer.
            * @param $index Vertex data stream index to get the buffer for.
            * @returns The mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetVertexBuffer($index: number): UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer to the GPU index buffer.
            * @returns The mesh index buffer as a GraphicsBuffer. 
            */
            public GetIndexBuffer(): UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU bone weight data.
            * @param $layout Which buffer to access, based on maximum bones per vertex.
            * @returns The bone weight data as a GraphicsBuffer. 
            */
            public GetBoneWeightBuffer($layout: UnityEngine.SkinWeights): UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
            * @param $layout Which buffer to access. The default value is Rendering.BlendShapeBufferLayout.PerShape.
            * @returns The blend shape vertex data as a GraphicsBuffer. 
            */
            public GetBlendShapeBuffer($layout: UnityEngine.Rendering.BlendShapeBufferLayout): UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
            * @param $layout Which buffer to access. The default value is Rendering.BlendShapeBufferLayout.PerShape.
            * @returns The blend shape vertex data as a GraphicsBuffer. 
            */
            public GetBlendShapeBuffer(): UnityEngine.GraphicsBuffer
            /** Get the location of blend shape vertex data for a given blend shape.
            * @param $blendShapeIndex Which blend shape to locate the data for.
            * @returns A struct that describes the start and end index of the data for the given blend shape. 
            */
            public GetBlendShapeBufferRange($blendShapeIndex: number): UnityEngine.BlendShapeBufferRange
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param $triangles A list of vertex indices to populate. Any existing items in the list are replaced.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles($submesh: number): System.Array$1<number>
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param $triangles A list of vertex indices to populate. Any existing items in the list are replaced.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles($submesh: number, $applyBaseVertex: boolean): System.Array$1<number>
            public GetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number): void
            public GetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean): void
            public GetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean): void
            /** Fetches the index list for the specified sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices($submesh: number): System.Array$1<number>
            /** Fetches the index list for the specified sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices($submesh: number, $applyBaseVertex: boolean): System.Array$1<number>
            public GetIndices($indices: System.Collections.Generic.List$1<number>, $submesh: number): void
            public GetIndices($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean): void
            public GetIndices($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean): void
            /** Gets the starting index location within the Mesh's index buffer, for the given sub-mesh.
            */
            public GetIndexStart($submesh: number): number
            /** Gets the index count of the given sub-mesh.
            */
            public GetIndexCount($submesh: number): number
            /** Gets the base vertex index of the given sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @returns The offset applied to all vertex indices of this sub-mesh. 
            */
            public GetBaseVertex($submesh: number): number
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles($triangles: System.Array$1<number>, $submesh: number): void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean): void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number): void
            /** Sets the triangle list of the Mesh, using a part of the input array.
            * @param $triangles The list of indices that define the triangles.
            * @param $trianglesStart Index of the first element to take from the input array.
            * @param $trianglesLength Number of elements to take from the input array.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles($triangles: System.Array$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles($triangles: System.Array$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            public SetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number): void
            public SetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean): void
            public SetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number): void
            public SetTriangles($triangles: System.Collections.Generic.List$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            public SetTriangles($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number): void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean): void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean, $baseVertex: number): void
            /** Sets the index buffer of a sub-mesh, using a part of the input array.
            * @param $indices The array of indices that define the mesh faces.
            * @param $indicesStart Index of the first element to take from the input array.
            * @param $indicesLength Number of elements to take from the input array.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices($indices: System.Array$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the indices. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            public SetIndices($indices: System.Collections.Generic.List$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            public SetIndices($indices: System.Collections.Generic.List$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number): void
            /** Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
            * @param $desc An array or list of sub-mesh data descriptors.
            * @param $start Index of the first element to take from the array or list in desc.
            * @param $count Number of elements to take from the array or list in desc.
            * @param $flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMeshes($desc: System.Array$1<UnityEngine.Rendering.SubMeshDescriptor>, $start: number, $count: number, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
            * @param $desc An array or list of sub-mesh data descriptors.
            * @param $start Index of the first element to take from the array or list in desc.
            * @param $count Number of elements to take from the array or list in desc.
            * @param $flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMeshes($desc: System.Array$1<UnityEngine.Rendering.SubMeshDescriptor>, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            public SetSubMeshes($desc: System.Collections.Generic.List$1<UnityEngine.Rendering.SubMeshDescriptor>, $start: number, $count: number, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            public SetSubMeshes($desc: System.Collections.Generic.List$1<UnityEngine.Rendering.SubMeshDescriptor>, $flags?: UnityEngine.Rendering.MeshUpdateFlags): void
            public GetBindposes($bindposes: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public GetBoneWeights($boneWeights: System.Collections.Generic.List$1<UnityEngine.BoneWeight>): void
            /** Clears all vertex data and all triangle indices.
            * @param $keepVertexLayout True if the existing Mesh data layout should be preserved.
            */
            public Clear($keepVertexLayout: boolean): void
            public Clear(): void
            public RecalculateBounds(): void
            public RecalculateNormals(): void
            public RecalculateTangents(): void
            /** Recalculate the bounding volume of the Mesh from the vertices.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateBounds($flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Recalculates the normals of the Mesh from the triangles and vertices.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateNormals($flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Recalculates the tangents of the Mesh from the normals and texture coordinates.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateTangents($flags: UnityEngine.Rendering.MeshUpdateFlags): void
            /** Recalculates the UV distribution metric of the Mesh from the vertices and uv coordinates.
            * @param $uvSetIndex The UV set index to set the UV distibution metric for. Use 0 for first index.
            * @param $uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
            */
            public RecalculateUVDistributionMetric($uvSetIndex: number, $uvAreaThreshold?: number): void
            /** Recalculates the UV distribution metrics of the Mesh from the vertices and uv coordinates.
            * @param $uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
            */
            public RecalculateUVDistributionMetrics($uvAreaThreshold?: number): void
            /** Optimize mesh for frequent updates.
            */
            public MarkDynamic(): void
            /** Upload previously done Mesh modifications to the graphics API.
            * @param $markNoLongerReadable Frees up system memory copy of mesh data when set to true.
            */
            public UploadMeshData($markNoLongerReadable: boolean): void
            /** Optimizes the Mesh data to improve rendering performance.
            */
            public Optimize(): void
            /** Optimizes the geometry of the Mesh to improve rendering performance.
            */
            public OptimizeIndexBuffers(): void
            /** Optimizes the vertices of the Mesh to improve rendering performance.
            */
            public OptimizeReorderVertexBuffer(): void
            /** Gets the topology of a sub-mesh.
            */
            public GetTopology($submesh: number): UnityEngine.MeshTopology
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean, $hasLightmapData: boolean): void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean): void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean): void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes($combine: System.Array$1<UnityEngine.CombineInstance>): void
            public constructor()
        }
        /** The material class.
        */
        class Material extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The shader used by the material.
            */
            public get shader(): UnityEngine.Shader;
            public set shader(value: UnityEngine.Shader);
            /** The main color of the Material.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The main texture.
            */
            public get mainTexture(): UnityEngine.Texture;
            public set mainTexture(value: UnityEngine.Texture);
            /** The offset of the main texture.
            */
            public get mainTextureOffset(): UnityEngine.Vector2;
            public set mainTextureOffset(value: UnityEngine.Vector2);
            /** The scale of the main texture.
            */
            public get mainTextureScale(): UnityEngine.Vector2;
            public set mainTextureScale(value: UnityEngine.Vector2);
            /** Render queue of this material.
            */
            public get renderQueue(): number;
            public set renderQueue(value: number);
            /** An array containing the local shader keywords that are currently enabled for this material.
            */
            public get enabledKeywords(): System.Array$1<UnityEngine.Rendering.LocalKeyword>;
            public set enabledKeywords(value: System.Array$1<UnityEngine.Rendering.LocalKeyword>);
            /** Defines how the material should interact with lightmaps and lightprobes.
            */
            public get globalIlluminationFlags(): UnityEngine.MaterialGlobalIlluminationFlags;
            public set globalIlluminationFlags(value: UnityEngine.MaterialGlobalIlluminationFlags);
            /** Gets and sets whether the Double Sided Global Illumination setting is enabled for this material.
            */
            public get doubleSidedGI(): boolean;
            public set doubleSidedGI(value: boolean);
            /** Gets and sets whether GPU instancing is enabled for this material.
            */
            public get enableInstancing(): boolean;
            public set enableInstancing(value: boolean);
            /** How many passes are in this material (Read Only).
            */
            public get passCount(): number;
            /** An array containing names of the local shader keywords that are currently enabled for this material.
            */
            public get shaderKeywords(): System.Array$1<string>;
            public set shaderKeywords(value: System.Array$1<string>);
            /** Checks if the ShaderLab file assigned to the Material has a property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasProperty($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasProperty($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasFloat($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasFloat($nameID: number): boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInt($name: string): boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInt($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInteger($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInteger($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasTexture($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasTexture($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasMatrix($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasMatrix($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasVector($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasVector($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasColor($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasColor($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasBuffer($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasBuffer($nameID: number): boolean
            /** Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasConstantBuffer($name: string): boolean
            /** Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasConstantBuffer($nameID: number): boolean
            /** Enables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword($keyword: string): void
            /** Disables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword($keyword: string): void
            /** Checks whether a local shader keyword is enabled for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if a Rendering.LocalKeyword with the given name is enabled  for this material. 
            */
            public IsKeywordEnabled($keyword: string): boolean
            /** Enables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): void
            /** Disables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): void
            /** Sets the state of a local shader keyword for this material.
            * @param $keyword The Rendering.LocalKeyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public SetKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $value: boolean): void
            /** Checks whether a local shader keyword is enabled for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if a Rendering.LocalKeyword with the given name is enabled  for this material. 
            */
            public IsKeywordEnabled($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): boolean
            /** Enables or disables a Shader pass on a per-Material level.
            * @param $passName Shader pass name (case insensitive).
            * @param $enabled Flag indicating whether this Shader pass should be enabled.
            */
            public SetShaderPassEnabled($passName: string, $enabled: boolean): void
            /** Checks whether a given Shader pass is enabled on this Material.
            * @param $passName Shader pass name (case insensitive).
            * @returns True if the Shader pass is enabled. 
            */
            public GetShaderPassEnabled($passName: string): boolean
            /** Returns the name of the shader pass at index pass.
            */
            public GetPassName($pass: number): string
            /** Returns the index of the pass passName.
            */
            public FindPass($passName: string): number
            /** Sets an override tag/value on the material.
            * @param $tag Name of the tag to set.
            * @param $val Name of the value to set. Empty string to clear the override flag.
            */
            public SetOverrideTag($tag: string, $val: string): void
            /** Get the value of material's shader tag.
            */
            public GetTag($tag: string, $searchFallbacks: boolean, $defaultValue: string): string
            /** Get the value of material's shader tag.
            */
            public GetTag($tag: string, $searchFallbacks: boolean): string
            /** Interpolate properties between two materials.
            */
            public Lerp($start: UnityEngine.Material, $end: UnityEngine.Material, $t: number): void
            /** Activate the given pass for rendering.
            * @param $pass Shader pass number to setup.
            * @returns If false is returned, no rendering should be done. 
            */
            public SetPass($pass: number): boolean
            /** Copy properties from other material into this material.
            */
            public CopyPropertiesFromMaterial($mat: UnityEngine.Material): void
            /** Copies properties, keyword states and settings from mat to this material, but only if they exist in both materials.
            * @param $mat The Material to copy from.
            */
            public CopyMatchingPropertiesFromMaterial($mat: UnityEngine.Material): void
            /** Computes a CRC hash value from the content of the material.
            */
            public ComputeCRC(): number
            /** Returns the names of all texture properties exposed on this material.
            * @param $outNames Names of all texture properties exposed on this material.
            * @returns Names of all texture properties exposed on this material. 
            */
            public GetTexturePropertyNames(): System.Array$1<string>
            /** Return the name IDs of all texture properties exposed on this material.
            * @param $outNames IDs of all texture properties exposed on this material.
            * @returns IDs of all texture properties exposed on this material. 
            */
            public GetTexturePropertyNameIDs(): System.Array$1<number>
            public GetTexturePropertyNames($outNames: System.Collections.Generic.List$1<string>): void
            public GetTexturePropertyNameIDs($outNames: System.Collections.Generic.List$1<number>): void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInt($name: string, $value: number): void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInt($nameID: number, $value: number): void
            /** Sets a named float value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Float value to set.
            * @param $name Property name, e.g. "_Glossiness".
            */
            public SetFloat($name: string, $value: number): void
            /** Sets a named float value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Float value to set.
            * @param $name Property name, e.g. "_Glossiness".
            */
            public SetFloat($nameID: number, $value: number): void
            /** Sets a named integer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInteger($name: string, $value: number): void
            /** Sets a named integer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInteger($nameID: number, $value: number): void
            /** Sets a color value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_Color".
            * @param $value Color value to set.
            */
            public SetColor($name: string, $value: UnityEngine.Color): void
            /** Sets a color value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_Color".
            * @param $value Color value to set.
            */
            public SetColor($nameID: number, $value: UnityEngine.Color): void
            /** Sets a named vector value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_WaveAndDistance".
            * @param $value Vector value to set.
            */
            public SetVector($name: string, $value: UnityEngine.Vector4): void
            /** Sets a named vector value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_WaveAndDistance".
            * @param $value Vector value to set.
            */
            public SetVector($nameID: number, $value: UnityEngine.Vector4): void
            /** Sets a named matrix for the shader.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_CubemapRotation".
            * @param $value Matrix value to set.
            */
            public SetMatrix($name: string, $value: UnityEngine.Matrix4x4): void
            /** Sets a named matrix for the shader.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_CubemapRotation".
            * @param $value Matrix value to set.
            */
            public SetMatrix($nameID: number, $value: UnityEngine.Matrix4x4): void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($name: string, $value: UnityEngine.Texture): void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($nameID: number, $value: UnityEngine.Texture): void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer($name: string, $value: UnityEngine.ComputeBuffer): void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer($nameID: number, $value: UnityEngine.ComputeBuffer): void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer($name: string, $value: UnityEngine.GraphicsBuffer): void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            public SetFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public SetFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            /** Sets a float array property.
            * @param $name Property name.
            * @param $nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param $values Array of values to set.
            */
            public SetFloatArray($name: string, $values: System.Array$1<number>): void
            /** Sets a float array property.
            * @param $name Property name.
            * @param $nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param $values Array of values to set.
            */
            public SetFloatArray($nameID: number, $values: System.Array$1<number>): void
            public SetColorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>): void
            public SetColorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>): void
            /** Sets a color array property.
            * @param $name Property name.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Array of values to set.
            */
            public SetColorArray($name: string, $values: System.Array$1<UnityEngine.Color>): void
            /** Sets a color array property.
            * @param $name Property name.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Array of values to set.
            */
            public SetColorArray($nameID: number, $values: System.Array$1<UnityEngine.Color>): void
            public SetVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public SetVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Sets a vector array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray($name: string, $values: System.Array$1<UnityEngine.Vector4>): void
            /** Sets a vector array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray($nameID: number, $values: System.Array$1<UnityEngine.Vector4>): void
            public SetMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public SetMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            /** Sets a matrix array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Sets a matrix array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt($name: string): number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt($nameID: number): number
            /** Get a named float value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat($name: string): number
            /** Get a named float value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat($nameID: number): number
            /** Get a named integer value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger($name: string): number
            /** Get a named integer value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger($nameID: number): number
            /** Get a named color value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor($name: string): UnityEngine.Color
            /** Get a named color value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor($nameID: number): UnityEngine.Color
            /** Get a named vector value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector($name: string): UnityEngine.Vector4
            /** Get a named vector value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector($nameID: number): UnityEngine.Vector4
            /** Get a named matrix value from the shader.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix($name: string): UnityEngine.Matrix4x4
            /** Get a named matrix value from the shader.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix($nameID: number): UnityEngine.Matrix4x4
            /** Get a named texture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture($name: string): UnityEngine.Texture
            /** Get a named texture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture($nameID: number): UnityEngine.Texture
            /** Get a named Graphics Buffer value.
            * @param $name The name of the graphics buffer resource property to return.
            * @returns Returns the handle of the graphics buffer resource property. 
            */
            public GetBuffer($name: string): UnityEngine.GraphicsBufferHandle
            /** Get a named Constant Buffer value.
            * @param $name The name of the constant buffer property to return.
            * @returns Returns the handle of the constant buffer graphics resource. 
            */
            public GetConstantBuffer($name: string): UnityEngine.GraphicsBufferHandle
            /** Get a named float array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray($name: string): System.Array$1<number>
            /** Get a named float array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray($nameID: number): System.Array$1<number>
            /** Get a named color array.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColorArray($name: string): System.Array$1<UnityEngine.Color>
            /** Get a named color array.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColorArray($nameID: number): System.Array$1<UnityEngine.Color>
            /** Get a named vector array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray($name: string): System.Array$1<UnityEngine.Vector4>
            /** Get a named vector array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray($nameID: number): System.Array$1<UnityEngine.Vector4>
            /** Get a named matrix array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray($name: string): System.Array$1<UnityEngine.Matrix4x4>
            /** Get a named matrix array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray($nameID: number): System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public GetFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            public GetColorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>): void
            public GetColorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>): void
            public GetVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public GetVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public GetMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public GetMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            /** Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name The name of the texture property as defined in the shader. For example: "_MainTex".
            * @param $value Texture placement offset.
            */
            public SetTextureOffset($name: string, $value: UnityEngine.Vector2): void
            /** Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name The name of the texture property as defined in the shader. For example: "_MainTex".
            * @param $value Texture placement offset.
            */
            public SetTextureOffset($nameID: number, $value: UnityEngine.Vector2): void
            /** Sets the placement scale of texture propertyName.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture placement scale.
            */
            public SetTextureScale($name: string, $value: UnityEngine.Vector2): void
            /** Sets the placement scale of texture propertyName.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture placement scale.
            */
            public SetTextureScale($nameID: number, $value: UnityEngine.Vector2): void
            /** Gets the placement offset of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureOffset($name: string): UnityEngine.Vector2
            /** Gets the placement offset of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureOffset($nameID: number): UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureScale($name: string): UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureScale($nameID: number): UnityEngine.Vector2
            /** Retrieves a list of the named properties in the material that match the input property type.
            * @param $type The type to use to query the material for named properties.
            */
            public GetPropertyNames($type: UnityEngine.MaterialPropertyType): System.Array$1<string>
            public constructor($shader: UnityEngine.Shader)
            public constructor($source: UnityEngine.Material)
            public constructor()
        }
        /** Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender.
        */
        class BeforeRenderOrderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The order, lowest to highest, that the Application.onBeforeRender event recievers will be called in.
            */
            public get order(): number;
            public constructor($order: number)
            public constructor()
        }
        /** BillboardAsset describes how a billboard is rendered.
        */
        class BillboardAsset extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Width of the billboard.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the billboard.
            */
            public get height(): number;
            public set height(value: number);
            /** Height of the billboard that is below ground.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Number of pre-rendered images that can be switched when the billboard is viewed from different angles.
            */
            public get imageCount(): number;
            /** Number of vertices in the billboard mesh.
            */
            public get vertexCount(): number;
            /** Number of indices in the billboard mesh.
            */
            public get indexCount(): number;
            /** The material used for rendering.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public GetImageTexCoords($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Get the array of billboard image texture coordinate data.
            * @param $imageTexCoords The list that receives the array.
            */
            public GetImageTexCoords(): System.Array$1<UnityEngine.Vector4>
            public SetImageTexCoords($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Set the array of billboard image texture coordinate data.
            * @param $imageTexCoords The array of data to set.
            */
            public SetImageTexCoords($imageTexCoords: System.Array$1<UnityEngine.Vector4>): void
            public GetVertices($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            /** Get the vertices of the billboard mesh.
            * @param $vertices The list that receives the array.
            */
            public GetVertices(): System.Array$1<UnityEngine.Vector2>
            public SetVertices($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            /** Set the vertices of the billboard mesh.
            * @param $vertices The array of data to set.
            */
            public SetVertices($vertices: System.Array$1<UnityEngine.Vector2>): void
            public GetIndices($indices: System.Collections.Generic.List$1<number>): void
            /** Get the indices of the billboard mesh.
            * @param $indices The list that receives the array.
            */
            public GetIndices(): System.Array$1<number>
            public SetIndices($indices: System.Collections.Generic.List$1<number>): void
            /** Set the indices of the billboard mesh.
            * @param $indices The array of data to set.
            */
            public SetIndices($indices: System.Array$1<number>): void
            public constructor()
        }
        /** Renders a billboard from a BillboardAsset.
        */
        class BillboardRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** The BillboardAsset to render.
            */
            public get billboard(): UnityEngine.BillboardAsset;
            public set billboard(value: UnityEngine.BillboardAsset);
            public constructor()
        }
        /** Custom Render Texture Manager.
        */
        class CustomRenderTextureManager extends System.Object {
            protected [__keep_incompatibility]: never;
            public static add_textureLoaded($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
            public static remove_textureLoaded($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
            public static add_textureUnloaded($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
            public static remove_textureUnloaded($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
            public static GetAllCustomRenderTextures($currentCustomRenderTextures: System.Collections.Generic.List$1<UnityEngine.CustomRenderTexture>): void
            public static add_updateTriggered($value: System.Action$2<UnityEngine.CustomRenderTexture, number>): void
            public static remove_updateTriggered($value: System.Action$2<UnityEngine.CustomRenderTexture, number>): void
            public static add_initializeTriggered($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
            public static remove_initializeTriggered($value: System.Action$1<UnityEngine.CustomRenderTexture>): void
        }
        /** Custom Render Textures are an extension to Render Textures that allow you to render directly to the Texture using a Shader.
        */
        class CustomRenderTexture extends UnityEngine.RenderTexture {
            protected [__keep_incompatibility]: never;
            /** The Material that Unity uses to initialize the content of a Custom Render Texture.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The Material that Unity uses to initialize a Custom Render Texture. Initialization texture and color are ignored if you have set this parameter.
            */
            public get initializationMaterial(): UnityEngine.Material;
            public set initializationMaterial(value: UnityEngine.Material);
            /** The Texture that Unity uses to initialize a Custom Render Texture, multiplied by the initialization color. Unity ignores this parameter if an initializationMaterial is set.
            */
            public get initializationTexture(): UnityEngine.Texture;
            public set initializationTexture(value: UnityEngine.Texture);
            /** Determine if Unity initializes the Custom Render Texture with a Texture and a Color or a Material.
            */
            public get initializationSource(): UnityEngine.CustomRenderTextureInitializationSource;
            public set initializationSource(value: UnityEngine.CustomRenderTextureInitializationSource);
            /** The color that Unity uses to initialize a Custom Render Texture. Unity ignores this parameter if an initializationMaterial is set.
            */
            public get initializationColor(): UnityEngine.Color;
            public set initializationColor(value: UnityEngine.Color);
            /** Determine how Unity updates the Custom Render Texture.
            */
            public get updateMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set updateMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** Determine how Unity initializes a texture.
            */
            public get initializationMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set initializationMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** The space in which Unity expresses update zones. You can set this to Normalized or Pixel space.
            */
            public get updateZoneSpace(): UnityEngine.CustomRenderTextureUpdateZoneSpace;
            public set updateZoneSpace(value: UnityEngine.CustomRenderTextureUpdateZoneSpace);
            /** The Shader Pass Unity uses to update the Custom Render Texture.
            */
            public get shaderPass(): number;
            public set shaderPass(value: number);
            /** The bit field that you can use to enable or disable update on each of the cubemap faces. The bit order from least to most significant bit is as follows: +X, -X, +Y, -Y, +Z, -Z.
            */
            public get cubemapFaceMask(): number;
            public set cubemapFaceMask(value: number);
            /** When this parameter is set to true, Unity double-buffers the Custom Render Texture so that you can access it during its own update.
            */
            public get doubleBuffered(): boolean;
            public set doubleBuffered(value: boolean);
            /** When this parameter is set to true, Unity wraps Update zones around the border of the Custom Render Texture. Otherwise, Unity clamps Update zones at the border of the Custom Render Texture.
            */
            public get wrapUpdateZones(): boolean;
            public set wrapUpdateZones(value: boolean);
            /** The period in seconds that Unity updates real-time Custom Render Textures. A value of 0.0 means Unity updates real-time Custom Render Textures every frame.
            */
            public get updatePeriod(): number;
            public set updatePeriod(value: number);
            /** Triggers an update of the Custom Render Texture.
            * @param $count Number of upate pass to perform. The default value of this count parameter is 1.
            */
            public Update($count: number): void
            public Update(): void
            /** Initializes the Custom Render Texture at the start of the next frame. Unity calls Initialise() before CustomRenderTexture.Update.
            */
            public Initialize(): void
            /** Clear all Update Zones.
            */
            public ClearUpdateZones(): void
            public GetUpdateZones($updateZones: System.Collections.Generic.List$1<UnityEngine.CustomRenderTextureUpdateZone>): void
            /** Gets the Render Texture that this Custom Render Texture uses for double buffering.
            * @returns If CustomRenderTexture. doubleBuffered is true, this returns the Render Texture that this Custom Render Texture uses for double buffering. If CustomRenderTexture. doubleBuffered is false, this returns null. 
            */
            public GetDoubleBufferRenderTexture(): UnityEngine.RenderTexture
            /** Updates the internal Render Texture that a Custom Render Texture uses for double buffering, so that it matches the size and format of the Custom Render Texture.
            */
            public EnsureDoubleBufferConsistency(): void
            /** Setup the list of Update Zones for the Custom Render Texture.
            */
            public SetUpdateZones($updateZones: System.Array$1<UnityEngine.CustomRenderTextureUpdateZone>): void
            public constructor($width: number, $height: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor($width: number, $height: number, $format: UnityEngine.RenderTextureFormat)
            public constructor($width: number, $height: number)
            public constructor($width: number, $height: number, $defaultFormat: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor($desc: UnityEngine.RenderTextureDescriptor)
            public constructor($textureToCopy: UnityEngine.RenderTexture)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor($width: number, $height: number, $depth: number)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor()
        }
        /** Provides access to a display / screen for rendering operations.
        */
        class Display extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The list of connected displays.
            */
            public static displays: System.Array$1<UnityEngine.Display>
            /** Horizontal resolution that the display is rendering at in the viewport.
            */
            public get renderingWidth(): number;
            /** Vertical resolution that the display is rendering at.
            */
            public get renderingHeight(): number;
            /** Horizontal native display resolution.
            */
            public get systemWidth(): number;
            /** Vertical native display resolution.
            */
            public get systemHeight(): number;
            /** Color RenderBuffer.
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth RenderBuffer.
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** Gets the state of the display and returns true if the display is active and false if otherwise.
            */
            public get active(): boolean;
            /** True when the back buffer requires an intermediate texture to render.
            */
            public get requiresBlitToBackbuffer(): boolean;
            /** True when doing a blit to the back buffer requires manual color space conversion.
            */
            public get requiresSrgbBlitToBackbuffer(): boolean;
            /** Main Display.
            */
            public static get main(): UnityEngine.Display;
            /** Get the Editors active GameView display target.
            */
            public static get activeEditorGameViewTarget(): number;
            /** Activates an external display. For example, a secondary monitor connected to the system.
            */
            public Activate(): void
            /** Windows platforms only. Activates an external display with a specific width, height and refresh rate. For example, a secondary monitor connected to the system.
            * @param $width Windows platforms only. Width of the window to open.
            * @param $height Windows platforms only. Height of the window to open.
            * @param $refreshRate Refresh Rate of the window to open.
            */
            public Activate($width: number, $height: number, $refreshRate: UnityEngine.RefreshRate): void
            /** Windows platforms only. Sets rendering size and position on screen.
            * @param $width Windows platforms only. The width of the window.
            * @param $height Windows platforms only. The height of the window.
            * @param $x Windows platforms only. The x position of the window.
            * @param $y Windows platforms only. The y position of the window.
            */
            public SetParams($width: number, $height: number, $x: number, $y: number): void
            /** Sets rendering resolution for the display.
            * @param $w The rendering width in pixels.
            * @param $h The rendering height in pixels.
            */
            public SetRenderingResolution($w: number, $h: number): void
            /** Query relative mouse coordinates.
            * @param $inputMouseCoordinates Mouse Input Position as Coordinates.
            */
            public static RelativeMouseAt($inputMouseCoordinates: UnityEngine.Vector3): UnityEngine.Vector3
            public static add_onDisplaysUpdated($value: UnityEngine.Display.DisplaysUpdatedDelegate): void
            public static remove_onDisplaysUpdated($value: UnityEngine.Display.DisplaysUpdatedDelegate): void
        }
        /** Represents the display refresh rate. This is how many frames the display can show per second.
        */
        class RefreshRate extends System.ValueType implements System.IComparable$1<UnityEngine.RefreshRate>, System.IEquatable$1<UnityEngine.RefreshRate> {
            protected [__keep_incompatibility]: never;
        }
        /** Constants for special values of Screen.sleepTimeout.
        */
        class SleepTimeout extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Prevent screen dimming.
            */
            public static NeverSleep: number
            /** Set the sleep timeout to whatever the user has specified in the system settings.
            */
            public static SystemSetting: number
            public constructor()
        }
        /** Provides access to display information.
        */
        class Screen extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The current width of the screen window in pixels (Read Only).
            */
            public static get width(): number;
            /** The current height of the screen window in pixels (Read Only).
            */
            public static get height(): number;
            /** The current DPI of the screen / device (Read Only).
            */
            public static get dpi(): number;
            /** The current screen resolution (Read Only).
            */
            public static get currentResolution(): UnityEngine.Resolution;
            /** Returns all full-screen resolutions that the monitor supports (Read Only).
            */
            public static get resolutions(): System.Array$1<UnityEngine.Resolution>;
            /** Enables full-screen mode for the application.
            */
            public static get fullScreen(): boolean;
            public static set fullScreen(value: boolean);
            /** Set this property to one of the values in FullScreenMode to change the display mode of your application.
            */
            public static get fullScreenMode(): UnityEngine.FullScreenMode;
            public static set fullScreenMode(value: UnityEngine.FullScreenMode);
            /** Returns the safe area of the screen in pixels (Read Only).
            */
            public static get safeArea(): UnityEngine.Rect;
            /** Returns a list of screen areas that are not functional for displaying content (Read Only).
            */
            public static get cutouts(): System.Array$1<UnityEngine.Rect>;
            /** Enables auto-rotation to portrait.
            */
            public static get autorotateToPortrait(): boolean;
            public static set autorotateToPortrait(value: boolean);
            /** Enables auto-rotation to portrait, upside down.
            */
            public static get autorotateToPortraitUpsideDown(): boolean;
            public static set autorotateToPortraitUpsideDown(value: boolean);
            /** Enables auto-rotation to landscape left.
            */
            public static get autorotateToLandscapeLeft(): boolean;
            public static set autorotateToLandscapeLeft(value: boolean);
            /** Enables auto-rotation to landscape right.
            */
            public static get autorotateToLandscapeRight(): boolean;
            public static set autorotateToLandscapeRight(value: boolean);
            /** Specifies logical orientation of the screen.
            */
            public static get orientation(): UnityEngine.ScreenOrientation;
            public static set orientation(value: UnityEngine.ScreenOrientation);
            /** A power saving setting, allowing the screen to dim some time after the last active user interaction.
            */
            public static get sleepTimeout(): number;
            public static set sleepTimeout(value: number);
            /** Indicates the current brightness of the screen.
            */
            public static get brightness(): number;
            public static set brightness(value: number);
            /** The position of the top left corner of the main window relative to the top left corner of the display.
            */
            public static get mainWindowPosition(): UnityEngine.Vector2Int;
            /** The display information associated with the display that the main application window is on.
            */
            public static get mainWindowDisplayInfo(): UnityEngine.DisplayInfo;
            /** Switches the screen resolution.
            */
            public static SetResolution($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode, $preferredRefreshRate: UnityEngine.RefreshRate): void
            /** Switches the screen resolution.
            */
            public static SetResolution($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode): void
            /** Switches the screen resolution.
            */
            public static SetResolution($width: number, $height: number, $fullscreen: boolean): void
            public static GetDisplayLayout($displayLayout: System.Collections.Generic.List$1<UnityEngine.DisplayInfo>): void
            /** Moves the main window to the specified position relative to the top left corner of the specified display. Position value is represented in pixels. Moving the window is an asynchronous operation, which can take multiple frames.
            * @param $display The target display where the window should move to.
            * @param $position The position the window moves to. Relative to the top left corner of the specified display in pixels.
            * @returns Returns AsyncOperation that represents moving the window. 
            */
            public static MoveMainWindowTo($display: $Ref<UnityEngine.DisplayInfo>, $position: UnityEngine.Vector2Int): UnityEngine.AsyncOperation
            public constructor()
        }
        /** Represents a display resolution.
        */
        class Resolution extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Sets the full-screen mode. For information on platform compatibility, refer to the description of each mode.
        */
        enum FullScreenMode { ExclusiveFullScreen = 0, FullScreenWindow = 1, MaximizedWindow = 2, Windowed = 3 }
        /** Describes screen orientation.
        */
        enum ScreenOrientation { Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Unknown = 0, Landscape = 3 }
        /** Representation of 2D vectors and points using integers.
        */
        class Vector2Int extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector2Int> {
            protected [__keep_incompatibility]: never;
        }
        /** Represents a connected display.
        */
        class DisplayInfo extends System.ValueType implements System.IEquatable$1<UnityEngine.DisplayInfo> {
            protected [__keep_incompatibility]: never;
        }
        /** Raw interface to Unity's drawing functions.
        */
        class Graphics extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns the currently active color gamut.
            */
            public static get activeColorGamut(): UnityEngine.ColorGamut;
            /** The GraphicsTier for the current device.
            */
            public static get activeTier(): UnityEngine.Rendering.GraphicsTier;
            public static set activeTier(value: UnityEngine.Rendering.GraphicsTier);
            /** True when rendering over native UI is enabled in Player Settings (readonly).
            */
            public static get preserveFramebufferAlpha(): boolean;
            /** The minimum OpenGL ES version. The value is specified in PlayerSettings.
            */
            public static get minOpenGLESVersion(): UnityEngine.Rendering.OpenGLESVersion;
            /** Currently active color buffer (Read Only).
            */
            public static get activeColorBuffer(): UnityEngine.RenderBuffer;
            /** Currently active depth/stencil buffer (Read Only).
            */
            public static get activeDepthBuffer(): UnityEngine.RenderBuffer;
            /** Unset random write targets for level pixel shaders.
            */
            public static ClearRandomWriteTargets(): void
            /** Execute a command buffer.
            * @param $buffer The buffer to execute.
            */
            public static ExecuteCommandBuffer($buffer: UnityEngine.Rendering.CommandBuffer): void
            /** Executes a command buffer on an async compute queue with the queue selected based on the ComputeQueueType parameter passed.
            * @param $buffer The CommandBuffer to be executed.
            * @param $queueType Describes the desired async compute queue the supplied CommandBuffer should be executed on.
            */
            public static ExecuteCommandBufferAsync($buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType): void
            /** Sets current render target.
            * @param $rt RenderTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number): void
            /** Sets current render target.
            * @param $rt RenderTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number): void
            /** Sets current render target.
            * @param $rt RenderTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget($colorBuffers: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer): void
            /** Sets current render target.
            * @param $rt RenderTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget($setup: UnityEngine.RenderTargetSetup): void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget($index: number, $uav: UnityEngine.RenderTexture): void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget($index: number, $uav: UnityEngine.ComputeBuffer, $preserveCounterValue: boolean): void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget($index: number, $uav: UnityEngine.GraphicsBuffer, $preserveCounterValue: boolean): void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture($src: UnityEngine.Texture, $dst: UnityEngine.Texture): void
            public static CopyTexture($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number): void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number): void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $srcX: number, $srcY: number, $srcWidth: number, $srcHeight: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number, $dstX: number, $dstY: number): void
            /** Copies the pixel data from one texture, converts the data into a different format, and copies it into another texture.
            * @param $src The source texture. The texture must be a Texture2D or Cubemap.
            * @param $dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
            * @param $srcElement The element in the source texture to copy from. Use CubemapFace if src is a Cubemap. Set the value to 0 if src is a 2D texture.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @returns true if the method succeeded. 
            */
            public static ConvertTexture($src: UnityEngine.Texture, $dst: UnityEngine.Texture): boolean
            /** Copies the pixel data from one texture, converts the data into a different format, and copies it into another texture.
            * @param $src The source texture. The texture must be a Texture2D or Cubemap.
            * @param $dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
            * @param $srcElement The element in the source texture to copy from. Use CubemapFace if src is a Cubemap. Set the value to 0 if src is a 2D texture.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @returns true if the method succeeded. 
            */
            public static ConvertTexture($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number): boolean
            /** Shortcut for calling Graphics.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateAsyncGraphicsFence($stage: UnityEngine.Rendering.SynchronisationStage): UnityEngine.Rendering.GraphicsFence
            /** Shortcut for calling Graphics.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateAsyncGraphicsFence(): UnityEngine.Rendering.GraphicsFence
            /** Creates a GraphicsFence.
            * @param $fenceType The Rendering.GraphicsFenceType to create. Currently the only supported value is Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateGraphicsFence($fenceType: UnityEngine.Rendering.GraphicsFenceType, $stage: UnityEngine.Rendering.SynchronisationStageFlags): UnityEngine.Rendering.GraphicsFence
            /** Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
            * @param $fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to wait for.
            */
            public static WaitOnAsyncGraphicsFence($fence: UnityEngine.Rendering.GraphicsFence): void
            /** Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
            * @param $fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to wait for.
            */
            public static WaitOnAsyncGraphicsFence($fence: UnityEngine.Rendering.GraphicsFence, $stage: UnityEngine.Rendering.SynchronisationStage): void
            /** Copies the contents of one GraphicsBuffer into another.
            * @param $source The source buffer.
            * @param $dest The destination buffer.
            */
            public static CopyBuffer($source: UnityEngine.GraphicsBuffer, $dest: UnityEngine.GraphicsBuffer): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material, $pass: number): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number): void
            public static RenderMesh($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $submeshIndex: number, $objectToWorld: UnityEngine.Matrix4x4, $prevObjectToWorld?: UnityEngine.Matrix4x4 | null): void
            /** Renders multiple instances of a mesh using GPU instancing and rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the mesh.
            * @param $mesh The Mesh to render.
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawIndexedArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderMeshIndirect($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number): void
            /** Renders multiple instances of a Mesh using GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the Mesh primitives.
            * @param $mesh The Mesh to render.
            * @param $submeshIndex The index of a submesh Unity renders when the Mesh contains multiple Materials (submeshes). For a Mesh with a single Material, use value 0.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderMeshPrimitives($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $submeshIndex: number, $instanceCount?: number): void
            /** Renders non-indexed primitives with GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $vertexCount The number of vertices per instance.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderPrimitives($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number): void
            /** Renders indexed primitives with GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $indexBuffer The index buffer for the rendered primitives.
            * @param $indexCount The number of indices per instance.
            * @param $startIndex The first index in the indexBuffer.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderPrimitivesIndexed($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $startIndex?: number, $instanceCount?: number): void
            /** Renders primitives with GPU instancing and a custom shader using rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderPrimitivesIndirect($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number): void
            /** Renders indexed primitives with GPU instancing and a custom shader with rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $indexBuffer Index buffer for the rendered primitives.
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawIndexedArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderPrimitivesIndexedIndirect($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number): void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $materialIndex: number): void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $materialIndex: number): void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void
            /** Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $matrices The array of object transformation matrices.
            * @param $count The number of instances to be drawn.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the Meshes should cast shadows.
            * @param $receiveShadows Determines whether the Meshes should receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void
            /** This function is now obsolete. Use Graphics.RenderMeshPrimitives instead. Draws the same mesh multiple times using GPU instancing.
            This is similar to Graphics.DrawMeshInstancedIndirect, except that when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $count The number of instances to be drawn.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the Meshes should cast shadows.
            * @param $receiveShadows Determines whether the Meshes should receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedProcedural($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $count: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume?: UnityEngine.LightProbeProxyVolume): void
            /** This function is now obsolete. Use Graphics.RenderMeshIndirect instead. Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedIndirect($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void
            /** This function is now obsolete. Use Graphics.RenderMeshIndirect instead. Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedIndirect($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $vertexCount Vertex count to render.
            * @param $instanceCount Instance count to render.
            */
            public static DrawProceduralNow($topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexCount Index count to render.
            * @param $instanceCount Instance count to render.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            */
            public static DrawProceduralNow($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow($topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow($topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number): void
            /** This function is now obsolete. For non-indexed rendering, use Graphics.RenderPrimitives instead.
            For indexed rendering, use Graphics.RenderPrimitivesIndexed. Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $vertexCount Vertex count to render.
            * @param $instanceCount Instance count to render.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProcedural($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Draws procedural geometry on the GPU, with an index buffer.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $instanceCount Instance count to render.
            * @param $indexCount Index count to render.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProcedural($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $sourceDepthSlice: number, $destDepthSlice: number): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2, $sourceDepthSlice: number, $destDepthSlice: number): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number): void
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number): void
            public static Blit($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number): void
            /** Uses a shader to copy the pixel data from a texture into a render texture.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number): void
            public static Blit($source: UnityEngine.Texture, $mat: UnityEngine.Material): void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, ...offsets: UnityEngine.Vector2[]): void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $destDepthSlice: number, ...offsets: UnityEngine.Vector2[]): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean): void
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean): void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera): void
            public static DrawMeshInstanced($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage): void
            public static DrawMeshInstancedIndirect($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage): void
            public static DrawMeshInstancedIndirect($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material): void
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material): void
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material): void
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number): void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. Unity passes the texture into the shader as _MainTex. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material): void
            public static DrawTexture($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture): void
            public static SetRenderTarget($rt: UnityEngine.RenderTexture): void
            public static SetRenderTarget($rt: UnityEngine.RenderTexture, $mipLevel: number): void
            public static SetRenderTarget($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace): void
            public static SetRenderTarget($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer): void
            public static SetRenderTarget($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number): void
            public static SetRenderTarget($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace): void
            public static SetRandomWriteTarget($index: number, $uav: UnityEngine.ComputeBuffer): void
            public static SetRandomWriteTarget($index: number, $uav: UnityEngine.GraphicsBuffer): void
            public constructor()
        }
        /** Represents a color gamut.
        */
        enum ColorGamut { sRGB = 0, Rec709 = 1, Rec2020 = 2, DisplayP3 = 3, HDR10 = 4, DolbyHDR = 5, P3D65G22 = 6 }
        /** Cubemap face.
        */
        enum CubemapFace { Unknown = -1, PositiveX = 0, NegativeX = 1, PositiveY = 2, NegativeY = 3, PositiveZ = 4, NegativeZ = 5 }
        /** Fully describes setup of RenderTarget.
        */
        class RenderTargetSetup extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** GPU data buffer, mostly for use with compute shaders.
        */
        class ComputeBuffer extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer in bytes (Read Only).
            */
            public get stride(): number;
            public set name(value: string);
            public Dispose(): void
            /** Release a Compute Buffer.
            */
            public Release(): void
            /** Returns true if this compute buffer is valid and false otherwise.
            */
            public IsValid(): boolean
            /** Set the buffer with values from an array.
            * @param $data Array of values to fill the buffer.
            */
            public SetData($data: System.Array): void
            /** Partial copy of data values from an array into the buffer.
            * @param $data Array of values to fill the buffer.
            * @param $managedBufferStartIndex The first element index in data to copy to the compute buffer.
            * @param $computeBufferStartIndex The first element index in compute buffer to receive the data.
            * @param $count The number of elements to copy.
            */
            public SetData($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number): void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            */
            public GetData($data: System.Array): void
            /** Partial read of data values from the buffer into an array.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the compute buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number): void
            /** Sets counter value of append/consume buffer.
            * @param $counterValue Value of the append/consume counter.
            */
            public SetCounterValue($counterValue: number): void
            /** Copy counter value of append/consume buffer into another buffer.
            * @param $src Append/consume buffer to copy the counter from.
            * @param $dst A buffer to copy the counter to.
            * @param $dstOffsetBytes Target byte offset in dst.
            */
            public static CopyCount($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number): void
            /** Retrieve a native (underlying graphics API) pointer to the buffer.
            * @returns Pointer to the underlying graphics API buffer. 
            */
            public GetNativeBufferPtr(): System.IntPtr
            public constructor($count: number, $stride: number)
            public constructor($count: number, $stride: number, $type: UnityEngine.ComputeBufferType)
            public constructor($count: number, $stride: number, $type: UnityEngine.ComputeBufferType, $usage: UnityEngine.ComputeBufferMode)
            public constructor()
        }
        /** GPU graphics data buffer, for working with geometry or compute shader data.
        */
        class GraphicsBuffer extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer. For index buffers, this must be either 2 or 4 bytes (Read Only).
            */
            public get stride(): number;
            /** Target, which specifies the intended target(s) of this GraphicsBuffer (Read Only).
            */
            public get target(): UnityEngine.GraphicsBuffer.Target;
            /** The flags that specify how this GraphicsBuffer can be used or updated (Read Only).
            */
            public get usageFlags(): UnityEngine.GraphicsBuffer.UsageFlags;
            /** The internal handle of this GraphicsBuffer. Only valid until the buffer is disposed of. (Read Only)
            */
            public get bufferHandle(): UnityEngine.GraphicsBufferHandle;
            public set name(value: string);
            public Dispose(): void
            /** Release a Graphics Buffer.
            */
            public Release(): void
            /** Returns true if this graphics buffer is valid, or false otherwise.
            */
            public IsValid(): boolean
            /** Set the buffer with values from an array.
            * @param $data Array of values to fill the buffer.
            */
            public SetData($data: System.Array): void
            /** Partial copy of data values from an array into the buffer.
            * @param $data Array of values to fill the buffer.
            * @param $managedBufferStartIndex The first element index in data to copy to the graphics buffer.
            * @param $count The number of elements to copy.
            * @param $graphicsBufferStartIndex The first element index in the graphics buffer to receive the data.
            */
            public SetData($data: System.Array, $managedBufferStartIndex: number, $graphicsBufferStartIndex: number, $count: number): void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData($data: System.Array): void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number): void
            /** Retrieve a native (underlying graphics API) pointer to the buffer.
            * @returns Pointer to the underlying graphics API buffer. 
            */
            public GetNativeBufferPtr(): System.IntPtr
            /** Sets counter value of append/consume buffer.
            * @param $counterValue Value of the append/consume counter.
            */
            public SetCounterValue($counterValue: number): void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number): void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount($src: UnityEngine.GraphicsBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number): void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.GraphicsBuffer, $dstOffsetBytes: number): void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount($src: UnityEngine.GraphicsBuffer, $dst: UnityEngine.GraphicsBuffer, $dstOffsetBytes: number): void
            public constructor($target: UnityEngine.GraphicsBuffer.Target, $count: number, $stride: number)
            public constructor($target: UnityEngine.GraphicsBuffer.Target, $usageFlags: UnityEngine.GraphicsBuffer.UsageFlags, $count: number, $stride: number)
            public constructor()
        }
        /** Rendering parameters used by various rendering functions.
        */
        class RenderParams extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Topology of Mesh faces.
        */
        enum MeshTopology { Triangles = 0, Quads = 2, Lines = 3, LineStrip = 4, Points = 5 }
        /** A block of material values to apply.
        */
        class MaterialPropertyBlock extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Is the material property block empty? (Read Only)
            */
            public get isEmpty(): boolean;
            /** Clear material property values.
            */
            public Clear(): void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The int value to set.
            */
            public SetInt($name: string, $value: number): void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The int value to set.
            */
            public SetInt($nameID: number, $value: number): void
            /** Set a float property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The float value to set.
            */
            public SetFloat($name: string, $value: number): void
            /** Set a float property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The float value to set.
            */
            public SetFloat($nameID: number, $value: number): void
            /** Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The integer value to set.
            */
            public SetInteger($name: string, $value: number): void
            /** Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The integer value to set.
            */
            public SetInteger($nameID: number, $value: number): void
            /** Set a vector property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Vector4 value to set.
            */
            public SetVector($name: string, $value: UnityEngine.Vector4): void
            /** Set a vector property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Vector4 value to set.
            */
            public SetVector($nameID: number, $value: UnityEngine.Vector4): void
            /** Set a color property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Color value to set.
            */
            public SetColor($name: string, $value: UnityEngine.Color): void
            /** Set a color property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Color value to set.
            */
            public SetColor($nameID: number, $value: UnityEngine.Color): void
            /** Set a matrix property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The matrix value to set.
            */
            public SetMatrix($name: string, $value: UnityEngine.Matrix4x4): void
            /** Set a matrix property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The matrix value to set.
            */
            public SetMatrix($nameID: number, $value: UnityEngine.Matrix4x4): void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer($name: string, $value: UnityEngine.ComputeBuffer): void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer($nameID: number, $value: UnityEngine.ComputeBuffer): void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer($name: string, $value: UnityEngine.GraphicsBuffer): void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer): void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($name: string, $value: UnityEngine.Texture): void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($nameID: number, $value: UnityEngine.Texture): void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            public SetFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public SetFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            /** Set a float array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            */
            public SetFloatArray($name: string, $values: System.Array$1<number>): void
            /** Set a float array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            */
            public SetFloatArray($nameID: number, $values: System.Array$1<number>): void
            public SetVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public SetVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** Set a vector array property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            * @param $name The name of the property.
            */
            public SetVectorArray($name: string, $values: System.Array$1<UnityEngine.Vector4>): void
            /** Set a vector array property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            * @param $name The name of the property.
            */
            public SetVectorArray($nameID: number, $values: System.Array$1<UnityEngine.Vector4>): void
            public SetMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public SetMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            /** Set a matrix array property.
            * @param $name The name of the property.
            * @param $values The name ID of the property retrieved by Shader.PropertyToID.
            * @param $nameID The array to set.
            */
            public SetMatrixArray($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Set a matrix array property.
            * @param $name The name of the property.
            * @param $values The name ID of the property retrieved by Shader.PropertyToID.
            * @param $nameID The array to set.
            */
            public SetMatrixArray($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasProperty($name: string): boolean
            /** Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasProperty($nameID: number): boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInt($name: string): boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInt($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasFloat($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasFloat($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInteger($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInteger($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasTexture($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasTexture($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasMatrix($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasMatrix($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasVector($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasVector($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasColor($name: string): boolean
            /** Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasColor($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasBuffer($name: string): boolean
            /** Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasBuffer($nameID: number): boolean
            /** Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasConstantBuffer($name: string): boolean
            /** Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasConstantBuffer($nameID: number): boolean
            /** Get a float from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat($name: string): number
            /** Get a float from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat($nameID: number): number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt($name: string): number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt($nameID: number): number
            /** Get an integer from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger($name: string): number
            /** Get an integer from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger($nameID: number): number
            /** Get a vector from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector($name: string): UnityEngine.Vector4
            /** Get a vector from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector($nameID: number): UnityEngine.Vector4
            /** Get a color from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor($name: string): UnityEngine.Color
            /** Get a color from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor($nameID: number): UnityEngine.Color
            /** Get a matrix from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix($name: string): UnityEngine.Matrix4x4
            /** Get a matrix from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix($nameID: number): UnityEngine.Matrix4x4
            /** Get a texture from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture($name: string): UnityEngine.Texture
            /** Get a texture from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture($nameID: number): UnityEngine.Texture
            /** Get a float array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloatArray($name: string): System.Array$1<number>
            /** Get a float array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloatArray($nameID: number): System.Array$1<number>
            /** Get a vector array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVectorArray($name: string): System.Array$1<UnityEngine.Vector4>
            /** Get a vector array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVectorArray($nameID: number): System.Array$1<UnityEngine.Vector4>
            /** Get a matrix array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrixArray($name: string): System.Array$1<UnityEngine.Matrix4x4>
            /** Get a matrix array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrixArray($nameID: number): System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray($name: string, $values: System.Collections.Generic.List$1<number>): void
            public GetFloatArray($nameID: number, $values: System.Collections.Generic.List$1<number>): void
            public GetVectorArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public GetVectorArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public GetMatrixArray($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public GetMatrixArray($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>): void
            public CopySHCoefficientArraysFrom($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>): void
            /** This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.
            * @param $lightProbes The array of SH values to copy from.
            */
            public CopySHCoefficientArraysFrom($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>): void
            public CopySHCoefficientArraysFrom($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number): void
            /** This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.
            * @param $lightProbes The array of SH values to copy from.
            * @param $sourceStart The index of the first element in the source array to copy from.
            * @param $destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param $count The number of elements to copy.
            */
            public CopySHCoefficientArraysFrom($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number): void
            public CopyProbeOcclusionArrayFrom($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            /** This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.
            * @param $occlusionProbes The array of probe occlusion values to copy from.
            */
            public CopyProbeOcclusionArrayFrom($occlusionProbes: System.Array$1<UnityEngine.Vector4>): void
            public CopyProbeOcclusionArrayFrom($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number): void
            /** This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.
            * @param $occlusionProbes The array of probe occlusion values to copy from.
            * @param $sourceStart The index of the first element in the source array to copy from.
            * @param $destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param $count The number of elements to copy.
            */
            public CopyProbeOcclusionArrayFrom($occlusionProbes: System.Array$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number): void
            public constructor()
        }
        /** The Light Probe Proxy Volume component offers the possibility to use higher resolution lighting for large non-static GameObjects.
        */
        class LightProbeProxyVolume extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Checks if Light Probe Proxy Volumes are supported.
            */
            public static get isFeatureSupported(): boolean;
            /** The world-space bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get boundsGlobal(): UnityEngine.Bounds;
            /** The size of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get sizeCustom(): UnityEngine.Vector3;
            public set sizeCustom(value: UnityEngine.Vector3);
            /** The local-space origin of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get originCustom(): UnityEngine.Vector3;
            public set originCustom(value: UnityEngine.Vector3);
            /** Interpolated Light Probe density.
            */
            public get probeDensity(): number;
            public set probeDensity(value: number);
            /** The 3D grid resolution on the x-axis.
            */
            public get gridResolutionX(): number;
            public set gridResolutionX(value: number);
            /** The 3D grid resolution on the y-axis.
            */
            public get gridResolutionY(): number;
            public set gridResolutionY(value: number);
            /** The 3D grid resolution on the z-axis.
            */
            public get gridResolutionZ(): number;
            public set gridResolutionZ(value: number);
            /** The bounding box mode for generating the 3D grid of interpolated Light Probes.
            */
            public get boundingBoxMode(): UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
            public set boundingBoxMode(value: UnityEngine.LightProbeProxyVolume.BoundingBoxMode);
            /** The resolution mode for generating the grid of interpolated Light Probes.
            */
            public get resolutionMode(): UnityEngine.LightProbeProxyVolume.ResolutionMode;
            public set resolutionMode(value: UnityEngine.LightProbeProxyVolume.ResolutionMode);
            /** The mode in which the interpolated Light Probe positions are generated.
            */
            public get probePositionMode(): UnityEngine.LightProbeProxyVolume.ProbePositionMode;
            public set probePositionMode(value: UnityEngine.LightProbeProxyVolume.ProbePositionMode);
            /** Sets the way the Light Probe Proxy Volume refreshes.
            */
            public get refreshMode(): UnityEngine.LightProbeProxyVolume.RefreshMode;
            public set refreshMode(value: UnityEngine.LightProbeProxyVolume.RefreshMode);
            /** Determines how many Spherical Harmonics bands will be evaluated to compute the ambient color.
            */
            public get qualityMode(): UnityEngine.LightProbeProxyVolume.QualityMode;
            public set qualityMode(value: UnityEngine.LightProbeProxyVolume.QualityMode);
            /** The texture data format used by the Light Probe Proxy Volume 3D texture.
            */
            public get dataFormat(): UnityEngine.LightProbeProxyVolume.DataFormat;
            public set dataFormat(value: UnityEngine.LightProbeProxyVolume.DataFormat);
            /** Triggers an update of the Light Probe Proxy Volume.
            */
            public Update(): void
            public constructor()
        }
        /** Low-level graphics library.
        */
        class GL extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Mode for Begin: draw triangles.
            */
            public static TRIANGLES: number
            /** Mode for Begin: draw triangle strip.
            */
            public static TRIANGLE_STRIP: number
            /** Mode for Begin: draw quads.
            */
            public static QUADS: number
            /** Mode for Begin: draw lines.
            */
            public static LINES: number
            /** Mode for Begin: draw line strip.
            */
            public static LINE_STRIP: number
            /** Should rendering be done in wireframe?
            */
            public static get wireframe(): boolean;
            public static set wireframe(value: boolean);
            /** Controls whether Linear-to-sRGB color conversion is performed while rendering.
            */
            public static get sRGBWrite(): boolean;
            public static set sRGBWrite(value: boolean);
            /** Select whether to invert the backface culling (true) or not (false).
            */
            public static get invertCulling(): boolean;
            public static set invertCulling(value: boolean);
            /** Gets or sets the modelview matrix.
            */
            public static get modelview(): UnityEngine.Matrix4x4;
            public static set modelview(value: UnityEngine.Matrix4x4);
            /** Submit a vertex.
            */
            public static Vertex3($x: number, $y: number, $z: number): void
            /** Submit a vertex.
            */
            public static Vertex($v: UnityEngine.Vector3): void
            /** Sets current texture coordinate (x,y,z) for all texture units.
            */
            public static TexCoord3($x: number, $y: number, $z: number): void
            /** Sets current texture coordinate (v.x,v.y,v.z) for all texture units.
            */
            public static TexCoord($v: UnityEngine.Vector3): void
            /** Sets current texture coordinate (x,y) for all texture units.
            */
            public static TexCoord2($x: number, $y: number): void
            /** Sets current texture coordinate (x,y,z) to the actual texture unit.
            */
            public static MultiTexCoord3($unit: number, $x: number, $y: number, $z: number): void
            /** Sets current texture coordinate (v.x,v.y,v.z) to the actual texture unit.
            */
            public static MultiTexCoord($unit: number, $v: UnityEngine.Vector3): void
            /** Sets current texture coordinate (x,y) for the actual texture unit.
            */
            public static MultiTexCoord2($unit: number, $x: number, $y: number): void
            /** Sets current vertex color.
            */
            public static Color($c: UnityEngine.Color): void
            /** Sends queued-up commands in the driver's command buffer to the GPU.
            */
            public static Flush(): void
            /** Resolves the render target for subsequent operations sampling from it.
            */
            public static RenderTargetBarrier(): void
            /** Sets the current model matrix to the one specified.
            */
            public static MultMatrix($m: UnityEngine.Matrix4x4): void
            /** Saves the model, view and projection matrices to the top of the matrix stack.
            */
            public static PushMatrix(): void
            /** Restores the model, view and projection matrices off the top of the matrix stack.
            */
            public static PopMatrix(): void
            /** Load an identity into the current model and view matrices.
            */
            public static LoadIdentity(): void
            /** Helper function to set up an orthograhic projection.
            */
            public static LoadOrtho(): void
            /** Setup a matrix for pixel-correct rendering.
            */
            public static LoadPixelMatrix(): void
            /** Load an arbitrary matrix to the current projection matrix.
            */
            public static LoadProjectionMatrix($mat: UnityEngine.Matrix4x4): void
            /** Invalidate the internally cached render state.
            */
            public static InvalidateState(): void
            /** Compute GPU projection matrix from camera's projection matrix.
            * @param $proj Source projection matrix.
            * @param $renderIntoTexture Will this projection be used for rendering into a RenderTexture?
            * @returns Adjusted projection matrix for the current graphics API. 
            */
            public static GetGPUProjectionMatrix($proj: UnityEngine.Matrix4x4, $renderIntoTexture: boolean): UnityEngine.Matrix4x4
            /** Setup a matrix for pixel-correct rendering.
            */
            public static LoadPixelMatrix($left: number, $right: number, $bottom: number, $top: number): void
            /** Send a user-defined event to a native code plugin.
            * @param $eventID User defined id to send to the callback.
            * @param $callback Native code callback to queue for Unity's renderer to invoke.
            */
            public static IssuePluginEvent($callback: System.IntPtr, $eventID: number): void
            /** Begin drawing 3D primitives.
            * @param $mode Primitives to draw: can be TRIANGLES, TRIANGLE_STRIP, QUADS or LINES.
            */
            public static Begin($mode: number): void
            /** End drawing 3D primitives.
            */
            public static End(): void
            /** Clear the current render buffer.
            * @param $clearDepth Should the depth buffer be cleared?
            * @param $clearColor Should the color buffer be cleared?
            * @param $backgroundColor The color to clear with, used only if clearColor is true.
            * @param $depth The depth to clear the z-buffer with, used only if clearDepth is true. The valid
            range is from 0 (near plane) to 1 (far plane). The value is graphics API agnostic: the abstraction layer will convert
            the value to match the convention of the current graphics API.
            */
            public static Clear($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color, $depth: number): void
            public static Clear($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color): void
            /** Set the rendering viewport.
            */
            public static Viewport($pixelRect: UnityEngine.Rect): void
            /** Clear the current render buffer with camera's skybox.
            * @param $clearDepth Should the depth buffer be cleared?
            * @param $camera Camera to get projection parameters and skybox from.
            */
            public static ClearWithSkybox($clearDepth: boolean, $camera: UnityEngine.Camera): void
            public constructor()
        }
        /** Scales render textures to support dynamic resolution if the target platform/graphics API supports it.
        */
        class ScalableBufferManager extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Width scale factor to control dynamic resolution.
            */
            public static get widthScaleFactor(): number;
            /** Height scale factor to control dynamic resolution.
            */
            public static get heightScaleFactor(): number;
            /** Function to resize all buffers marked as DynamicallyScalable.
            * @param $widthScale New scale factor for the width the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            * @param $heightScale New scale factor for the height the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            */
            public static ResizeBuffers($widthScale: number, $heightScale: number): void
        }
        /** The FrameTimingManager allows the user to capture and access FrameTiming data for multiple frames.
        */
        class FrameTimingManager extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Check if frame timing statistics are enabled.
            * @returns Whether frame timing statistics are enabled. 
            */
            public static IsFeatureEnabled(): boolean
            /** This function triggers the FrameTimingManager to capture a snapshot of FrameTiming's data, that can then be accessed by the user.
            */
            public static CaptureFrameTimings(): void
            /** Allows the user to access the currently captured FrameTimings.
            * @param $numFrames User supplies a desired number of frames they would like FrameTimings for. This should be equal to or less than the maximum FrameTimings the platform can capture.
            * @param $timings An array of FrameTiming structs that is passed in by the user and will be filled with data as requested. It is the users job to make sure the array that is passed is large enough to hold the requested number of FrameTimings.
            * @returns Returns the number of FrameTimings it actually was able to get. This will always be equal to or less than the requested numFrames depending on availability of captured FrameTimings. 
            */
            public static GetLatestTimings($numFrames: number, $timings: System.Array$1<UnityEngine.FrameTiming>): number
            /** This returns the number of vsyncs per second on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns Number of vsyncs per second of the current platform. 
            */
            public static GetVSyncsPerSecond(): number
            /** This returns the frequency of GPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns GPU timer frequency for current platform. 
            */
            public static GetGpuTimerFrequency(): bigint
            /** This returns the frequency of CPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns CPU timer frequency for current platform. 
            */
            public static GetCpuTimerFrequency(): bigint
        }
        /** Struct containing basic FrameTimings and accompanying relevant data.
        */
        class FrameTiming extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Data of a lightmap.
        */
        class LightmapData extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Lightmap storing color of incoming light.
            */
            public get lightmapColor(): UnityEngine.Texture2D;
            public set lightmapColor(value: UnityEngine.Texture2D);
            /** Lightmap storing dominant direction of incoming light.
            */
            public get lightmapDir(): UnityEngine.Texture2D;
            public set lightmapDir(value: UnityEngine.Texture2D);
            /** Texture storing occlusion mask per light (ShadowMask, up to four lights).
            */
            public get shadowMask(): UnityEngine.Texture2D;
            public set shadowMask(value: UnityEngine.Texture2D);
            public constructor()
        }
        /** Class that represents textures in C# code.
        */
        class Texture2D extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** This property causes a texture to ignore all texture mipmap limit settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** The name of the texture mipmap limit group that this texture is associated with. (Read Only)
            */
            public get mipmapLimitGroup(): string;
            /** The number of high resolution mipmap levels from the texture that Unity doesn't upload to the GPU. (Read Only)
            */
            public get activeMipmapLimit(): number;
            /** Gets a small Texture with all white pixels.
            */
            public static get whiteTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all black pixels.
            */
            public static get blackTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all red pixels.
            */
            public static get redTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get grayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get linearGrayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with pixels that represent surface normal vectors at a neutral position.
            */
            public static get normalTexture(): UnityEngine.Texture2D;
            public get isReadable(): boolean;
            /** Returns true if the VTOnly checkbox was checked when the texture was imported; otherwise returns false. For additional information, see TextureImporter.vtOnly.
            */
            public get vtOnly(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** Restricts the mipmap streaming system to a minimum mip level for this Texture.
            */
            public get minimumMipmapLevel(): number;
            public set minimumMipmapLevel(value: number);
            /** The mipmap level calculated by the streaming system, which takes into account the streaming Cameras and the location of the objects containing this Texture. This is unaffected by requestedMipmapLevel or minimumMipmapLevel.
            */
            public get calculatedMipmapLevel(): number;
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Compress texture at runtime to DXT/BCn or ETC formats.
            */
            public Compress($highQuality: boolean): void
            /** Resets the requestedMipmapLevel field.
            */
            public ClearRequestedMipmapLevel(): void
            /** Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
            * @returns True if the mipmap level requested by requestedMipmapLevel has finished loading. 
            */
            public IsRequestedMipmapLevelLoaded(): boolean
            /** Resets the minimumMipmapLevel field.
            */
            public ClearMinimumMipmapLevel(): void
            /** Updates Unity texture to use different native texture object.
            * @param $nativeTex Native 2D texture object.
            */
            public UpdateExternalTexture($nativeTex: System.IntPtr): void
            /** Gets the raw data from a texture, as a copy.
            * @returns A byte array that contains raw texture data. 
            */
            public GetRawTextureData(): System.Array$1<number>
            /** Gets the pixel color data for part of a mipmap level as Color structs.
            * @param $x The starting x position of the section to fetch.
            * @param $y The starting y position of the section to fetch.
            * @param $blockWidth The width of the section to fetch.
            * @param $blockHeight The height of the section to fetch.
            * @param $miplevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($x: number, $y: number, $blockWidth: number, $blockHeight: number, $miplevel: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for part of a mipmap level as Color structs.
            * @param $x The starting x position of the section to fetch.
            * @param $y The starting y position of the section to fetch.
            * @param $blockWidth The width of the section to fetch.
            * @param $blockHeight The height of the section to fetch.
            * @param $miplevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($x: number, $y: number, $blockWidth: number, $blockHeight: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($miplevel: number): System.Array$1<UnityEngine.Color32>
            public GetPixels32(): System.Array$1<UnityEngine.Color32>
            /** Packs multiple Textures into a texture atlas.
            * @param $textures Array of textures to pack into the atlas.
            * @param $padding Padding in pixels between the packed textures.
            * @param $maximumAtlasSize Maximum size of the resulting texture.
            * @param $makeNoLongerReadable Should the texture be marked as no longer readable?
            * @returns An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails. 
            */
            public PackTextures($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number, $makeNoLongerReadable: boolean): System.Array$1<UnityEngine.Rect>
            public PackTextures($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number): System.Array$1<UnityEngine.Rect>
            public PackTextures($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number): System.Array$1<UnityEngine.Rect>
            /** Creates a Unity Texture out of an externally created native texture object.
            * @param $nativeTex Native 2D texture object.
            * @param $width Width of texture in pixels.
            * @param $height Height of texture in pixels.
            * @param $format Format of underlying texture object.
            * @param $mipmap Does the texture have mipmaps?
            * @param $linear Is texture using linear color space?
            */
            public static CreateExternalTexture($width: number, $height: number, $format: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $nativeTex: System.IntPtr): UnityEngine.Texture2D
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel($x: number, $y: number, $color: UnityEngine.Color): void
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel($x: number, $y: number, $color: UnityEngine.Color, $mipLevel: number): void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>, $miplevel: number): void
            public SetPixels($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>): void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $miplevel: number): void
            public SetPixels($colors: System.Array$1<UnityEngine.Color>): void
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel($x: number, $y: number): UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel($x: number, $y: number, $mipLevel: number): UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear($u: number, $v: number): UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear($u: number, $v: number, $mipLevel: number): UnityEngine.Color
            /** Sets the raw data of an entire texture in CPU memory.
            * @param $data The array of data to use.
            * @param $size The size of the data in bytes.
            */
            public LoadRawTextureData($data: System.IntPtr, $size: number): void
            /** Sets the raw data of an entire texture in CPU memory.
            * @param $data The array of data to use.
            * @param $size The size of the data in bytes.
            */
            public LoadRawTextureData($data: System.Array$1<number>): void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply($updateMipmaps: boolean, $makeNoLongerReadable: boolean): void
            public Apply($updateMipmaps: boolean): void
            public Apply(): void
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width New width of the Texture.
            * @param $height New height of the Texture.
            * @param $format New format of the Texture.
            * @param $hasMipMap Indicates if the Texture should reserve memory for a full mip map chain.
            * @returns Returns true if the reinitialization was a success. 
            */
            public Reinitialize($width: number, $height: number): boolean
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width New width of the Texture.
            * @param $height New height of the Texture.
            * @param $format New format of the Texture.
            * @param $hasMipMap Indicates if the Texture should reserve memory for a full mip map chain.
            * @returns Returns true if the reinitialization was a success. 
            */
            public Reinitialize($width: number, $height: number, $format: UnityEngine.TextureFormat, $hasMipMap: boolean): boolean
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width New width of the Texture.
            * @param $height New height of the Texture.
            * @param $format New format of the Texture.
            * @param $hasMipMap Indicates if the Texture should reserve memory for a full mip map chain.
            * @returns Returns true if the reinitialization was a success. 
            */
            public Reinitialize($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $hasMipMap: boolean): boolean
            /** Reads pixels from the current render target and writes them to a texture.
            * @param $source The region of the render target to read from.
            * @param $destX The x position in the texture to write the pixels to.
            * @param $destY The y position in the texture to write the pixels to.
            * @param $recalculateMipMaps When the value is true, Unity automatically recalculates the mipmap for the texture after it writes the pixel data. Otherwise, Unity doesn't do this automatically.
            */
            public ReadPixels($source: UnityEngine.Rect, $destX: number, $destY: number, $recalculateMipMaps: boolean): void
            public ReadPixels($source: UnityEngine.Rect, $destX: number, $destY: number): void
            public static GenerateAtlas($sizes: System.Array$1<UnityEngine.Vector2>, $padding: number, $atlasSize: number, $results: System.Collections.Generic.List$1<UnityEngine.Rect>): boolean
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>): void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>, $miplevel: number): void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>): void
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($miplevel: number): System.Array$1<UnityEngine.Color>
            public GetPixels(): System.Array$1<UnityEngine.Color>
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number, $mipmapLimitGroupName: string, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number, $mipmapLimitGroupName: string, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean, $ignoreMipmapLimit: boolean, $mipmapLimitGroupName: string)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor($width: number, $height: number)
            public constructor()
        }
        /** Class that represents textures in C# code.
        */
        interface Texture2D {
            /** Encodes the specified texture in TGA format.
            * @param $tex The texture to encode.
            */
            EncodeToTGA(): System.Array$1<number>;
            /** Encodes this texture into PNG format.
            * @param $tex The texture to convert.
            */
            EncodeToPNG(): System.Array$1<number>;
            /** Encodes this texture into JPG format.
            * @param $tex Text texture to convert.
            * @param $quality JPG quality to encode with. The range is 1 through 100. 1 is the lowest quality. The default is 75.
            */
            EncodeToJPG($quality: number): System.Array$1<number>;
            /** Encodes this texture into JPG format.
            * @param $tex Text texture to convert.
            * @param $quality JPG quality to encode with. The range is 1 through 100. 1 is the lowest quality. The default is 75.
            */
            EncodeToJPG(): System.Array$1<number>;
            EncodeToEXR($flags: UnityEngine.Texture2D.EXRFlags): System.Array$1<number>;
            EncodeToEXR(): System.Array$1<number>;
            /** Loads PNG or JPG image byte array into a texture.
            * @param $tex The texture to load the image into.
            * @param $data The byte array containing the image data to load.
            * @param $markNonReadable Set to false by default, pass true to optionally mark the texture as non-readable.
            * @returns Returns true if the data can be loaded, false otherwise. 
            */
            LoadImage($data: System.Array$1<number>, $markNonReadable: boolean): boolean;
            LoadImage($data: System.Array$1<number>): boolean;
        }
        /** Stores lightmaps of the Scene.
        */
        class LightmapSettings extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Lightmap array.
            */
            public static get lightmaps(): System.Array$1<UnityEngine.LightmapData>;
            public static set lightmaps(value: System.Array$1<UnityEngine.LightmapData>);
            /** NonDirectional or CombinedDirectional Specular lightmaps rendering mode.
            */
            public static get lightmapsMode(): UnityEngine.LightmapsMode;
            public static set lightmapsMode(value: UnityEngine.LightmapsMode);
            /** Baked Light Probe data.
            */
            public static get lightProbes(): UnityEngine.LightProbes;
            public static set lightProbes(value: UnityEngine.LightProbes);
        }
        /** Lightmap (and lighting) configuration mode, controls how lightmaps interact with lighting and what kind of information they store.
        */
        enum LightmapsMode { NonDirectional = 0, CombinedDirectional = 1, SeparateDirectional = 2, Single = 0, Dual = 1, Directional = 2 }
        /** Stores light probe data for all currently loaded Scenes.
        */
        class LightProbes extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Positions of the baked light probes (Read Only).
            */
            public get positions(): System.Array$1<UnityEngine.Vector3>;
            /** Coefficients of baked light probes.
            */
            public get bakedProbes(): System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>;
            public set bakedProbes(value: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>);
            /** The number of light probes (Read Only).
            */
            public get count(): number;
            /** The number of cells space is divided into (Read Only).
            */
            public get cellCount(): number;
            public static add_lightProbesUpdated($value: System.Action): void
            public static remove_lightProbesUpdated($value: System.Action): void
            public static add_tetrahedralizationCompleted($value: System.Action): void
            public static remove_tetrahedralizationCompleted($value: System.Action): void
            public static add_needsRetetrahedralization($value: System.Action): void
            public static remove_needsRetetrahedralization($value: System.Action): void
            /** Synchronously tetrahedralize the currently loaded LightProbe positions.
            */
            public static Tetrahedralize(): void
            /** Asynchronously tetrahedralize all currently loaded LightProbe positions.
            */
            public static TetrahedralizeAsync(): void
            /** Returns an interpolated probe for the given position for both real-time and baked light probes combined.
            */
            public static GetInterpolatedProbe($position: UnityEngine.Vector3, $renderer: UnityEngine.Renderer, $probe: $Ref<UnityEngine.Rendering.SphericalHarmonicsL2>): void
            /** Calculate light probes and occlusion probes at the given world space positions.
            * @param $positions The array of world space positions used to evaluate the probes.
            * @param $lightProbes The array where the resulting light probes are written to.
            * @param $occlusionProbes The array where the resulting occlusion probes are written to.
            */
            public static CalculateInterpolatedLightAndOcclusionProbes($positions: System.Array$1<UnityEngine.Vector3>, $lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Array$1<UnityEngine.Vector4>): void
            public static CalculateInterpolatedLightAndOcclusionProbes($positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
        }
        /** Single, dual, or directional lightmaps rendering mode, used only in GIWorkflowMode.Legacy
        */
        enum LightmapsModeLegacy { Single = 0, Dual = 1, Directional = 2 }
        /** Color space for player settings.
        */
        enum ColorSpace { Uninitialized = -1, Gamma = 0, Linear = 1 }
        /** Provides access to HDR display settings and information.
        */
        class HDROutputSettings extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The list of currently connected displays with possible HDR availability.
            */
            public static displays: System.Array$1<UnityEngine.HDROutputSettings>
            /** The HDROutputSettings for the main display.
            */
            public static get main(): UnityEngine.HDROutputSettings;
            /** Describes whether HDR output is currently active on the display. It is true if this is the case, and @@false@ otherwise.
            */
            public get active(): boolean;
            /** Describes whether HDR is currently available on your primary display and that you have HDR enabled in your Unity Project. It is true if this is the case, and false otherwise.
            */
            public get available(): boolean;
            /** Describes whether Unity performs HDR tonemapping automatically.
            */
            public get automaticHDRTonemapping(): boolean;
            public set automaticHDRTonemapping(value: boolean);
            /** The ColorGamut used to output to the active HDR display.
            */
            public get displayColorGamut(): UnityEngine.ColorGamut;
            /** The RenderTextureFormat of the display buffer for the active HDR display.
            */
            public get format(): UnityEngine.RenderTextureFormat;
            /** The Experimental.Rendering.GraphicsFormat of the display buffer for the active HDR display.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** The base luminance of a white paper surface in nits or candela per square meter (cd/m2).
            */
            public get paperWhiteNits(): number;
            public set paperWhiteNits(value: number);
            /** Maximum input luminance at which gradation is preserved even when the entire screen is bright.
            */
            public get maxFullFrameToneMapLuminance(): number;
            /** Maximum input luminance at which gradation is preserved when 10% of the screen is bright.
            */
            public get maxToneMapLuminance(): number;
            /** Minimum input luminance at which gradation is identifiable.
            */
            public get minToneMapLuminance(): number;
            /** Describes whether the user has requested to change the HDR Output Mode. It is true if this is the case, and false otherwise.
            */
            public get HDRModeChangeRequested(): boolean;
            /** Use this function to request a change in the HDR Output Mode and in the value of HDROutputSettings.active.
            * @param $enabled Indicates whether HDR should be enabled.
            */
            public RequestHDRModeChange($enabled: boolean): void
        }
        /** Format of a RenderTexture.
        */
        enum RenderTextureFormat { ARGB32 = 0, Depth = 1, ARGBHalf = 2, Shadowmap = 3, RGB565 = 4, ARGB4444 = 5, ARGB1555 = 6, Default = 7, ARGB2101010 = 8, DefaultHDR = 9, ARGB64 = 10, ARGBFloat = 11, RGFloat = 12, RGHalf = 13, RFloat = 14, RHalf = 15, R8 = 16, ARGBInt = 17, RGInt = 18, RInt = 19, BGRA32 = 20, RGB111110Float = 22, RG32 = 23, RGBAUShort = 24, RG16 = 25, BGRA10101010_XR = 26, BGR101010_XR = 27, R16 = 28 }
        /** Utility class to query properties of a ColorGamut.
        */
        class ColorGamutUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns the color primaries mapped to the color space used by the given gamut.
            * @param $gamut The color gamut to look up.
            * @returns Color primaries for the given gamut. 
            */
            public static GetColorPrimaries($gamut: UnityEngine.ColorGamut): UnityEngine.ColorPrimaries
            /** Returns the white point that the given gamut uses.
            * @param $gamut The color gamut to look up.
            * @returns The white point that the given gamut uses. 
            */
            public static GetWhitePoint($gamut: UnityEngine.ColorGamut): UnityEngine.WhitePoint
            /** Returns the transfer function that the given gamut uses on the current platform.
            * @param $gamut The color gamut to look up.
            * @returns The transfer function that the given gamut uses. 
            */
            public static GetTransferFunction($gamut: UnityEngine.ColorGamut): UnityEngine.TransferFunction
            public constructor()
        }
        /** Represents a color space based on its set of red, green, and blue color primaries.
        */
        enum ColorPrimaries { Unknown = -1, Rec709 = 0, Rec2020 = 1, P3 = 2 }
        /** The reference white point of a color space.
        */
        enum WhitePoint { Unknown = -1, D65 = 0 }
        /** Contains electro-optical transfer function options.
        */
        enum TransferFunction { Unknown = -1, sRGB = 0, BT1886 = 1, PQ = 2, Linear = 3, Gamma22 = 4 }
        /** Extension methods to the Renderer class, used only for the UpdateGIMaterials method used by the Global Illumination System.
        */
        class RendererExtensions extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            public static UpdateGIMaterials($renderer: UnityEngine.Renderer): void
        }
        /** When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.
        */
        class ImageEffectTransformsToLDR extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Any Image Effect with this attribute can be rendered into the Scene view camera.
        */
        class ImageEffectAllowedInSceneView extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.
        */
        class ImageEffectOpaque extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Any Image Effect with this attribute will be rendered after Dynamic Resolution stage.
        */
        class ImageEffectAfterScale extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Use this attribute when image effects are implemented using Command Buffers.
        */
        class ImageEffectUsesCommandBuffer extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Describes a bone weight that affects a vertex in a mesh.
        */
        class BoneWeight1 extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight1> {
            protected [__keep_incompatibility]: never;
        }
        /** Skin weights.
        */
        enum SkinWeights { None = 0, OneBone = 1, TwoBones = 2, FourBones = 4, Unlimited = 255 }
        /** Describes the location of blend shape vertex data in a GraphicsBuffer.
        */
        class BlendShapeBufferRange extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Describes 4 skinning bone weights that affect a vertex in a mesh.
        */
        class BoneWeight extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight> {
            protected [__keep_incompatibility]: never;
        }
        /** Struct used to describe meshes to be combined using Mesh.CombineMeshes.
        */
        class CombineInstance extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The type of motion vectors that should be generated.
        */
        enum MotionVectorGenerationMode { Camera = 0, Object = 1, ForceNoMotion = 2 }
        /** A script interface for a.
        */
        class Projector extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The near clipping plane distance.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The field of view of the projection in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The aspect ratio of the projection.
            */
            public get aspectRatio(): number;
            public set aspectRatio(value: number);
            /** Is the projection orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Projection's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Which object layers are ignored by the projector.
            */
            public get ignoreLayers(): number;
            public set ignoreLayers(value: number);
            /** The material that will be projected onto every object.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor()
        }
        /** The trail renderer is used to make trails behind objects in the Scene as they move about.
        */
        class TrailRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** How long does the trail take to fade out.
            */
            public get time(): number;
            public set time(value: number);
            /** The width of the trail at the spawning point.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** The width of the trail at the end of the trail.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the TrailRenderer.widthCurve to get the final width of the trail.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Does the GameObject of this Trail Renderer auto destruct?
            */
            public get autodestruct(): boolean;
            public set autodestruct(value: boolean);
            /** Creates trails when the GameObject moves.
            */
            public get emitting(): boolean;
            public set emitting(value: boolean);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the trail.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the trail.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** Set the minimum distance the trail can travel before a new vertex is added to it.
            */
            public get minVertexDistance(): number;
            public set minVertexDistance(value: number);
            /** Set the color at the start of the trail.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the trail.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Get the number of line segments in the trail.
            */
            public get positionCount(): number;
            /** A multiplier for the UV coordinates of the trail texture.
            */
            public get textureScale(): UnityEngine.Vector2;
            public set textureScale(value: UnityEngine.Vector2);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the trail width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a trail to generate Normals and Tangents. With this data, Scene lighting can affect the trail via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the trail texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the trail will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Specifies how the TrailRenderer interacts with SpriteMask.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Set the curve describing the width of the trail at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the trail at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the trail.
            * @param $index Which position to set.
            * @param $position The new position.
            */
            public SetPosition($index: number, $position: UnityEngine.Vector3): void
            /** Get the position of a vertex in the trail.
            * @param $index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition($index: number): UnityEngine.Vector3
            /** Removes all points from the TrailRenderer.
            Useful for restarting a trail from a new position.
            */
            public Clear(): void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the trail.
            * @param $camera The camera used for determining which way camera-space trails will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh($mesh: UnityEngine.Mesh, $useTransform?: boolean): void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the trail.
            * @param $camera The camera used for determining which way camera-space trails will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean): void
            /** Get the positions of all vertices in the trail.
            * @param $positions The array of positions to retrieve.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions($positions: System.Array$1<UnityEngine.Vector3>): number
            /** Get the visible positions of all vertices in the trail.
            * @param $positions The array of positions to retrieve.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetVisiblePositions($positions: System.Array$1<UnityEngine.Vector3>): number
            /** Sets the positions of all vertices in the trail.
            * @param $positions The array of positions to set.
            */
            public SetPositions($positions: System.Array$1<UnityEngine.Vector3>): void
            /** Adds a position to the trail.
            * @param $position The position to add to the trail.
            */
            public AddPosition($position: UnityEngine.Vector3): void
            /** Add an array of positions to the trail.
            * @param $positions The positions to add to the trail.
            */
            public AddPositions($positions: System.Array$1<UnityEngine.Vector3>): void
            public SetPositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): void
            public SetPositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): void
            public GetPositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): number
            public GetPositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): number
            public GetVisiblePositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): number
            public GetVisiblePositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): number
            public AddPositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): void
            public AddPositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): void
            public constructor()
            public SetPosition($position: UnityEngine.Vector3): void
            public SetPosition($path: string, $position: UnityEngine.Vector3): void
        }
        /** Choose how textures are applied to Lines and Trails.
        */
        enum LineTextureMode { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3, Static = 4 }
        /** Control the direction lines face, when using the LineRenderer or TrailRenderer.
        */
        enum LineAlignment { View = 0, Local = 1, TransformZ = 1 }
        /** This enum controls the mode under which the sprite will interact with the masking system.
        */
        enum SpriteMaskInteraction { None = 0, VisibleInsideMask = 1, VisibleOutsideMask = 2 }
        /** Represents a Gradient used for animating colors.
        */
        class Gradient extends System.Object implements System.IEquatable$1<UnityEngine.Gradient> {
            protected [__keep_incompatibility]: never;
            /** All color keys defined in the gradient.
            */
            public get colorKeys(): System.Array$1<UnityEngine.GradientColorKey>;
            public set colorKeys(value: System.Array$1<UnityEngine.GradientColorKey>);
            /** All alpha keys defined in the gradient.
            */
            public get alphaKeys(): System.Array$1<UnityEngine.GradientAlphaKey>;
            public set alphaKeys(value: System.Array$1<UnityEngine.GradientAlphaKey>);
            /** Controls how the gradient colors are interpolated.
            */
            public get mode(): UnityEngine.GradientMode;
            public set mode(value: UnityEngine.GradientMode);
            /** Indicates the color space that the gradient color keys are using.
            */
            public get colorSpace(): UnityEngine.ColorSpace;
            public set colorSpace(value: UnityEngine.ColorSpace);
            /** Calculate color at a given time.
            * @param $time Time of the evaluation (0 - 1).
            */
            public Evaluate($time: number): UnityEngine.Color
            /** Setup Gradient with an array of color keys and alpha keys.
            * @param $colorKeys Color keys of the gradient (maximum 8 color keys).
            * @param $alphaKeys Alpha keys of the gradient (maximum 8 alpha keys).
            */
            public SetKeys($colorKeys: System.Array$1<UnityEngine.GradientColorKey>, $alphaKeys: System.Array$1<UnityEngine.GradientAlphaKey>): void
            public Equals($o: any): boolean
            public Equals($other: UnityEngine.Gradient): boolean
            public constructor()
            public Equals($obj: any): boolean
            public static Equals($objA: any, $objB: any): boolean
        }
        /** The line renderer is used to draw free-floating lines in 3D space.
        */
        class LineRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** Set the width at the start of the line.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** Set the width at the end of the line.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the LineRenderer.widthCurve to get the final width of the line.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the line.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the line. The default is 0.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** If enabled, the lines are defined in world space.
            */
            public get useWorldSpace(): boolean;
            public set useWorldSpace(value: boolean);
            /** Connect the start and end positions of the line together to form a continuous loop.
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** Set the color at the start of the line.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the line.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Set/get the number of vertices.
            */
            public get positionCount(): number;
            public set positionCount(value: number);
            /** A multiplier for the UV coordinates of the line texture.
            */
            public get textureScale(): UnityEngine.Vector2;
            public set textureScale(value: UnityEngine.Vector2);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the line width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a line to generate Normals and Tangents. With this data, Scene lighting can affect the line via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the line texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the line will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Specifies how the LineRenderer interacts with SpriteMask.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Set the curve describing the width of the line at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the line at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the line.
            * @param $index Which position to set.
            * @param $position The new position.
            */
            public SetPosition($index: number, $position: UnityEngine.Vector3): void
            /** Get the position of a vertex in the line.
            * @param $index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition($index: number): UnityEngine.Vector3
            /** Generates a simplified version of the original line by removing points that fall within the specified tolerance.
            * @param $tolerance This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.
            */
            public Simplify($tolerance: number): void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the line.
            * @param $camera The camera used for determining which way camera-space lines will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh($mesh: UnityEngine.Mesh, $useTransform?: boolean): void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the line.
            * @param $camera The camera used for determining which way camera-space lines will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean): void
            /** Get the positions of all vertices in the line.
            * @param $positions The array of positions to retrieve. The array passed should be of at least positionCount in size.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions($positions: System.Array$1<UnityEngine.Vector3>): number
            /** Set the positions of all vertices in the line.
            * @param $positions The array of positions to set.
            */
            public SetPositions($positions: System.Array$1<UnityEngine.Vector3>): void
            public SetPositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): void
            public SetPositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): void
            public GetPositions($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>): number
            public GetPositions($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>): number
            public constructor()
            public SetPosition($position: UnityEngine.Vector3): void
            public SetPosition($path: string, $position: UnityEngine.Vector3): void
        }
        /** The Render Settings contain values for a range of visual elements in your Scene, like fog and ambient light.
        */
        class RenderSettings extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Is fog enabled?
            */
            public static get fog(): boolean;
            public static set fog(value: boolean);
            /** The starting distance of linear fog.
            */
            public static get fogStartDistance(): number;
            public static set fogStartDistance(value: number);
            /** The ending distance of linear fog.
            */
            public static get fogEndDistance(): number;
            public static set fogEndDistance(value: number);
            /** Fog mode to use.
            */
            public static get fogMode(): UnityEngine.FogMode;
            public static set fogMode(value: UnityEngine.FogMode);
            /** The color of the fog.
            */
            public static get fogColor(): UnityEngine.Color;
            public static set fogColor(value: UnityEngine.Color);
            /** The density of the exponential fog.
            */
            public static get fogDensity(): number;
            public static set fogDensity(value: number);
            /** Ambient lighting mode.
            */
            public static get ambientMode(): UnityEngine.Rendering.AmbientMode;
            public static set ambientMode(value: UnityEngine.Rendering.AmbientMode);
            /** Ambient lighting coming from above.
            */
            public static get ambientSkyColor(): UnityEngine.Color;
            public static set ambientSkyColor(value: UnityEngine.Color);
            /** Ambient lighting coming from the sides.
            */
            public static get ambientEquatorColor(): UnityEngine.Color;
            public static set ambientEquatorColor(value: UnityEngine.Color);
            /** Ambient lighting coming from below.
            */
            public static get ambientGroundColor(): UnityEngine.Color;
            public static set ambientGroundColor(value: UnityEngine.Color);
            /** How much the light from the Ambient Source affects the Scene.
            */
            public static get ambientIntensity(): number;
            public static set ambientIntensity(value: number);
            /** Flat ambient lighting color.
            */
            public static get ambientLight(): UnityEngine.Color;
            public static set ambientLight(value: UnityEngine.Color);
            /** The color used for the sun shadows in the Subtractive lightmode.
            */
            public static get subtractiveShadowColor(): UnityEngine.Color;
            public static set subtractiveShadowColor(value: UnityEngine.Color);
            /** The global skybox to use.
            */
            public static get skybox(): UnityEngine.Material;
            public static set skybox(value: UnityEngine.Material);
            /** The light used by the procedural skybox.
            */
            public static get sun(): UnityEngine.Light;
            public static set sun(value: UnityEngine.Light);
            /** An automatically generated ambient probe that captures environment lighting.
            */
            public static get ambientProbe(): UnityEngine.Rendering.SphericalHarmonicsL2;
            public static set ambientProbe(value: UnityEngine.Rendering.SphericalHarmonicsL2);
            public static get customReflectionTexture(): UnityEngine.Texture;
            public static set customReflectionTexture(value: UnityEngine.Texture);
            /** How much the skybox / custom cubemap reflection affects the Scene.
            */
            public static get reflectionIntensity(): number;
            public static set reflectionIntensity(value: number);
            /** The number of times a reflection includes other reflections.
            */
            public static get reflectionBounces(): number;
            public static set reflectionBounces(value: number);
            /** Default reflection mode.
            */
            public static get defaultReflectionMode(): UnityEngine.Rendering.DefaultReflectionMode;
            public static set defaultReflectionMode(value: UnityEngine.Rendering.DefaultReflectionMode);
            /** Cubemap resolution for default reflection.
            */
            public static get defaultReflectionResolution(): number;
            public static set defaultReflectionResolution(value: number);
            /** Size of the Light halos.
            */
            public static get haloStrength(): number;
            public static set haloStrength(value: number);
            /** The intensity of all flares in the Scene.
            */
            public static get flareStrength(): number;
            public static set flareStrength(value: number);
            /** The fade speed of all flares in the Scene.
            */
            public static get flareFadeSpeed(): number;
            public static set flareFadeSpeed(value: number);
        }
        /** Fog mode to use.
        */
        enum FogMode { Linear = 1, Exponential = 2, ExponentialSquared = 3 }
        /** Script interface for.
        */
        class Light extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The type of the light.
            */
            public get type(): UnityEngine.LightType;
            public set type(value: UnityEngine.LightType);
            /** This property describes the shape of the spot light. Only Scriptable Render Pipelines use this property; the built-in renderer does not support it.
            */
            public get shape(): UnityEngine.LightShape;
            public set shape(value: UnityEngine.LightShape);
            /** The angle of the spot light's cone in degrees.
            */
            public get spotAngle(): number;
            public set spotAngle(value: number);
            /** The angle of the spot light's inner cone in degrees.
            */
            public get innerSpotAngle(): number;
            public set innerSpotAngle(value: number);
            /** The color of the light.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** 
            The color temperature of the light.
            Correlated Color Temperature (abbreviated as CCT) is multiplied with the color filter when calculating the final color of a light source. The color temperature of the electromagnetic radiation emitted from an ideal black body is defined as its surface temperature in Kelvin. White is 6500K according to the D65 standard. A candle light is 1800K and a soft warm light bulb is 2700K.
            If you want to use colorTemperature, GraphicsSettings.lightsUseLinearIntensity and Light.useColorTemperature has to be enabled.
            Additional resources: GraphicsSettings.lightsUseLinearIntensity, GraphicsSettings.useColorTemperature.
            */
            public get colorTemperature(): number;
            public set colorTemperature(value: number);
            /** Set to true to use the color temperature.
            */
            public get useColorTemperature(): boolean;
            public set useColorTemperature(value: boolean);
            /** The Intensity of a light is multiplied with the Light color.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The multiplier that defines the strength of the bounce lighting.
            */
            public get bounceIntensity(): number;
            public set bounceIntensity(value: number);
            /** Set to true to override light bounding sphere for culling.
            */
            public get useBoundingSphereOverride(): boolean;
            public set useBoundingSphereOverride(value: boolean);
            /** Bounding sphere used to override the regular light bounding sphere during culling.
            */
            public get boundingSphereOverride(): UnityEngine.Vector4;
            public set boundingSphereOverride(value: UnityEngine.Vector4);
            /** Whether to cull shadows for this Light when the Light is outside of the view frustum.
            */
            public get useViewFrustumForShadowCasterCull(): boolean;
            public set useViewFrustumForShadowCasterCull(value: boolean);
            /** The custom resolution of the shadow map.
            */
            public get shadowCustomResolution(): number;
            public set shadowCustomResolution(value: number);
            /** Shadow mapping constant bias.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Shadow mapping normal-based bias.
            */
            public get shadowNormalBias(): number;
            public set shadowNormalBias(value: number);
            /** Near plane value to use for shadow frustums.
            */
            public get shadowNearPlane(): number;
            public set shadowNearPlane(value: number);
            /** Set to true to enable custom matrix for culling during shadows.
            */
            public get useShadowMatrixOverride(): boolean;
            public set useShadowMatrixOverride(value: boolean);
            /** Matrix that overrides the regular light projection matrix during shadow culling. Unity uses this matrix if you set Light.useShadowMatrixOverride to true.
            */
            public get shadowMatrixOverride(): UnityEngine.Matrix4x4;
            public set shadowMatrixOverride(value: UnityEngine.Matrix4x4);
            /** The range of the light.
            */
            public get range(): number;
            public set range(value: number);
            /** The to use for this light.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            /** This property describes the output of the last Global Illumination bake.
            */
            public get bakingOutput(): UnityEngine.LightBakingOutput;
            public set bakingOutput(value: UnityEngine.LightBakingOutput);
            /** This is used to light certain objects in the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Determines which rendering LayerMask this Light affects.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** Allows you to override the global Shadowmask Mode per light. Only use this with render pipelines that can handle per light Shadowmask modes. Incompatible with the legacy renderers.
            */
            public get lightShadowCasterMode(): UnityEngine.LightShadowCasterMode;
            public set lightShadowCasterMode(value: UnityEngine.LightShadowCasterMode);
            /** How this light casts shadows
            */
            public get shadows(): UnityEngine.LightShadows;
            public set shadows(value: UnityEngine.LightShadows);
            /** Strength of light's shadows.
            */
            public get shadowStrength(): number;
            public set shadowStrength(value: number);
            /** The resolution of the shadow map.
            */
            public get shadowResolution(): UnityEngine.Rendering.LightShadowResolution;
            public set shadowResolution(value: UnityEngine.Rendering.LightShadowResolution);
            /** Per-light, per-layer shadow culling distances. Directional lights only. 
            */
            public get layerShadowCullDistances(): System.Array$1<number>;
            public set layerShadowCullDistances(value: System.Array$1<number>);
            /** The size of a directional light's cookie.
            */
            public get cookieSize(): number;
            public set cookieSize(value: number);
            /** The cookie texture projected by the light.
            */
            public get cookie(): UnityEngine.Texture;
            public set cookie(value: UnityEngine.Texture);
            /** How to render the light.
            */
            public get renderMode(): UnityEngine.LightRenderMode;
            public set renderMode(value: UnityEngine.LightRenderMode);
            /** Number of command buffers set up on this light (Read Only).
            */
            public get commandBufferCount(): number;
            /** Revert all light parameters to default.
            */
            public Reset(): void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer): void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass): void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType): void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass, $queueType: UnityEngine.Rendering.ComputeQueueType): void
            /** Remove command buffer from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public RemoveCommandBuffer($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer): void
            /** Remove command buffers from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers($evt: UnityEngine.Rendering.LightEvent): void
            /** Remove all command buffers set on this light.
            */
            public RemoveAllCommandBuffers(): void
            /** Get command buffers to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers($evt: UnityEngine.Rendering.LightEvent): System.Array$1<UnityEngine.Rendering.CommandBuffer>
            public constructor()
        }
        /** How the material interacts with lightmaps and lightprobes.
        */
        enum MaterialGlobalIlluminationFlags { None = 0, RealtimeEmissive = 1, BakedEmissive = 2, EmissiveIsBlack = 4, AnyEmissive = 3 }
        /** Represents the internal handle/id of a GraphicsBuffer.
        */
        class GraphicsBufferHandle extends System.ValueType implements System.IEquatable$1<UnityEngine.GraphicsBufferHandle> {
            protected [__keep_incompatibility]: never;
        }
        /** The type of a given material property.
        */
        enum MaterialPropertyType { Float = 0, Int = 1, Vector = 2, Matrix = 3, Texture = 4, ConstantBuffer = 5, ComputeBuffer = 6 }
        /** The portal for dynamically changing occlusion at runtime.
        */
        class OcclusionPortal extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Gets / sets the portal's open state.
            */
            public get open(): boolean;
            public set open(value: boolean);
            public constructor()
        }
        /** OcclusionArea is an area in which occlusion culling is performed.
        */
        class OcclusionArea extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Center of the occlusion area relative to the transform.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Size that the occlusion area will have.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor()
        }
        /** A flare asset. Read more about flares in the.
        */
        class Flare extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Script interface for a.
        */
        class LensFlare extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The strength of the flare.
            */
            public get brightness(): number;
            public set brightness(value: number);
            /** The fade speed of the flare.
            */
            public get fadeSpeed(): number;
            public set fadeSpeed(value: number);
            /** The color of the flare.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The to use.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            public constructor()
        }
        /** The type of a Light.
        */
        enum LightType { Spot = 0, Directional = 1, Point = 2, Area = 3, Rectangle = 3, Disc = 4 }
        /** Describes the shape of a spot light.
        */
        enum LightShape { Cone = 0, Pyramid = 1, Box = 2 }
        /** Struct describing the result of a Global Illumination bake for a given light.
        */
        class LightBakingOutput extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Allows mixed lights to control shadow caster culling when Shadowmasks are present.
        */
        enum LightShadowCasterMode { Default = 0, NonLightmappedOnly = 1, Everything = 2 }
        /** Shadow casting options for a Light.
        */
        enum LightShadows { None = 0, Hard = 1, Soft = 2 }
        /** How the Light is rendered.
        */
        enum LightRenderMode { Auto = 0, ForcePixel = 1, ForceVertex = 2 }
        /** Enum describing what part of a light contribution can be baked.
        */
        enum LightmapBakeType { Realtime = 4, Baked = 2, Mixed = 1 }
        enum LightmappingMode { Realtime = 4, Baked = 2, Mixed = 1 }
        /** A script interface for the.
        */
        class Skybox extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The material used by the skybox.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor()
        }
        /** A class to access the Mesh of the.
        */
        class MeshFilter extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Returns the shared mesh of the mesh filter.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Returns either a new Mesh|mesh or a duplicate of the existing mesh, and assigns it to the mesh filter.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            public constructor()
        }
        /** The Skinned Mesh filter.
        */
        class SkinnedMeshRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** The maximum number of bones per vertex that are taken into account during skinning.
            */
            public get quality(): UnityEngine.SkinQuality;
            public set quality(value: UnityEngine.SkinQuality);
            /** If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.
            */
            public get updateWhenOffscreen(): boolean;
            public set updateWhenOffscreen(value: boolean);
            /** Forces the Skinned Mesh to recalculate its matricies when rendered
            */
            public get forceMatrixRecalculationPerRender(): boolean;
            public set forceMatrixRecalculationPerRender(value: boolean);
            public get rootBone(): UnityEngine.Transform;
            public set rootBone(value: UnityEngine.Transform);
            /** The bones used to skin the mesh.
            */
            public get bones(): System.Array$1<UnityEngine.Transform>;
            public set bones(value: System.Array$1<UnityEngine.Transform>);
            /** The mesh used for skinning.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Specifies whether skinned motion vectors should be used for this renderer.
            */
            public get skinnedMotionVectors(): boolean;
            public set skinnedMotionVectors(value: boolean);
            /** The intended target usage of the skinned mesh GPU vertex buffer.
            */
            public get vertexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set vertexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** Returns the weight of a BlendShape for this Renderer.
            * @param $index The index of the BlendShape whose weight you want to retrieve. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @returns The weight of the BlendShape. 
            */
            public GetBlendShapeWeight($index: number): number
            /** Sets the weight of a BlendShape for this Renderer.
            * @param $index The index of the BlendShape to modify. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @param $value The weight for this BlendShape.
            */
            public SetBlendShapeWeight($index: number, $value: number): void
            /** Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the skinned mesh.
            * @param $useScale Whether to use the SkinnedMeshRenderer's Transform scale when baking the Mesh. If this is true, Unity bakes the Mesh using the position, rotation, and scale values from the SkinnedMeshRenderer's Transform. If this is false, Unity bakes the Mesh using the position and rotation values from the SkinnedMeshRenderer's Transform, but without using the scale value from the SkinnedMeshRenderer's Transform. The default value is false.
            */
            public BakeMesh($mesh: UnityEngine.Mesh): void
            /** Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the skinned mesh.
            * @param $useScale Whether to use the SkinnedMeshRenderer's Transform scale when baking the Mesh. If this is true, Unity bakes the Mesh using the position, rotation, and scale values from the SkinnedMeshRenderer's Transform. If this is false, Unity bakes the Mesh using the position and rotation values from the SkinnedMeshRenderer's Transform, but without using the scale value from the SkinnedMeshRenderer's Transform. The default value is false.
            */
            public BakeMesh($mesh: UnityEngine.Mesh, $useScale: boolean): void
            /** Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the current frame.
            * @returns The skinned mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetVertexBuffer(): UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the previous frame.
            * @returns The skinned mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetPreviousVertexBuffer(): UnityEngine.GraphicsBuffer
            public constructor()
        }
        /** The maximum number of bones affecting a single vertex.
        */
        enum SkinQuality { Auto = 0, Bone1 = 1, Bone2 = 2, Bone4 = 4 }
        /** Light Probe Group.
        */
        class LightProbeGroup extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** A collection of common line functions.
        */
        class LineUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            public static Simplify($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>): void
            public static Simplify($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector3>): void
            public static Simplify($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>): void
            public static Simplify($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            public constructor()
        }
        /** LODGroup lets you group multiple Renderers into LOD levels.
        */
        class LODGroup extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The local reference point against which the LOD distance is calculated.
            */
            public get localReferencePoint(): UnityEngine.Vector3;
            public set localReferencePoint(value: UnityEngine.Vector3);
            /** The size of the LOD object in local space.
            */
            public get size(): number;
            public set size(value: number);
            /** The number of LOD levels.
            */
            public get lodCount(): number;
            /** Specify whether the last LOD level is a BillboardRenderer.
            */
            public get lastLODBillboard(): boolean;
            public set lastLODBillboard(value: boolean);
            /** The LOD fade mode used.
            */
            public get fadeMode(): UnityEngine.LODFadeMode;
            public set fadeMode(value: UnityEngine.LODFadeMode);
            /** Specify if the cross-fading should be animated by time. The animation duration is specified globally as crossFadeAnimationDuration.
            */
            public get animateCrossFading(): boolean;
            public set animateCrossFading(value: boolean);
            /** Allows you to enable or disable the LODGroup.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The cross-fading animation duration in seconds. ArgumentException will be thrown if it is set to zero or a negative value.
            */
            public static get crossFadeAnimationDuration(): number;
            public static set crossFadeAnimationDuration(value: number);
            /** Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).
            */
            public RecalculateBounds(): void
            /** Returns the array of LODs.
            * @returns The LOD array. 
            */
            public GetLODs(): System.Array$1<UnityEngine.LOD>
            /** Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.
            * @param $lods The LODs to use for this group.
            */
            public SetLODs($lods: System.Array$1<UnityEngine.LOD>): void
            /** * @param $index The LOD level to use. Passing index < 0 will return to standard LOD processing.
            */
            public ForceLOD($index: number): void
            public constructor()
        }
        /** The LOD (level of detail) fade modes. Modes other than LODFadeMode.None will result in Unity calculating a blend factor for blending/interpolating between two neighbouring LODs and pass it to your shader.
        */
        enum LODFadeMode { None = 0, CrossFade = 1, SpeedTree = 2 }
        /** Structure for building a LOD for passing to the SetLODs function.
        */
        class LOD extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Anisotropic filtering mode.
        */
        enum AnisotropicFiltering { Disable = 0, Enable = 1, ForceEnable = 2 }
        /** Wrap mode for textures.
        */
        enum TextureWrapMode { Repeat = 0, Clamp = 1, Mirror = 2, MirrorOnce = 3 }
        /** Filtering mode for textures. Corresponds to the settings in a.
        */
        enum FilterMode { Point = 0, Bilinear = 1, Trilinear = 2 }
        /** Format used when creating textures from scripts.
        */
        enum TextureFormat { Alpha8 = 1, ARGB4444 = 2, RGB24 = 3, RGBA32 = 4, ARGB32 = 5, RGB565 = 7, R16 = 9, DXT1 = 10, DXT5 = 12, RGBA4444 = 13, BGRA32 = 14, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, YUY2 = 21, RGB9e5Float = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, ATC_RGB4 = -127, ATC_RGBA8 = -127, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB = 45, ETC2_RGBA1 = 46, ETC2_RGBA8 = 47, ASTC_4x4 = 48, ASTC_5x5 = 49, ASTC_6x6 = 50, ASTC_8x8 = 51, ASTC_10x10 = 52, ASTC_12x12 = 53, ETC_RGB4_3DS = 60, ETC_RGBA8_3DS = 61, RG16 = 62, R8 = 63, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, ASTC_HDR_4x4 = 66, ASTC_HDR_5x5 = 67, ASTC_HDR_6x6 = 68, ASTC_HDR_8x8 = 69, ASTC_HDR_10x10 = 70, ASTC_HDR_12x12 = 71, RG32 = 72, RGB48 = 73, RGBA64 = 74, ASTC_RGB_4x4 = 48, ASTC_RGB_5x5 = 49, ASTC_RGB_6x6 = 50, ASTC_RGB_8x8 = 51, ASTC_RGB_10x10 = 52, ASTC_RGB_12x12 = 53, ASTC_RGBA_4x4 = 54, ASTC_RGBA_5x5 = 55, ASTC_RGBA_6x6 = 56, ASTC_RGBA_8x8 = 57, ASTC_RGBA_10x10 = 58, ASTC_RGBA_12x12 = 59, PVRTC_2BPP_RGB = -127, PVRTC_2BPP_RGBA = -127, PVRTC_4BPP_RGB = -127, PVRTC_4BPP_RGBA = -127 }
        /** Class for handling 3D Textures, Use this to create.
        */
        class Texture3D extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** The depth of the texture (Read Only).
            */
            public get depth(): number;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Updates Unity texture to use different native texture object.
            * @param $nativeTex Native 3D texture object.
            */
            public UpdateExternalTexture($nativeTex: System.IntPtr): void
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($miplevel: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels(): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($miplevel: number): System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32(): System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>): void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>): void
            /** Creates Unity Texture out of externally created native texture object.
            * @param $nativeTex Native 3D texture object.
            * @param $width Width of texture in pixels.
            * @param $height Height of texture in pixels.
            * @param $depth Depth of texture in pixels
            * @param $format Format of underlying texture object.
            * @param $mipmap Does the texture have mipmaps?
            */
            public static CreateExternalTexture($width: number, $height: number, $depth: number, $format: UnityEngine.TextureFormat, $mipChain: boolean, $nativeTex: System.IntPtr): UnityEngine.Texture3D
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply($updateMipmaps: boolean, $makeNoLongerReadable: boolean): void
            public Apply($updateMipmaps: boolean): void
            public Apply(): void
            /** Sets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel($x: number, $y: number, $z: number, $color: UnityEngine.Color): void
            /** Sets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel($x: number, $y: number, $z: number, $color: UnityEngine.Color, $mipLevel: number): void
            /** Gets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel($x: number, $y: number, $z: number): UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel($x: number, $y: number, $z: number, $mipLevel: number): UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v, w).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $w The w coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear($u: number, $v: number, $w: number): UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v, w).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $w The w coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear($u: number, $v: number, $w: number, $mipLevel: number): UnityEngine.Color
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $nativeTex: System.IntPtr)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $nativeTex: System.IntPtr, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $nativeTex: System.IntPtr)
            public constructor()
        }
        /** Class for handling 2D texture arrays.
        */
        class Texture2DArray extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** Read Only. This property is used as a parameter in some overloads of the CommandBuffer.Blit, Graphics.Blit, CommandBuffer.SetRenderTarget, and Graphics.SetRenderTarget methods to indicate that all texture array slices are bound. The value of this property is -1.
            */
            public static get allSlices(): number;
            /** Number of elements in a texture array (Read Only).
            */
            public get depth(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Gets the pixel color data for a mipmap level of a slice as Color structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($arrayElement: number, $miplevel: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a slice as Color structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($arrayElement: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a slice as Color32 structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($arrayElement: number, $miplevel: number): System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level of a slice as Color32 structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($arrayElement: number): System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number): void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number): void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply($updateMipmaps: boolean, $makeNoLongerReadable: boolean): void
            public Apply($updateMipmaps: boolean): void
            public Apply(): void
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor()
        }
        /** Class for handling Cubemap arrays.
        */
        class CubemapArray extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** Number of cubemaps in the array (Read Only).
            */
            public get cubemapCount(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $arrayElement The array slice to read pixel data from.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $arrayElement The array slice to read pixel data from.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels($face: UnityEngine.CubemapFace, $arrayElement: number): System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color32 structs.
            * @param $face The CubemapFace to read pixel data from.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number): System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color32 structs.
            * @param $face The CubemapFace to read pixel data from.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32($face: UnityEngine.CubemapFace, $arrayElement: number): System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            */
            public SetPixels($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number): void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number): void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number): void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply($updateMipmaps: boolean, $makeNoLongerReadable: boolean): void
            public Apply($updateMipmaps: boolean): void
            public Apply(): void
            public constructor($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor()
        }
        /** Class for handling Sparse Textures.
        */
        class SparseTexture extends UnityEngine.Texture {
            protected [__keep_incompatibility]: never;
            /** Get sparse texture tile width (Read Only).
            */
            public get tileWidth(): number;
            /** Get sparse texture tile height (Read Only).
            */
            public get tileHeight(): number;
            /** Is the sparse texture actually created? (Read Only)
            */
            public get isCreated(): boolean;
            /** Update sparse texture tile with color values.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            * @param $data Tile color data.
            */
            public UpdateTile($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<UnityEngine.Color32>): void
            /** Update sparse texture tile with raw pixel values.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            * @param $data Tile raw pixel data.
            */
            public UpdateTileRaw($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<number>): void
            /** Unload sparse texture tile.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            */
            public UnloadTile($tileX: number, $tileY: number, $miplevel: number): void
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number)
            public constructor($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor()
        }
        /** This enum describes how the RenderTexture is used as a VR eye texture. Instead of using the values of this enum manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
        */
        enum VRTextureUsage { None = 0, OneEye = 1, TwoEyes = 2, DeviceSpecific = 3 }
        /** Flags enumeration of the render texture memoryless modes.
        */
        enum RenderTextureMemoryless { None = 0, Color = 1, Depth = 2, MSAA = 4 }
        /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties. Avoid using the default constructor as it does not initialize some flags with the recommended values.
        */
        class RenderTextureDescriptor extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Color space conversion mode of a RenderTexture.
        */
        enum RenderTextureReadWrite { Default = 0, Linear = 1, sRGB = 2 }
        /** Structure describing an Update Zone.
        */
        class CustomRenderTextureUpdateZone extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Specify the source of a Custom Render Texture initialization.
        */
        enum CustomRenderTextureInitializationSource { TextureAndColor = 0, Material = 1 }
        /** Frequency of update or initialization of a Custom Render Texture.
        */
        enum CustomRenderTextureUpdateMode { OnLoad = 0, Realtime = 1, OnDemand = 2 }
        /** Space in which coordinates are provided for Update Zones.
        */
        enum CustomRenderTextureUpdateZoneSpace { Normalized = 0, Pixel = 1 }
        /** Utilities to compute hashes.
        */
        class HashUtilities extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Append inHash in outHash.
            * @param $inHash Hash to append.
            * @param $outHash Hash that will be updated.
            */
            public static AppendHash($inHash: $Ref<UnityEngine.Hash128>, $outHash: $Ref<UnityEngine.Hash128>): void
            /** Compute a Hash128 of a Matrix4x4.
            * @param $value The Matrix4x4 to hash.
            * @param $hash The computed hash.
            */
            public static QuantisedMatrixHash($value: $Ref<UnityEngine.Matrix4x4>, $hash: $Ref<UnityEngine.Hash128>): void
            /** Compute a Hash128 of a Vector3.
            * @param $hash The Vector3 to hash.
            * @param $value The computed hash.
            */
            public static QuantisedVectorHash($value: $Ref<UnityEngine.Vector3>, $hash: $Ref<UnityEngine.Hash128>): void
            /** Compute a 128 bit hash based on a value. the type of the value must be a value type.
            * @param $value A reference to the value to hash.
            * @param $hash A reference to the Hash128 to updated with the computed hash.
            */
            public static ComputeHash128($value: System.Array$1<number>, $hash: $Ref<UnityEngine.Hash128>): void
        }
        /** Utilities to compute hashes with unsafe code.
        */
        class HashUnsafeUtilities extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Cursor API for setting the cursor (mouse pointer).
        */
        class Cursor extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Determines whether the hardware pointer is visible or not.
            */
            public static get visible(): boolean;
            public static set visible(value: boolean);
            /** Determines whether the hardware pointer is locked to the center of the view, constrained to the window, or not constrained at all.
            */
            public static get lockState(): UnityEngine.CursorLockMode;
            public static set lockState(value: UnityEngine.CursorLockMode);
            /** Sets a custom cursor to use as your cursor.
            * @param $texture The texture to use for the cursor. To use a texture, import it with `Read/Write` enabled. Alternatively, you can use the default cursor import setting. If you created your cursor texture from code, it must be in RGBA32 format, have alphaIsTransparency enabled, and have no mip chain. To use the default cursor, set the texture to `Null`.
            * @param $hotspot The offset from the top left of the texture to use as the target point. This must be in the bounds of the cursor.
            * @param $cursorMode Whether to render this cursor as a hardware cursor on supported platforms, or force software cursor.
            */
            public static SetCursor($texture: UnityEngine.Texture2D, $hotspot: UnityEngine.Vector2, $cursorMode: UnityEngine.CursorMode): void
            public constructor()
        }
        /** Determines whether the mouse cursor is rendered using software rendering or, on supported platforms, hardware rendering.
        */
        enum CursorMode { Auto = 0, ForceSoftware = 1 }
        /** How the cursor should behave.
        */
        enum CursorLockMode { None = 0, Locked = 1, Confined = 2 }
        /** Initializes a new instance of the Logger.
        */
        class Logger extends System.Object implements UnityEngine.ILogger, UnityEngine.ILogHandler {
            protected [__keep_incompatibility]: never;
            /** Set  Logger.ILogHandler.
            */
            public get logHandler(): UnityEngine.ILogHandler;
            public set logHandler(value: UnityEngine.ILogHandler);
            /** To runtime toggle debug logging [ON/OFF].
            */
            public get logEnabled(): boolean;
            public set logEnabled(value: boolean);
            /** To selective enable debug log message.
            */
            public get filterLogType(): UnityEngine.LogType;
            public set filterLogType(value: UnityEngine.LogType);
            /** Check logging is enabled based on the LogType.
            * @param $logType The type of the log message.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            public IsLogTypeAllowed($logType: UnityEngine.LogType): boolean
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($logType: UnityEngine.LogType, $message: any): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($logType: UnityEngine.LogType, $tag: string, $message: any): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($message: any): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($tag: string, $message: any): void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log($tag: string, $message: any, $context: UnityEngine.Object): void
            /** A variant of Logger.Log that logs an warning message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogWarning($tag: string, $message: any): void
            /** A variant of Logger.Log that logs an warning message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogWarning($tag: string, $message: any, $context: UnityEngine.Object): void
            /** A variant of Logger.Log that logs an error message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogError($tag: string, $message: any): void
            /** A variant of Logger.Log that logs an error message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogError($tag: string, $message: any, $context: UnityEngine.Object): void
            /** A variant of Logger.Log that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            public LogException($exception: System.Exception): void
            /** A variant of Logger.Log that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            public LogException($exception: System.Exception, $context: UnityEngine.Object): void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            public LogFormat($logType: UnityEngine.LogType, $format: string, ...args: any[]): void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            public LogFormat($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]): void
            public constructor($logHandler: UnityEngine.ILogHandler)
            public constructor()
        }
        /** A collection of common color functions.
        */
        class ColorUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Attempts to convert a html color string.
            * @param $htmlString Case insensitive html string to be converted into a color.
            * @param $color The converted color.
            * @returns True if the string was successfully converted else false. 
            */
            public static TryParseHtmlString($htmlString: string, $color: $Ref<UnityEngine.Color>): boolean
            /** Returns the color as a hexadecimal string in the format "RRGGBB".
            * @param $color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGB($color: UnityEngine.Color): string
            /** Returns the color as a hexadecimal string in the format "RRGGBBAA".
            * @param $color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGBA($color: UnityEngine.Color): string
            public constructor()
        }
        /** Color key used by Gradient.
        */
        class GradientColorKey extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Alpha key used by Gradient.
        */
        class GradientAlphaKey extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Color interpolation mode used by Gradient.
        */
        enum GradientMode { Blend = 0, Fixed = 1, PerceptualBlend = 2 }
        /** Ping any given IP address (given in dot notation).
        */
        class Ping extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Has the ping function completed?
            */
            public get isDone(): boolean;
            /** This property contains the ping time result in milliseconds after isDone returns true.
            */
            public get time(): number;
            /** The IP target of the ping.
            */
            public get ip(): string;
            public DestroyPing(): void
            public constructor($address: string)
            public constructor()
        }
        /** An exception thrown by the PlayerPrefs class in a  web player build.
        */
        class PlayerPrefsException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor($error: string)
            public constructor()
        }
        /** PlayerPrefs is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.
        */
        class PlayerPrefs extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Sets a single integer value for the preference identified by the given key. You can use PlayerPrefs.GetInt to retrieve this value.
            */
            public static SetInt($key: string, $value: number): void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt($key: string, $defaultValue: number): number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt($key: string): number
            /** Sets the float value of the preference identified by the given key. You can use PlayerPrefs.GetFloat to retrieve this value.
            */
            public static SetFloat($key: string, $value: number): void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat($key: string, $defaultValue: number): number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat($key: string): number
            /** Sets a single string value for the preference identified by the given key. You can use PlayerPrefs.GetString to retrieve this value. 
            */
            public static SetString($key: string, $value: string): void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString($key: string, $defaultValue: string): string
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString($key: string): string
            /** Returns true if the given key exists in PlayerPrefs, otherwise returns false.
            */
            public static HasKey($key: string): boolean
            /** Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact.
            */
            public static DeleteKey($key: string): void
            /** Removes all keys and values from the preferences. Use with caution.
            */
            public static DeleteAll(): void
            /** Saves all modified preferences.
            */
            public static Save(): void
            public constructor()
        }
        /** Base class to derive custom property attributes from. Use this to create custom attributes for script variables.
        */
        class PropertyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Optional field to specify the order that multiple DecorationDrawers should be drawn in.
            */
            public get order(): number;
            public set order(value: number);
        }
        /** Use this attribute to add a context menu to a field that calls a  named method.
        */
        class ContextMenuItemAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The name of the context menu item.
            */
            public name: string
            /** The name of the function that should be called.
            */
            public function: string
            public constructor($name: string, $function: string)
            public constructor()
        }
        /** Use this attribute on enum value declarations to change the display name shown in the Inspector.
        */
        class InspectorNameAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Name to display in the Inspector.
            */
            public displayName: string
            public constructor($displayName: string)
            public constructor()
        }
        /** Specify a tooltip for a field in the Inspector window.
        */
        class TooltipAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The tooltip text.
            */
            public tooltip: string
            public constructor($tooltip: string)
            public constructor()
        }
        /** Use this PropertyAttribute to add some spacing in the Inspector.
        */
        class SpaceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The spacing in pixels.
            */
            public height: number
            public constructor()
            public constructor($height: number)
        }
        /** Use this PropertyAttribute to add a header above some fields in the Inspector.
        */
        class HeaderAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The header text.
            */
            public header: string
            public constructor($header: string)
            public constructor()
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific range.
        */
        class RangeAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public min: number
            public max: number
            public constructor($min: number, $max: number)
            public constructor()
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific minimum value.
        */
        class MinAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The minimum allowed value.
            */
            public min: number
            public constructor($min: number)
            public constructor()
        }
        /** Attribute to make a string be edited with a multi-line textfield.
        */
        class MultilineAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public lines: number
            public constructor()
            public constructor($lines: number)
        }
        /** Attribute to make a string be edited with a height-flexible and scrollable text area.
        */
        class TextAreaAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The minimum amount of lines the text area will use.
            */
            public minLines: number
            /** The maximum amount of lines the text area can show before it starts using a scrollbar.
            */
            public maxLines: number
            public constructor()
            public constructor($minLines: number, $maxLines: number)
        }
        /** Attribute used to configure the usage of the ColorField and Color Picker for a color.
        */
        class ColorUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** If false then the alpha bar is hidden in the ColorField and the alpha value is not shown in the Color Picker.
            */
            public showAlpha: boolean
            /** If set to true the Color is treated as a HDR color.
            */
            public hdr: boolean
            public constructor($showAlpha: boolean)
            public constructor($showAlpha: boolean, $hdr: boolean)
            public constructor()
        }
        /** Controls how the Gradient inspector editor treats the color values.
        */
        class GradientUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** If set to true the Gradient uses HDR colors.
            */
            public hdr: boolean
            /** The color space the Gradient uses.
            */
            public colorSpace: UnityEngine.ColorSpace
            public constructor($hdr: boolean)
            public constructor($hdr: boolean, $colorSpace: UnityEngine.ColorSpace)
            public constructor()
        }
        /** Attribute used to make a float, int, or string variable in a script be delayed.
        */
        class DelayedAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Disables reordering of an array or list in the Inspector window.
        */
        class NonReorderableAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Easily generate random data for games.
        */
        class Random extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Gets or sets the full internal state of the random number generator.
            */
            public static get state(): UnityEngine.Random.State;
            public static set state(value: UnityEngine.Random.State);
            /** Returns a random float within [0.0..1.0] (range is inclusive) (Read Only).
            */
            public static get value(): number;
            /** Returns a random point inside or on a sphere with radius 1.0 (Read Only).
            */
            public static get insideUnitSphere(): UnityEngine.Vector3;
            /** Returns a random point inside or on a circle with radius 1.0 (Read Only).
            */
            public static get insideUnitCircle(): UnityEngine.Vector2;
            /** Returns a random point on the surface of a sphere with radius 1.0 (Read Only).
            */
            public static get onUnitSphere(): UnityEngine.Vector3;
            /** Returns a random rotation (Read Only).
            */
            public static get rotation(): UnityEngine.Quaternion;
            /** Returns a random rotation with uniform distribution (Read Only).
            */
            public static get rotationUniform(): UnityEngine.Quaternion;
            /** Initializes the random number generator state with a seed.
            * @param $seed Seed used to initialize the random number generator.
            */
            public static InitState($seed: number): void
            /** Returns a random float within [minInclusive..maxInclusive] (range is inclusive).
            */
            public static Range($minInclusive: number, $maxInclusive: number): number
            /** Return a random int within [minInclusive..maxExclusive) (Read Only).
            */
            public static Range($minInclusive: number, $maxExclusive: number): number
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV(): UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV($hueMin: number, $hueMax: number): UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number): UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number): UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number, $alphaMin: number, $alphaMax: number): UnityEngine.Color
        }
        /** Attribute to specify an icon for a MonoBehaviour or ScriptableObject.
        */
        class IconAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** A project-relative path to a texture.
            */
            public get path(): string;
            public constructor($path: string)
            public constructor()
        }
        /** Derive from this base class to provide alternative implementations to the C# behavior of specific Resources methods.
        */
        class ResourcesAPI extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The specific ResourcesAPI instance to use to handle overridden Resources methods.
            */
            public static get overrideAPI(): UnityEngine.ResourcesAPI;
            public static set overrideAPI(value: UnityEngine.ResourcesAPI);
        }
        /** The Resources class allows you to find and access Objects including assets.
        */
        class Resources extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns a list of all objects of Type type.
            */
            public static FindObjectsOfTypeAll($type: System.Type): System.Array$1<UnityEngine.Object>
            /** Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.
            * @param $path Path to the target resource to load.
            * @param $systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load($path: string): UnityEngine.Object
            /** Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.
            * @param $path Path to the target resource to load.
            * @param $systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load($path: string, $systemTypeInstance: System.Type): UnityEngine.Object
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAsync($path: string): UnityEngine.ResourceRequest
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param $systemTypeInstance Type filter for objects returned.
            */
            public static LoadAsync($path: string, $type: System.Type): UnityEngine.ResourceRequest
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param $systemTypeInstance Type filter for objects returned.
            */
            public static LoadAll($path: string, $systemTypeInstance: System.Type): System.Array$1<UnityEngine.Object>
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAll($path: string): System.Array$1<UnityEngine.Object>
            public static GetBuiltinResource($type: System.Type, $path: string): UnityEngine.Object
            /** Unloads assetToUnload from memory.
            */
            public static UnloadAsset($assetToUnload: UnityEngine.Object): void
            /** Unloads assets that are not used.
            * @returns Object on which you can yield to wait until the operation completes. 
            */
            public static UnloadUnusedAssets(): UnityEngine.AsyncOperation
            /** Translates an instance ID to an object reference.
            * @param $instanceID Instance ID of an Object.
            * @returns Resolved reference or null if the instance ID didn't match anything. 
            */
            public static InstanceIDToObject($instanceID: number): UnityEngine.Object
            public static InstanceIDToObjectList($instanceIDs: Unity.Collections.NativeArray$1<number>, $objects: System.Collections.Generic.List$1<UnityEngine.Object>): void
            /** Returns true if the given instance ID corresponds to a valid Object in memory. The Object could have been deleted or not loaded into memory yet.
            * @param $instanceID ID of an Object.
            */
            public static InstanceIDIsValid($instanceId: number): boolean
            public static InstanceIDsToValidArray($instanceIDs: Unity.Collections.NativeArray$1<number>, $validArray: Unity.Collections.NativeArray$1<boolean>): void
            public constructor()
        }
        /** Asynchronous instantiate operation on UnityEngine.Object type.
        */
        class AsyncInstantiateOperation extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** If isDone is true, then Result contains the instantiated objects. The size of the array is the same as the 'count' argument for the InstantiateAsync call.
            */
            public get Result(): System.Array$1<UnityEngine.Object>;
            /** This property can be true only if allowSceneActivation is set to false, and if the operation has already completed everything needed for object instantiation except for the main thread integrating the objects and calling their Awake methods. Users can set allowSceneActivation to true to trigger the activation or call the Cancel method to cancel instantiation.
            * @returns True if the operation is waits for user to allow the scene activation. 
            */
            public IsWaitingForSceneActivation(): boolean
            /** Blocks the current thread until this operation is done.
            */
            public WaitForCompletion(): void
            /** Method that cancels all the operations connected to the asynchronous instantiation if the operation is not done yet, that is, where isDone == false. This method deletes all the objects created so far, which are not visible to users while they're not activated, and stops all the internal jobs connected to the operation.
            */
            public Cancel(): void
            /** Gets the target duration allowed per frame to integrate instantiated object operations, in milliseconds.
            */
            public static GetIntegrationTimeMS(): number
            /** Sets the target duration allowed per frame to integrate instantiated object operations, in milliseconds.
            */
            public static SetIntegrationTimeMS($integrationTimeMS: number): void
            public constructor()
        }
        /** Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.
        */
        class DisallowMultipleComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** The RequireComponent attribute automatically adds required components as dependencies.
        */
        class RequireComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public m_Type0: System.Type
            public m_Type1: System.Type
            public m_Type2: System.Type
            public constructor($requiredComponent: System.Type)
            public constructor($requiredComponent: System.Type, $requiredComponent2: System.Type)
            public constructor($requiredComponent: System.Type, $requiredComponent2: System.Type, $requiredComponent3: System.Type)
            public constructor()
        }
        /** The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component->Scripts" menu.
        */
        class AddComponentMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public get componentMenu(): string;
            /** The order of the component in the component menu (lower is higher to the top).
            */
            public get componentOrder(): number;
            public constructor($menuName: string)
            public constructor($menuName: string, $order: number)
            public constructor()
        }
        /** Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as ".asset" files.
        */
        class CreateAssetMenuAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The display name for this type shown in the Assets/Create menu.
            */
            public get menuName(): string;
            public set menuName(value: string);
            /** The default file name used by newly created instances of this type.
            */
            public get fileName(): string;
            public set fileName(value: string);
            /** The position of the menu item within the Assets/Create menu.
            */
            public get order(): number;
            public set order(value: number);
            public constructor()
        }
        /** Use the ContextMenu attribute to add commands to the context menu of the Inspector window.
        */
        class ContextMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public menuItem: string
            public validate: boolean
            public priority: number
            public constructor($itemName: string)
            public constructor($itemName: string, $isValidateFunction: boolean)
            public constructor($itemName: string, $isValidateFunction: boolean, $priority: number)
            public constructor()
        }
        /** Makes all instances of a script execute in Edit Mode.
        */
        class ExecuteInEditMode extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Makes instances of a script always execute, both as part of Play Mode and when editing.
        */
        class ExecuteAlways extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Flags a variable to not appear in the Inspector.
        */
        class HideInInspector extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Marks the methods you want to hide from the Console window callstack. When you hide these methods they are removed from the detail area of the selected message in the Console window.
        */
        class HideInCallstackAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Provide a custom documentation URL for a class.
        */
        class HelpURLAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** The documentation URL specified for this class.
            */
            public get URL(): string;
            public constructor($url: string)
            public constructor()
        }
        /** Specifies the script execution order for a MonoBehaviour-derived class relative to other MonoBehaviour-derived types.
        */
        class DefaultExecutionOrder extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Integer which defines the execution priority order for a MonoBehaviour-derived class.
            */
            public get order(): number;
            public constructor($order: number)
            public constructor()
        }
        /** Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.
        */
        class AssemblyIsEditorAssembly extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Add this attribute to a class to prevent creating a Preset from the instances of the class.
        */
        class ExcludeFromPresetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines, and do not hold any exposed properties or functions.
        */
        class Coroutine extends UnityEngine.YieldInstruction {
            protected [__keep_incompatibility]: never;
        }
        /** Base class for custom yield instructions to suspend coroutines.
        */
        class CustomYieldInstruction extends System.Object implements System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
            /** Indicates if coroutine should be kept suspended.
            */
            public get keepWaiting(): boolean;
            public get Current(): any;
            public MoveNext(): boolean
            public Reset(): void
        }
        /** Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods.
        */
        class ExcludeFromObjectFactoryAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** The various primitives that can be created using the GameObject.CreatePrimitive function.
        */
        enum PrimitiveType { Sphere = 0, Capsule = 1, Cylinder = 2, Cube = 3, Plane = 4, Quad = 5 }
        /** Shows sorted enum values in the Inspector enum UI dropdowns i.e. EditorGUI.EnumPopup, PropertyField etc. This attribute can be applied to enum types only.
        */
        class InspectorOrderAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor($inspectorSort?: UnityEngine.InspectorSort, $sortDirection?: UnityEngine.InspectorSortDirection)
            public constructor()
        }
        /** Defines if enum should be shown sorted by name or by value.
        */
        enum InspectorSort { ByName = 0, ByValue = 1 }
        /** Defines if enum should be shown in ascending or descending order.
        */
        enum InspectorSortDirection { Ascending = 0, Descending = 1 }
        /** MonoBehaviour is a base class that many Unity scripts derive from.
        */
        class MonoBehaviour extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Cancellation token raised when the MonoBehaviour is destroyed (Read Only).
            */
            public get destroyCancellationToken(): System.Threading.CancellationToken;
            /** Disabling this lets you skip the GUI layout phase.
            */
            public get useGUILayout(): boolean;
            public set useGUILayout(value: boolean);
            /** Is any invoke pending on this MonoBehaviour?
            */
            public IsInvoking(): boolean
            /** Cancels all Invoke calls on this MonoBehaviour.
            */
            public CancelInvoke(): void
            /** Invokes the method methodName in time seconds.
            */
            public Invoke($methodName: string, $time: number): void
            /** Invokes the method methodName in time seconds, then repeatedly every repeatRate seconds.
            * @param $methodName The name of a method to invoke.
            * @param $time Start invoking after n seconds.
            * @param $repeatRate Repeat every n seconds.
            */
            public InvokeRepeating($methodName: string, $time: number, $repeatRate: number): void
            /** Cancels all Invoke calls with name methodName on this behaviour.
            */
            public CancelInvoke($methodName: string): void
            /** Is any invoke on methodName pending?
            */
            public IsInvoking($methodName: string): boolean
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine($methodName: string): UnityEngine.Coroutine
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine($methodName: string, $value: any): UnityEngine.Coroutine
            /** Starts a Coroutine.
            */
            public StartCoroutine($routine: System.Collections.IEnumerator): UnityEngine.Coroutine
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine($routine: System.Collections.IEnumerator): void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine($routine: UnityEngine.Coroutine): void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine($methodName: string): void
            /** Stops all coroutines running on this behaviour.
            */
            public StopAllCoroutines(): void
            /** Logs message to the Unity Console (identical to Debug.Log).
            */
            public static print($message: any): void
            public constructor()
        }
        /** Use this attribute to get a callback when the runtime is starting up and loading the first scene.
        */
        class RuntimeInitializeOnLoadMethodAttribute extends UnityEngine.Scripting.PreserveAttribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Controling the callback invocation time.
            */
            public get loadType(): UnityEngine.RuntimeInitializeLoadType;
            public constructor()
            public constructor($loadType: UnityEngine.RuntimeInitializeLoadType)
        }
        /** Specifies when to get a callback during the startup of the runtime or when entering play mode in the Editor. Used with RuntimeInitializeOnLoadMethodAttribute.
        */
        enum RuntimeInitializeLoadType { AfterSceneLoad = 0, BeforeSceneLoad = 1, AfterAssembliesLoaded = 2, BeforeSplashScreen = 3, SubsystemRegistration = 4 }
        /** Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.
        */
        class SelectionBaseAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        class StackTraceUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            public static ExtractStackTrace(): string
            public static ExtractStringFromException($exception: any): string
        }
        class UnityException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($message: string)
            public constructor($message: string, $innerException: System.Exception)
        }
        class MissingComponentException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($message: string)
            public constructor($message: string, $innerException: System.Exception)
        }
        class UnassignedReferenceException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($message: string)
            public constructor($message: string, $innerException: System.Exception)
        }
        class MissingReferenceException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($message: string)
            public constructor($message: string, $innerException: System.Exception)
        }
        /** Represents a raw text or binary file asset.
        */
        class TextAsset extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The raw bytes of the text asset. (Read Only)
            */
            public get bytes(): System.Array$1<number>;
            /** The text contents of the file as a string. (Read Only)
            */
            public get text(): string;
            /** The size of the text asset data in bytes. (Read Only)
            */
            public get dataSize(): bigint;
            public constructor()
            public constructor($text: string)
        }
        /** Declares an assembly to be compatible (API wise) with a specific Unity API. Used by internal tools to avoid processing the assembly in order to decide whether assemblies may be using old Unity API.
        */
        class UnityAPICompatibilityVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Version of Unity API.
            */
            public get version(): string;
            public constructor($version: string, $checkOnlyUnityVersion: boolean)
            public constructor($version: string, $configurationAssembliesHashes: System.Array$1<string>)
            public constructor()
        }
        class AsyncInstantiateOperation$1<T> extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
        }
        /** Options to specify if and how to sort objects returned by a function.
        */
        enum FindObjectsSortMode { None = 0, InstanceID = 1 }
        /** Options to control whether object find functions return inactive objects.
        */
        enum FindObjectsInactive { Exclude = 0, Include = 1 }
        /** Bit mask that controls object destruction, saving and visibility in inspectors.
        */
        enum HideFlags { None = 0, HideInHierarchy = 1, HideInInspector = 2, DontSaveInEditor = 4, NotEditable = 8, DontSaveInBuild = 16, DontUnloadUnusedAsset = 32, DontSave = 52, HideAndDontSave = 61 }
        /** Waits until the end of the frame after Unity has rendered every Camera and GUI, just before displaying the frame on screen.
        */
        class WaitForEndOfFrame extends UnityEngine.YieldInstruction {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Waits until next fixed frame rate update function. Additional resources: MonoBehaviour.FixedUpdate.
        */
        class WaitForFixedUpdate extends UnityEngine.YieldInstruction {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Suspends the coroutine execution for the given amount of seconds using scaled time.
        */
        class WaitForSeconds extends UnityEngine.YieldInstruction {
            protected [__keep_incompatibility]: never;
            public constructor($seconds: number)
            public constructor()
        }
        /** Suspends the coroutine execution for the given amount of seconds using unscaled time.
        */
        class WaitForSecondsRealtime extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
            /** The given amount of seconds that the yield instruction will wait for.
            */
            public get waitTime(): number;
            public set waitTime(value: number);
            public get keepWaiting(): boolean;
            public constructor($time: number)
            public constructor()
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to true.
        */
        class WaitUntil extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor($predicate: System.Func$1<boolean>)
            public constructor()
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to false.
        */
        class WaitWhile extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor($predicate: System.Func$1<boolean>)
            public constructor()
        }
        /** Webplayer security related class. Not supported from 5.4.0 onwards.
        */
        class Security extends System.Object {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        class Types extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Force Unity to serialize a private field.
        */
        class SerializeField extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** A that instructs Unity to serialize a field as a reference instead of as a value.
        */
        class SerializeReference extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode.
        */
        class PreferBinarySerialization extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        interface ISerializationCallbackReceiver {
            /** Implement this method to receive a callback before Unity serializes your object.
            */
            OnBeforeSerialize(): void
            /** Implement this method to receive a callback after Unity deserializes your object.
            */
            OnAfterDeserialize(): void
        }
        /** ComputeBuffer type.
        */
        enum ComputeBufferType { Default = 0, Raw = 1, Append = 2, Counter = 4, Constant = 8, Structured = 16, DrawIndirect = 256, IndirectArguments = 256, GPUMemory = 512 }
        /** Intended usage of the buffer.
        */
        enum ComputeBufferMode { Immutable = 0, Dynamic = 1, Circular = 2, StreamOut = 3, SubUpdates = 4 }
        /** Compute Shader asset.
        */
        class ComputeShader extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The local keyword space of this compute shader.
            */
            public get keywordSpace(): UnityEngine.Rendering.LocalKeywordSpace;
            /** An array containing names of the local shader keywords that are currently enabled for this compute shader.
            */
            public get shaderKeywords(): System.Array$1<string>;
            public set shaderKeywords(value: System.Array$1<string>);
            /** An array containing the local shader keywords that are currently enabled for this compute shader.
            */
            public get enabledKeywords(): System.Array$1<UnityEngine.Rendering.LocalKeyword>;
            public set enabledKeywords(value: System.Array$1<UnityEngine.Rendering.LocalKeyword>);
            /** Find ComputeShader kernel index.
            * @param $name Name of kernel function.
            * @returns The Kernel index. If the kernel is not found, Unity logs a "FindKernel failed" error message and raises an ArgumentException. 
            */
            public FindKernel($name: string): number
            /** Checks whether a shader contains a given kernel.
            * @param $name The name of the kernel to look for.
            * @returns True if the kernel is found, false otherwise. 
            */
            public HasKernel($name: string): boolean
            /** Set a float parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetFloat($nameID: number, $val: number): void
            /** Set an integer parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetInt($nameID: number, $val: number): void
            /** Set a vector parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetVector($nameID: number, $val: UnityEngine.Vector4): void
            /** Set a Matrix parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetMatrix($nameID: number, $val: UnityEngine.Matrix4x4): void
            /** Set a vector array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetVectorArray($nameID: number, $values: System.Array$1<UnityEngine.Vector4>): void
            /** Set a Matrix array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetMatrixArray($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture, $mipLevel: number): void
            /** Set a texture parameter from a global texture property.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $globalTextureName Global texture property to assign to shader.
            * @param $globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal($kernelIndex: number, $nameID: number, $globalTextureNameID: number): void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer($kernelIndex: number, $nameID: number, $buffer: UnityEngine.ComputeBuffer): void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer($kernelIndex: number, $nameID: number, $buffer: UnityEngine.GraphicsBuffer): void
            /** Get kernel thread group sizes.
            * @param $kernelIndex Which kernel to query. A single compute shader asset can have multiple kernel entry points.
            * @param $x Thread group size in the X dimension.
            * @param $y Thread group size in the Y dimension.
            * @param $z Thread group size in the Z dimension.
            */
            public GetKernelThreadGroupSizes($kernelIndex: number, $x: $Ref<number>, $y: $Ref<number>, $z: $Ref<number>): void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $threadGroupsX Number of work groups in the X dimension.
            * @param $threadGroupsY Number of work groups in the Y dimension.
            * @param $threadGroupsZ Number of work groups in the Z dimension.
            */
            public Dispatch($kernelIndex: number, $threadGroupsX: number, $threadGroupsY: number, $threadGroupsZ: number): void
            /** Enables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword($keyword: string): void
            /** Disables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword($keyword: string): void
            /** Checks whether a local shader keyword is enabled for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if the given Rendering.LocalKeyword is enabled for this compute shader. Otherwise, returns false. 
            */
            public IsKeywordEnabled($keyword: string): boolean
            /** Enables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): void
            /** Disables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): void
            /** Sets the state of a local shader keyword for this compute shader.
            * @param $keyword The Rendering.LocalKeyword keyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public SetKeyword($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $value: boolean): void
            /** Checks whether a local shader keyword is enabled for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if the given Rendering.LocalKeyword is enabled for this compute shader. Otherwise, returns false. 
            */
            public IsKeywordEnabled($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>): boolean
            /** Allows you to check whether the current end user device supports the features required to run the specified compute shader kernel.
            * @param $kernelIndex Which kernel to query.
            * @returns True if the specified compute kernel is able to run on the current end user device, false otherwise. 
            */
            public IsSupported($kernelIndex: number): boolean
            /** Set a float parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetFloat($name: string, $val: number): void
            /** Set an integer parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetInt($name: string, $val: number): void
            /** Set a vector parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetVector($name: string, $val: UnityEngine.Vector4): void
            /** Set a Matrix parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetMatrix($name: string, $val: UnityEngine.Matrix4x4): void
            /** Set a vector array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetVectorArray($name: string, $values: System.Array$1<UnityEngine.Vector4>): void
            /** Set a Matrix array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetMatrixArray($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>): void
            /** Set multiple consecutive float parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetFloats($name: string, ...values: number[]): void
            /** Set multiple consecutive float parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetFloats($nameID: number, ...values: number[]): void
            /** Set multiple consecutive integer parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetInts($name: string, ...values: number[]): void
            /** Set multiple consecutive integer parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetInts($nameID: number, ...values: number[]): void
            /** Set a bool parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetBool($name: string, $val: boolean): void
            /** Set a bool parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetBool($nameID: number, $val: boolean): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $name: string, $texture: UnityEngine.Texture): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $name: string, $texture: UnityEngine.Texture, $mipLevel: number): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $nameID: number, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture($kernelIndex: number, $name: string, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement): void
            /** Set a texture parameter from a global texture property.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $globalTextureName Global texture property to assign to shader.
            * @param $globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal($kernelIndex: number, $name: string, $globalTextureName: string): void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer($kernelIndex: number, $name: string, $buffer: UnityEngine.ComputeBuffer): void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer($kernelIndex: number, $name: string, $buffer: UnityEngine.GraphicsBuffer): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer($nameID: number, $buffer: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer($name: string, $buffer: UnityEngine.ComputeBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer($nameID: number, $buffer: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer($name: string, $buffer: UnityEngine.GraphicsBuffer, $offset: number, $size: number): void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $argsBuffer Buffer with dispatch arguments.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            */
            public DispatchIndirect($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer, $argsOffset: number): void
            public DispatchIndirect($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer): void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $argsBuffer Buffer with dispatch arguments.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            */
            public DispatchIndirect($kernelIndex: number, $argsBuffer: UnityEngine.GraphicsBuffer, $argsOffset: number): void
            public DispatchIndirect($kernelIndex: number, $argsBuffer: UnityEngine.GraphicsBuffer): void
        }
        /** ShaderVariantCollection records which shader variants are actually used in each shader.
        */
        class ShaderVariantCollection extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Number of shaders in this collection (Read Only).
            */
            public get shaderCount(): number;
            /** Number of total variants in this collection (Read Only).
            */
            public get variantCount(): number;
            /** Number of total variants in this collection that are already warmed up (Read Only).
            */
            public get warmedUpVariantCount(): number;
            /** Is this ShaderVariantCollection already warmed up? (Read Only)
            */
            public get isWarmedUp(): boolean;
            /** Remove all shader variants from the collection.
            */
            public Clear(): void
            /** Prewarms all shader variants in this shader variant collection.
            */
            public WarmUp(): void
            /** Prewarms the given number of shader variants in this shader variant collection.
            * @param $variantCount The maximum number of variants to warm up.
            * @returns True if all variants in this shader variant collection have been warmed up, false otherwise. 
            */
            public WarmUpProgressively($variantCount: number): boolean
            public Add($variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean
            public Remove($variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean
            public Contains($variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean
            public constructor()
        }
        /** Snap values to rounded increments.
        */
        class Snapping extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap($val: number, $snap: number): number
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap($val: UnityEngine.Vector2, $snap: UnityEngine.Vector2): UnityEngine.Vector2
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @param $axis Restrict snapping to the components on these axes.
            * @returns The rounded value. 
            */
            public static Snap($val: UnityEngine.Vector3, $snap: UnityEngine.Vector3, $axis?: UnityEngine.SnapAxis): UnityEngine.Vector3
        }
        /** Defines the axes that can be snapped.
        */
        enum SnapAxis { None = 0, X = 1, Y = 2, Z = 4, All = 7 }
        /** StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.
        */
        class StaticBatchingUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Combines all children GameObjects of the staticBatchRoot for static batching.
            * @param $staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine($staticBatchRoot: UnityEngine.GameObject): void
            /** Combines all GameObjects in gos for static batching and treats staticBatchRoot as the root.
            * @param $gos The GameObjects to prepare for static batching.
            * @param $staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine($gos: System.Array$1<UnityEngine.GameObject>, $staticBatchRoot: UnityEngine.GameObject): void
            public constructor()
        }
        /** Access system and hardware information.
        */
        class SystemInfo extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Value returned by SystemInfo string properties which are not supported on the current platform.
            */
            public static unsupportedIdentifier: string
            /** The current battery level (Read Only).
            */
            public static get batteryLevel(): number;
            /** Returns the current status of the device's battery (Read Only).
            */
            public static get batteryStatus(): UnityEngine.BatteryStatus;
            /** Operating system name with version (Read Only).
            */
            public static get operatingSystem(): string;
            /** Returns the operating system family the game is running on (Read Only).
            */
            public static get operatingSystemFamily(): UnityEngine.OperatingSystemFamily;
            /** Processor name (Read Only).
            */
            public static get processorType(): string;
            /** Processor frequency in MHz (Read Only).
            */
            public static get processorFrequency(): number;
            /** Number of processors present (Read Only).
            */
            public static get processorCount(): number;
            /** Amount of system memory present (Read Only).
            */
            public static get systemMemorySize(): number;
            /** A unique device identifier. It's guaranteed to be unique for every device (Read Only).
            */
            public static get deviceUniqueIdentifier(): string;
            /** The user defined name of the device (Read Only).
            */
            public static get deviceName(): string;
            /** The model of the device (Read Only).
            */
            public static get deviceModel(): string;
            /** Is an accelerometer available on the device?
            */
            public static get supportsAccelerometer(): boolean;
            /** Is a gyroscope available on the device?
            */
            public static get supportsGyroscope(): boolean;
            /** Is the device capable of reporting its location?
            */
            public static get supportsLocationService(): boolean;
            /** Is the device capable of providing the user haptic feedback by vibration?
            */
            public static get supportsVibration(): boolean;
            /** Is there an Audio device available for playback? (Read Only)
            */
            public static get supportsAudio(): boolean;
            /** Returns the kind of device the application is running on (Read Only).
            */
            public static get deviceType(): UnityEngine.DeviceType;
            /** Amount of video memory present (Read Only).
            */
            public static get graphicsMemorySize(): number;
            /** The name of the graphics device (Read Only).
            */
            public static get graphicsDeviceName(): string;
            /** The vendor of the graphics device (Read Only).
            */
            public static get graphicsDeviceVendor(): string;
            /** The identifier code of the graphics device (Read Only).
            */
            public static get graphicsDeviceID(): number;
            /** The identifier code of the graphics device vendor (Read Only).
            */
            public static get graphicsDeviceVendorID(): number;
            /** The graphics API type used by the graphics device (Read Only).
            */
            public static get graphicsDeviceType(): UnityEngine.Rendering.GraphicsDeviceType;
            /** Returns true if the texture UV coordinate convention for this platform has Y starting at the top of the image.
            */
            public static get graphicsUVStartsAtTop(): boolean;
            /** The graphics API type and driver version used by the graphics device (Read Only).
            */
            public static get graphicsDeviceVersion(): string;
            /** Graphics device shader capability level (Read Only).
            */
            public static get graphicsShaderLevel(): number;
            /** Is graphics device using multi-threaded rendering (Read Only)?
            */
            public static get graphicsMultiThreaded(): boolean;
            /** Application's actual rendering threading mode (Read Only).
            */
            public static get renderingThreadingMode(): UnityEngine.Rendering.RenderingThreadingMode;
            /** The foveated rendering technique supported on this platform.
            */
            public static get foveatedRenderingCaps(): UnityEngine.Rendering.FoveatedRenderingCaps;
            /** True if the GPU supports hidden surface removal.
            */
            public static get hasHiddenSurfaceRemovalOnGPU(): boolean;
            /** Returns true when the GPU has native support for indexing uniform arrays in fragment shaders without restrictions.
            */
            public static get hasDynamicUniformArrayIndexingInFragmentShaders(): boolean;
            /** Are built-in shadows supported? (Read Only)
            */
            public static get supportsShadows(): boolean;
            /** Is sampling raw depth from shadowmaps supported? (Read Only)
            */
            public static get supportsRawShadowDepthSampling(): boolean;
            /** Whether motion vectors are supported on this platform.
            */
            public static get supportsMotionVectors(): boolean;
            /** Are 3D (volume) textures supported? (Read Only)
            */
            public static get supports3DTextures(): boolean;
            /** Are compressed formats for 3D (volume) textures supported? (Read Only).
            */
            public static get supportsCompressed3DTextures(): boolean;
            /** Are 2D Array textures supported? (Read Only)
            */
            public static get supports2DArrayTextures(): boolean;
            /** Are 3D (volume) RenderTextures supported? (Read Only)
            */
            public static get supports3DRenderTextures(): boolean;
            /** Are Cubemap Array textures supported? (Read Only)
            */
            public static get supportsCubemapArrayTextures(): boolean;
            /** Returns true when anisotropic filtering is supported on the device.
            */
            public static get supportsAnisotropicFilter(): boolean;
            /** Support for various Graphics.CopyTexture cases (Read Only).
            */
            public static get copyTextureSupport(): UnityEngine.Rendering.CopyTextureSupport;
            /** Are compute shaders supported? (Read Only)
            */
            public static get supportsComputeShaders(): boolean;
            /** Are geometry shaders supported? (Read Only)
            */
            public static get supportsGeometryShaders(): boolean;
            /** Are tessellation shaders supported? (Read Only)
            */
            public static get supportsTessellationShaders(): boolean;
            /** Boolean that indicates if SV_RenderTargetArrayIndex can be used in a vertex shader (true if it can be used, false if not).
            */
            public static get supportsRenderTargetArrayIndexFromVertexShader(): boolean;
            /** Is GPU draw call instancing supported? (Read Only)
            */
            public static get supportsInstancing(): boolean;
            /** Does the hardware support quad topology? (Read Only)
            */
            public static get supportsHardwareQuadTopology(): boolean;
            /** Are 32-bit index buffers supported? (Read Only)
            */
            public static get supports32bitsIndexBuffer(): boolean;
            /** Are sparse textures supported? (Read Only)
            */
            public static get supportsSparseTextures(): boolean;
            /** How many simultaneous render targets (MRTs) are supported? (Read Only)
            */
            public static get supportedRenderTargetCount(): number;
            /** Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.
            */
            public static get supportsSeparatedRenderTargetsBlend(): boolean;
            /** The maximum number of random write targets (UAV) that Unity supports simultaneously. (Read Only)
            */
            public static get supportedRandomWriteTargetCount(): number;
            /** Are multisampled textures supported? (Read Only)
            */
            public static get supportsMultisampledTextures(): number;
            /** Boolean that indicates whether multisampled texture arrays are supported (true if supported, false if not supported).
            */
            public static get supportsMultisampled2DArrayTextures(): boolean;
            /** Returns true if multisampled textures are resolved automatically
            */
            public static get supportsMultisampleAutoResolve(): boolean;
            /** Returns true if the 'Mirror Once' texture wrap mode is supported. (Read Only)
            */
            public static get supportsTextureWrapMirrorOnce(): number;
            /** This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far). (Read Only)
            */
            public static get usesReversedZBuffer(): boolean;
            /** What NPOT (non-power of two size) texture support does the GPU provide? (Read Only)
            */
            public static get npotSupport(): UnityEngine.NPOTSupport;
            /** Maximum texture size in pixels (Read Only).
            */
            public static get maxTextureSize(): number;
            /** Maximum 3D texture size in pixels (Read Only).
            */
            public static get maxTexture3DSize(): number;
            /** Maximum number of slices in a Texture array (Read Only).
            */
            public static get maxTextureArraySlices(): number;
            /** Maximum cubemap texture size in pixels (Read Only).
            */
            public static get maxCubemapSize(): number;
            /** Returns the maximum anisotropic level for anisotropic filtering that is supported on the device. 
            */
            public static get maxAnisotropyLevel(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a vertex shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsVertex(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a fragment shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsFragment(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a geometry shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsGeometry(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a domain shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsDomain(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a hull shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsHull(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a compute shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsCompute(): number;
            /** The largest total number of invocations in a single local work group that can be dispatched to a compute shader (Read Only).
            */
            public static get maxComputeWorkGroupSize(): number;
            /** The maximum number of work groups that a compute shader can use in X dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeX(): number;
            /** The maximum number of work groups that a compute shader can use in Y dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeY(): number;
            /** The maximum number of work groups that a compute shader can use in Z dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeZ(): number;
            /** Size of the compute thread group that supports efficient memory sharing on the GPU (Read Only).
            */
            public static get computeSubGroupSize(): number;
            /** Returns true when the platform supports asynchronous compute queues and false if otherwise.
            */
            public static get supportsAsyncCompute(): boolean;
            /** Specifies whether the current platform supports the GPU Recorder or not. (Read Only).
            */
            public static get supportsGpuRecorder(): boolean;
            /** true if the platform supports GraphicsFences, otherwise false.
            */
            public static get supportsGraphicsFence(): boolean;
            /** Returns true if asynchronous readback of GPU data is available for this device and false otherwise.
            */
            public static get supportsAsyncGPUReadback(): boolean;
            /** Checks if ray tracing is supported by the current configuration.
            */
            public static get supportsRayTracing(): boolean;
            /** Does the current renderer support binding constant buffers directly? (Read Only)
            */
            public static get supportsSetConstantBuffer(): boolean;
            /** Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.
            */
            public static get constantBufferOffsetAlignment(): number;
            /** The maximum size of a constant buffer binding (Read Only).
            */
            public static get maxConstantBufferSize(): number;
            /** The maximum size of a graphics buffer (GraphicsBuffer, ComputeBuffer, vertex/index buffer, etc.) in bytes (Read Only).
            */
            public static get maxGraphicsBufferSize(): bigint;
            /** Returns true if the GPU supports partial mipmap chains (Read Only).
            */
            public static get hasMipMaxLevel(): boolean;
            /** Is streaming of texture mip maps supported? (Read Only)
            */
            public static get supportsMipStreaming(): boolean;
            /** True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.
            */
            public static get usesLoadStoreActions(): boolean;
            /** Returns a bitwise combination of HDRDisplaySupportFlags describing the support for HDR displays on the system.
            */
            public static get hdrDisplaySupportFlags(): UnityEngine.HDRDisplaySupportFlags;
            /** Is conservative rasterization supported? (Read Only)
            */
            public static get supportsConservativeRaster(): boolean;
            /** Boolean that indicates whether Multiview is supported (true if supported, false if not supported). (Read Only)
            */
            public static get supportsMultiview(): boolean;
            /** This property is true if the graphics API of the target build platform takes RenderBufferStoreAction.StoreAndResolve into account, false if otherwise.
            */
            public static get supportsStoreAndResolveAction(): boolean;
            /** Returns true if the platform supports multisample resolve of depth textures.
            */
            public static get supportsMultisampleResolveDepth(): boolean;
            /** Returns true if the platform supports multisample resolve of stencil textures. Otherwise, returns false.
            */
            public static get supportsMultisampleResolveStencil(): boolean;
            /** Returns true if the graphics system supports GPU draw calls with indirect argument buffers. (Read Only)
            */
            public static get supportsIndirectArgumentsBuffer(): boolean;
            /** Is render texture format supported?
            * @param $format The format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsRenderTextureFormat($format: UnityEngine.RenderTextureFormat): boolean
            /** Is blending supported on render texture format?
            * @param $format The format to look up.
            * @returns True if blending is supported on the given format. 
            */
            public static SupportsBlendingOnRenderTextureFormat($format: UnityEngine.RenderTextureFormat): boolean
            /** Tests if a RenderTextureFormat can be used with RenderTexture.enableRandomWrite.
            * @param $format The format to look up.
            * @returns True if the format can be used for random access writes. 
            */
            public static SupportsRandomWriteOnRenderTextureFormat($format: UnityEngine.RenderTextureFormat): boolean
            /** Is texture format supported on this device?
            * @param $format The TextureFormat format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsTextureFormat($format: UnityEngine.TextureFormat): boolean
            /** Indicates whether the given combination of a vertex attribute format and dimension is supported on this device.
            * @param $format The VertexAttributeFormat format to look up.
            * @param $dimension The dimension of vertex data to check for.
            * @returns True if the format with the given dimension is supported. 
            */
            public static SupportsVertexAttributeFormat($format: UnityEngine.Rendering.VertexAttributeFormat, $dimension: number): boolean
            public static IsFormatSupported($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.FormatUsage): boolean
            public static GetCompatibleFormat($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.FormatUsage): UnityEngine.Experimental.Rendering.GraphicsFormat
            /** Returns the platform-specific GraphicsFormat that is associated with the DefaultFormat.
            * @param $format The DefaultFormat format to look up.
            */
            public static GetGraphicsFormat($format: UnityEngine.Experimental.Rendering.DefaultFormat): UnityEngine.Experimental.Rendering.GraphicsFormat
            /** Checks if the target platform supports the MSAA samples count in the RenderTextureDescriptor argument.
            * @param $desc The RenderTextureDescriptor to check.
            * @returns If the target platform supports the given MSAA samples count of RenderTextureDescriptor, returns the given MSAA samples count. Otherwise returns a lower fallback MSAA samples count value that the target platform supports. 
            */
            public static GetRenderTextureSupportedMSAASampleCount($desc: UnityEngine.RenderTextureDescriptor): number
            public constructor()
        }
        /** Enumeration for SystemInfo.batteryStatus which represents the current status of the device's battery.
        */
        enum BatteryStatus { Unknown = 0, Charging = 1, Discharging = 2, NotCharging = 3, Full = 4 }
        /** Enumeration for SystemInfo.operatingSystemFamily.
        */
        enum OperatingSystemFamily { Other = 0, MacOSX = 1, Windows = 2, Linux = 3 }
        /** Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.
        */
        enum DeviceType { Unknown = 0, Handheld = 1, Console = 2, Desktop = 3 }
        /** NPOT Texture2D|textures support.
        */
        enum NPOTSupport { None = 0, Restricted = 1, Full = 2 }
        /** A set of flags that describe the level of HDR display support available on the GPU and driver.
        */
        enum HDRDisplaySupportFlags { None = 0, Supported = 1, RuntimeSwitchable = 2, AutomaticTonemapping = 4 }
        /** Provides an interface to get time information from Unity.
        */
        class Time extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The time at the beginning of the current frame in seconds since the start of the application (Read Only).
            */
            public static get time(): number;
            /** The double precision time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get timeAsDouble(): number;
            /** The time in seconds since the last non-additive scene finished loading (Read Only).
            */
            public static get timeSinceLevelLoad(): number;
            /** The double precision time in seconds since the last non-additive scene finished loading (Read Only).
            */
            public static get timeSinceLevelLoadAsDouble(): number;
            /** The interval in seconds from the last frame to the current one (Read Only).
            */
            public static get deltaTime(): number;
            /** The time at which the current MonoBehaviour.FixedUpdate started in seconds since the start of the game (Read Only).
            */
            public static get fixedTime(): number;
            /** The double precision time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedTimeAsDouble(): number;
            /** The timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get unscaledTime(): number;
            /** The double precision timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get unscaledTimeAsDouble(): number;
            /** The timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate phase (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedUnscaledTime(): number;
            /** The double precision timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedUnscaledTimeAsDouble(): number;
            /** The timeScale-independent interval in seconds from the last frame to the current one (Read Only).
            */
            public static get unscaledDeltaTime(): number;
            /** The interval in seconds of timeScale-independent ("real") time at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.(Read Only).
            */
            public static get fixedUnscaledDeltaTime(): number;
            /** The interval in seconds of in-game time at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.
            */
            public static get fixedDeltaTime(): number;
            public static set fixedDeltaTime(value: number);
            /** The maximum value of Time.deltaTime in any given frame. This is a time in seconds that limits the increase of Time.time between two frames.
            */
            public static get maximumDeltaTime(): number;
            public static set maximumDeltaTime(value: number);
            /** A smoothed out Time.deltaTime (Read Only).
            */
            public static get smoothDeltaTime(): number;
            /** The maximum time a frame can spend on particle updates. If the frame takes longer than this, then updates are split into multiple smaller updates.
            */
            public static get maximumParticleDeltaTime(): number;
            public static set maximumParticleDeltaTime(value: number);
            /** The scale at which time passes.
            */
            public static get timeScale(): number;
            public static set timeScale(value: number);
            /** The total number of frames since the start of the game (Read Only).
            */
            public static get frameCount(): number;
            public static get renderedFrameCount(): number;
            /** The real time in seconds since the game started (Read Only).
            */
            public static get realtimeSinceStartup(): number;
            /** The real time in seconds since the game started (Read Only). Double precision version of Time.realtimeSinceStartup. 
            */
            public static get realtimeSinceStartupAsDouble(): number;
            /** Slows your application’s playback time to allow Unity to save screenshots in between frames.
            */
            public static get captureDeltaTime(): number;
            public static set captureDeltaTime(value: number);
            /** The reciprocal of Time.captureDeltaTime.
            */
            public static get captureFramerate(): number;
            public static set captureFramerate(value: number);
            /** Returns true if called inside a fixed time step callback (like MonoBehaviour's MonoBehaviour.FixedUpdate), otherwise returns false (Read Only).
            */
            public static get inFixedTimeStep(): boolean;
            public constructor()
        }
        /** Interface for on-screen keyboards. Only native iPhone, Android, and Windows Store Apps are supported.
        */
        class TouchScreenKeyboard extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Is touch screen keyboard supported.
            */
            public static get isSupported(): boolean;
            /** Checks if the text within an input field can be selected and modified while TouchScreenKeyboard is open.
            * @returns Returns true when you are able to select and modify the input field, returns false otherwise. 
            */
            public static get isInPlaceEditingAllowed(): boolean;
            /** Returns the text displayed by the input field of the keyboard.
            */
            public get text(): string;
            public set text(value: string);
            /** Will text input field above the keyboard be hidden when the keyboard is on screen?
            */
            public static get hideInput(): boolean;
            public static set hideInput(value: boolean);
            /** Is the keyboard visible or sliding into the position on the screen?
            */
            public get active(): boolean;
            public set active(value: boolean);
            /** Returns the status of the on-screen keyboard. (Read Only)
            */
            public get status(): UnityEngine.TouchScreenKeyboard.Status;
            /** How many characters the keyboard input field is limited to. 0 = infinite.
            */
            public get characterLimit(): number;
            public set characterLimit(value: number);
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canGetSelection(): boolean;
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canSetSelection(): boolean;
            /** Gets or sets the character range of the selected text within the string currently being edited.
            */
            public get selection(): UnityEngine.RangeInt;
            public set selection(value: UnityEngine.RangeInt);
            /** Returns the TouchScreenKeyboardType of the keyboard.
            */
            public get type(): UnityEngine.TouchScreenKeyboardType;
            /** Specified on which display the on-screen keyboard will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Returns portion of the screen which is covered by the keyboard.
            */
            public static get area(): UnityEngine.Rect;
            /** Returns true whenever any keyboard is visible on the screen.
            */
            public static get visible(): boolean;
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType): UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open($text: string): UnityEngine.TouchScreenKeyboard
            public constructor($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number)
            public constructor()
        }
        /** Enumeration of the different types of supported touchscreen keyboards.
        */
        enum TouchScreenKeyboardType { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7, NintendoNetworkAccount = 8, Social = 9, Search = 10, DecimalPad = 11, OneTimeCode = 12 }
        /** Describes an integer range.
        */
        class RangeInt extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        class UnityEventQueueSystem extends System.Object {
            protected [__keep_incompatibility]: never;
            public static GenerateEventIdForPayload($eventPayloadName: string): string
            public static GetGlobalEventQueue(): System.IntPtr
            public constructor()
        }
        /** Controls the from a script.
        */
        class FrameDebugger extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Queries whether the is enabled.
            */
            public static get enabled(): boolean;
        }
        /** Position, size, anchor and pivot information for a rectangle.
        */
        class RectTransform extends UnityEngine.Transform implements System.Collections.IEnumerable {
            protected [__keep_incompatibility]: never;
            /** The calculated rectangle in the local space of the Transform.
            */
            public get rect(): UnityEngine.Rect;
            /** The normalized position in the parent RectTransform that the lower left corner is anchored to.
            */
            public get anchorMin(): UnityEngine.Vector2;
            public set anchorMin(value: UnityEngine.Vector2);
            /** The normalized position in the parent RectTransform that the upper right corner is anchored to.
            */
            public get anchorMax(): UnityEngine.Vector2;
            public set anchorMax(value: UnityEngine.Vector2);
            /** The position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition(): UnityEngine.Vector2;
            public set anchoredPosition(value: UnityEngine.Vector2);
            /** The size of this RectTransform relative to the distances between the anchors.
            */
            public get sizeDelta(): UnityEngine.Vector2;
            public set sizeDelta(value: UnityEngine.Vector2);
            /** The normalized position in this RectTransform that it rotates around.
            */
            public get pivot(): UnityEngine.Vector2;
            public set pivot(value: UnityEngine.Vector2);
            /** The 3D position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition3D(): UnityEngine.Vector3;
            public set anchoredPosition3D(value: UnityEngine.Vector3);
            /** The offset of the lower left corner of the rectangle relative to the lower left anchor.
            */
            public get offsetMin(): UnityEngine.Vector2;
            public set offsetMin(value: UnityEngine.Vector2);
            /** The offset of the upper right corner of the rectangle relative to the upper right anchor.
            */
            public get offsetMax(): UnityEngine.Vector2;
            public set offsetMax(value: UnityEngine.Vector2);
            /** The object that is driving the values of this RectTransform. Value is null if not driven.
            */
            public get drivenByObject(): UnityEngine.Object;
            public static add_reapplyDrivenProperties($value: UnityEngine.RectTransform.ReapplyDrivenProperties): void
            public static remove_reapplyDrivenProperties($value: UnityEngine.RectTransform.ReapplyDrivenProperties): void
            /** Force the recalculation of RectTransforms internal data.
            */
            public ForceUpdateRectTransforms(): void
            /** Get the corners of the calculated rectangle in the local space of its Transform.
            * @param $fourCornersArray The array that corners are filled into.
            */
            public GetLocalCorners($fourCornersArray: System.Array$1<UnityEngine.Vector3>): void
            /** Get the corners of the calculated rectangle in world space.
            * @param $fourCornersArray The array that corners are filled into.
            */
            public GetWorldCorners($fourCornersArray: System.Array$1<UnityEngine.Vector3>): void
            public SetInsetAndSizeFromParentEdge($edge: UnityEngine.RectTransform.Edge, $inset: number, $size: number): void
            public SetSizeWithCurrentAnchors($axis: UnityEngine.RectTransform.Axis, $size: number): void
            public constructor()
        }
        /** Position, size, anchor and pivot information for a rectangle.
        */
        interface RectTransform {
            Index($name: string, $type?: System.Type): any;
        }
        /** The coordinate space in which to operate.
        */
        enum Space { World = 0, Self = 1 }
        /** Renders a Sprite for 2D graphics.
        */
        class SpriteRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** The Sprite to render.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** The current draw mode of the Sprite Renderer.
            */
            public get drawMode(): UnityEngine.SpriteDrawMode;
            public set drawMode(value: UnityEngine.SpriteDrawMode);
            /** Property to set or get the size to render when the SpriteRenderer.drawMode is set to SpriteDrawMode.Sliced or SpriteDrawMode.Tiled.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The current threshold for Sprite Renderer tiling.
            */
            public get adaptiveModeThreshold(): number;
            public set adaptiveModeThreshold(value: number);
            /** The current tile mode of the Sprite Renderer.
            */
            public get tileMode(): UnityEngine.SpriteTileMode;
            public set tileMode(value: UnityEngine.SpriteTileMode);
            /** Rendering color for the Sprite graphic.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** Specifies how the sprite interacts with the masks.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Flips the sprite on the X axis.
            */
            public get flipX(): boolean;
            public set flipX(value: boolean);
            /** Flips the sprite on the Y axis.
            */
            public get flipY(): boolean;
            public set flipY(value: boolean);
            /** Determines the position of the Sprite used for sorting the SpriteRenderer.
            */
            public get spriteSortPoint(): UnityEngine.SpriteSortPoint;
            public set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
            public RegisterSpriteChangeCallback($callback: UnityEngine.Events.UnityAction$1<UnityEngine.SpriteRenderer>): void
            public UnregisterSpriteChangeCallback($callback: UnityEngine.Events.UnityAction$1<UnityEngine.SpriteRenderer>): void
            public constructor()
        }
        /** Represents a Sprite object for use in 2D gameplay.
        */
        class Sprite extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** Bounds of the Sprite, specified by its center and extents in world space units.
            */
            public get bounds(): UnityEngine.Bounds;
            /** Location of the Sprite on the original Texture, specified in pixels.
            */
            public get rect(): UnityEngine.Rect;
            /** Returns the border sizes of the Sprite.
            */
            public get border(): UnityEngine.Vector4;
            /** Get the reference to the used Texture. If packed this will point to the atlas, if not packed will point to the source Sprite.
            */
            public get texture(): UnityEngine.Texture2D;
            /** The number of pixels in the Sprite that correspond to one unit in world space. (Read Only)
            */
            public get pixelsPerUnit(): number;
            /** The Variant scale of Texture used by the Sprite. This is useful to check when a Variant SpriteAtlas is being used by Sprites.
            */
            public get spriteAtlasTextureScale(): number;
            /** Returns the Texture that contains the alpha channel from the source Texture. Unity generates this Texture under the hood for Sprites that have alpha in the source, and need to be compressed using techniques like ETC1.
            Returns NULL if there is no associated alpha Texture for the source Sprite. This is the case if the Sprite has not been setup to use ETC1 compression.
            */
            public get associatedAlphaSplitTexture(): UnityEngine.Texture2D;
            /** Location of the Sprite's pivot point in the Rect on the original Texture, specified in pixels.
            */
            public get pivot(): UnityEngine.Vector2;
            /** Returns true if this Sprite is packed in an atlas.
            */
            public get packed(): boolean;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.
            */
            public get packingMode(): UnityEngine.SpritePackingMode;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.
            */
            public get packingRotation(): UnityEngine.SpritePackingRotation;
            /** Get the rectangle this Sprite uses on its Texture. Raises an exception if this Sprite is tightly packed in an atlas.
            */
            public get textureRect(): UnityEngine.Rect;
            /** Gets the offset of the rectangle this Sprite uses on its Texture to the original Sprite bounds. If Sprite mesh type is FullRect, offset is zero.
            */
            public get textureRectOffset(): UnityEngine.Vector2;
            /** Returns a copy of the array containing Sprite mesh vertex positions.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector2>;
            /** Returns a copy of the array containing Sprite mesh triangles.
            */
            public get triangles(): System.Array$1<number>;
            /** The base Texture coordinates of the Sprite mesh.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            /** Gets the number of Secondary Textures that the Sprite is using.
            * @returns Returns the number of Secondary Textures that the Sprite is using. 
            */
            public GetSecondaryTextureCount(): number
            /** Retrieves an array of SecondarySpriteTexture used by the Sprite.
            * @param $secondaryTexture The array of SecondarySpriteTexture to contain the Secondary Textures properties used by the Sprite.
            * @returns Returns the number of Secondary Textures properties retrieved. 
            */
            public GetSecondaryTextures($secondaryTexture: System.Array$1<UnityEngine.SecondarySpriteTexture>): number
            /** The number of physics shapes for the Sprite.
            * @returns The number of physics shapes for the Sprite. 
            */
            public GetPhysicsShapeCount(): number
            /** The number of points in the selected physics shape for the Sprite.
            * @param $shapeIdx The index of the physics shape to retrieve the number of points from.
            * @returns The number of points in the selected physics shape for the Sprite. 
            */
            public GetPhysicsShapePointCount($shapeIdx: number): number
            public GetPhysicsShape($shapeIdx: number, $physicsShape: System.Collections.Generic.List$1<UnityEngine.Vector2>): number
            public OverridePhysicsShape($physicsShapes: System.Collections.Generic.IList$1<System.Array$1<UnityEngine.Vector2>>): void
            /** Sets up new Sprite geometry.
            * @param $vertices Array of vertex positions in Sprite Rect space.
            * @param $triangles Array of sprite mesh triangle indices.
            */
            public OverrideGeometry($vertices: System.Array$1<UnityEngine.Vector2>, $triangles: System.Array$1<number>): void
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4, $generateFallbackPhysicsShape: boolean): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4, $generateFallbackPhysicsShape: boolean, $secondaryTextures: System.Array$1<UnityEngine.SecondarySpriteTexture>): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number): UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2): UnityEngine.Sprite
        }
        /** SpriteRenderer draw mode.
        */
        enum SpriteDrawMode { Simple = 0, Sliced = 1, Tiled = 2 }
        /** Tiling mode for SpriteRenderer.tileMode.
        */
        enum SpriteTileMode { Continuous = 0, Adaptive = 1 }
        /** Determines the position of the Sprite used for sorting the Renderer.
        */
        enum SpriteSortPoint { Center = 0, Pivot = 1 }
        /** Encapsulates a Texture2D and its shader property name to give Sprite-based renderers access to a secondary texture, in addition to the main Sprite texture.
        */
        class SecondarySpriteTexture extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Sprite packing modes for the Sprite Packer.
        */
        enum SpritePackingMode { Tight = 0, Rectangle = 1 }
        /** Sprite rotation modes for the Sprite Packer.
        */
        enum SpritePackingRotation { None = 0, FlipHorizontal = 1, FlipVertical = 2, Rotate180 = 3, Any = 15 }
        /** Defines the type of mesh generated for a sprite.
        */
        enum SpriteMeshType { FullRect = 0, Tight = 1 }
        /** Generic access to the Social API.
        */
        class Social extends System.Object {
            protected [__keep_incompatibility]: never;
            /** This is the currently active social platform. 
            */
            public static get Active(): UnityEngine.SocialPlatforms.ISocialPlatform;
            public static set Active(value: UnityEngine.SocialPlatforms.ISocialPlatform);
            /** The local user (potentially not logged in).
            */
            public static get localUser(): UnityEngine.SocialPlatforms.ILocalUser;
            public static LoadUsers($userIDs: System.Array$1<string>, $callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IUserProfile>>): void
            public static ReportProgress($achievementID: string, $progress: number, $callback: System.Action$1<boolean>): void
            public static LoadAchievementDescriptions($callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IAchievementDescription>>): void
            public static LoadAchievements($callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IAchievement>>): void
            public static ReportScore($score: bigint, $board: string, $callback: System.Action$1<boolean>): void
            public static LoadScores($leaderboardID: string, $callback: System.Action$1<System.Array$1<UnityEngine.SocialPlatforms.IScore>>): void
            /** Create an ILeaderboard instance.
            */
            public static CreateLeaderboard(): UnityEngine.SocialPlatforms.ILeaderboard
            /** Create an IAchievement instance.
            */
            public static CreateAchievement(): UnityEngine.SocialPlatforms.IAchievement
            /** Show a default/system view of the games achievements.
            */
            public static ShowAchievementsUI(): void
            /** Show a default/system view of the games leaderboards.
            */
            public static ShowLeaderboardUI(): void
        }
        /** An abstract class that defines a grid layout.
        */
        class GridLayout extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The size of each cell in the layout.
            */
            public get cellSize(): UnityEngine.Vector3;
            /** The size of the gap between each cell in the layout.
            */
            public get cellGap(): UnityEngine.Vector3;
            /** The layout of the cells.
            */
            public get cellLayout(): UnityEngine.GridLayout.CellLayout;
            /** The cell swizzle for the layout.
            */
            public get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
            /** Returns the local bounds for a cell at the location.
            * @param $cellPosition Location of the cell.
            * @returns Local bounds of cell at the location. 
            */
            public GetBoundsLocal($cellPosition: UnityEngine.Vector3Int): UnityEngine.Bounds
            /** Returns the local bounds for the groups of cells at the location.
            * @param $origin Origin of the group of cells.
            * @param $size Size of the group of cells.
            * @returns Local bounds of the group of cells at the location. 
            */
            public GetBoundsLocal($origin: UnityEngine.Vector3, $size: UnityEngine.Vector3): UnityEngine.Bounds
            /** Converts a cell position to local position space.
            * @param $cellPosition Cell position to convert.
            * @returns Local position of the cell position. 
            */
            public CellToLocal($cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3
            /** Converts a local position to cell position.
            * @param $localPosition Local Position to convert.
            * @returns Cell position of the local position. 
            */
            public LocalToCell($localPosition: UnityEngine.Vector3): UnityEngine.Vector3Int
            /** Converts an interpolated cell position in floats to local position space.
            * @param $cellPosition Interpolated cell position to convert.
            * @returns Local position of the cell position. 
            */
            public CellToLocalInterpolated($cellPosition: UnityEngine.Vector3): UnityEngine.Vector3
            /** Converts a local position to cell position.
            * @param $localPosition Local Position to convert.
            * @returns Interpolated cell position of the local position. 
            */
            public LocalToCellInterpolated($localPosition: UnityEngine.Vector3): UnityEngine.Vector3
            /** Converts a cell position to world position space.
            * @param $cellPosition Cell position to convert.
            * @returns World position of the cell position. 
            */
            public CellToWorld($cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3
            /** Converts a world position to cell position.
            * @param $worldPosition World Position to convert.
            * @returns Cell position of the world position. 
            */
            public WorldToCell($worldPosition: UnityEngine.Vector3): UnityEngine.Vector3Int
            /** Converts a local position to world position.
            * @param $localPosition Local Position to convert.
            * @returns World position of the local position. 
            */
            public LocalToWorld($localPosition: UnityEngine.Vector3): UnityEngine.Vector3
            /** Converts a world position to local position.
            * @param $worldPosition World Position to convert.
            * @returns Local position of the world position. 
            */
            public WorldToLocal($worldPosition: UnityEngine.Vector3): UnityEngine.Vector3
            /** Get the default center coordinate of a cell for the set layout of the Grid.
            * @returns Cell Center coordinate. 
            */
            public GetLayoutCellCenter(): UnityEngine.Vector3
            public constructor()
        }
        /** Grid is the base class for plotting a layout of uniformly spaced points and lines.
        */
        class Grid extends UnityEngine.GridLayout {
            protected [__keep_incompatibility]: never;
            /** The size of each cell in the Grid.
            */
            public get cellSize(): UnityEngine.Vector3;
            public set cellSize(value: UnityEngine.Vector3);
            /** The size of the gap between each cell in the Grid.
            */
            public get cellGap(): UnityEngine.Vector3;
            public set cellGap(value: UnityEngine.Vector3);
            /** The layout of the cells in the Grid.
            */
            public get cellLayout(): UnityEngine.GridLayout.CellLayout;
            public set cellLayout(value: UnityEngine.GridLayout.CellLayout);
            /** The cell swizzle for the Grid.
            */
            public get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
            public set cellSwizzle(value: UnityEngine.GridLayout.CellSwizzle);
            /** Get the logical center coordinate of a grid cell in local space.
            * @param $position Grid cell position.
            * @returns Center of the cell transformed into local space coordinates. 
            */
            public GetCellCenterLocal($position: UnityEngine.Vector3Int): UnityEngine.Vector3
            /** Get the logical center coordinate of a grid cell in world space.
            * @param $position Grid cell position.
            * @returns Center of the cell transformed into world space coordinates. 
            */
            public GetCellCenterWorld($position: UnityEngine.Vector3Int): UnityEngine.Vector3
            public static Swizzle($swizzle: UnityEngine.GridLayout.CellSwizzle, $position: UnityEngine.Vector3): UnityEngine.Vector3
            public static InverseSwizzle($swizzle: UnityEngine.GridLayout.CellSwizzle, $position: UnityEngine.Vector3): UnityEngine.Vector3
            public constructor()
        }
        /** Representation of 3D vectors and points using integers.
        */
        class Vector3Int extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector3Int> {
            protected [__keep_incompatibility]: never;
        }
        /** A UnityGUI event.
        */
        class Event extends System.Object {
            protected [__keep_incompatibility]: never;
            public get rawType(): UnityEngine.EventType;
            /** The mouse position.
            */
            public get mousePosition(): UnityEngine.Vector2;
            public set mousePosition(value: UnityEngine.Vector2);
            /** The relative movement of the mouse compared to last event.
            */
            public get delta(): UnityEngine.Vector2;
            public set delta(value: UnityEngine.Vector2);
            /** The type of pointer that created this event (for example, mouse, touch screen, pen).
            */
            public get pointerType(): UnityEngine.PointerType;
            public set pointerType(value: UnityEngine.PointerType);
            /** Which mouse button was pressed.
            */
            public get button(): number;
            public set button(value: number);
            /** Which modifier keys are held down.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** How hard pen pressure is applied, normalized between 0 (no pressure) and 1 (maximum pressure).
            */
            public get pressure(): number;
            public set pressure(value: number);
            /** Specifies the rotation of the pen around its axis, expressed in radians. The default value is 0.
            */
            public get twist(): number;
            public set twist(value: number);
            /** Specifies the angle of the pen relative to the X and Y axes, expressed in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            public set tilt(value: UnityEngine.Vector2);
            /** Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            */
            public get penStatus(): UnityEngine.PenStatus;
            public set penStatus(value: UnityEngine.PenStatus);
            /** How many consecutive mouse clicks have we received.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            /** The character typed.
            */
            public get character(): number;
            public set character(value: number);
            /** The raw key code for keyboard events.
            */
            public get keyCode(): UnityEngine.KeyCode;
            public set keyCode(value: UnityEngine.KeyCode);
            /** Index of display that the event belongs to.
            */
            public get displayIndex(): number;
            public set displayIndex(value: number);
            /** The type of event.
            */
            public get type(): UnityEngine.EventType;
            public set type(value: UnityEngine.EventType);
            /** The name of an ExecuteCommand or ValidateCommand Event.
            */
            public get commandName(): string;
            public set commandName(value: string);
            /** Is Shift held down? (Read Only)
            */
            public get shift(): boolean;
            public set shift(value: boolean);
            /** Is Control key held down? (Read Only)
            */
            public get control(): boolean;
            public set control(value: boolean);
            /** Is Alt/Option key held down? (Read Only)
            */
            public get alt(): boolean;
            public set alt(value: boolean);
            /** Is Command/Windows key held down? (Read Only)
            */
            public get command(): boolean;
            public set command(value: boolean);
            /** Is Caps Lock on? (Read Only)
            */
            public get capsLock(): boolean;
            public set capsLock(value: boolean);
            /** Is the current keypress on the numeric keyboard? (Read Only)
            */
            public get numeric(): boolean;
            public set numeric(value: boolean);
            /** Is the current keypress a function key? (Read Only)
            */
            public get functionKey(): boolean;
            /** The current event that's being processed right now.
            */
            public static get current(): UnityEngine.Event;
            public static set current(value: UnityEngine.Event);
            /** Is this event a keyboard event? (Read Only)
            */
            public get isKey(): boolean;
            /** Is this event a mouse event? (Read Only)
            */
            public get isMouse(): boolean;
            public get isScrollWheel(): boolean;
            /** Get a filtered event type for a given control ID.
            * @param $controlID The ID of the control you are querying from.
            */
            public GetTypeForControl($controlID: number): UnityEngine.EventType
            /** Get the next queued [Event] from the event system.
            * @param $outEvent Next Event.
            */
            public static PopEvent($outEvent: UnityEngine.Event): boolean
            /** Returns the current number of events that are stored in the event queue.
            * @returns Current number of events currently in the event queue. 
            */
            public static GetEventCount(): number
            /** Create a keyboard event.
            * @param $key A string representing keyboard keys and modifiers.
            * @returns A new Event with EventType.KeyDown and the requested KeyCode and optional EventModifier. 
            */
            public static KeyboardEvent($key: string): UnityEngine.Event
            /** Use this event.
            */
            public Use(): void
            public constructor()
            public constructor($displayIndex: number)
            public constructor($other: UnityEngine.Event)
        }
        /** Types of UnityGUI input and processing events.
        */
        enum EventType { MouseDown = 0, MouseUp = 1, MouseMove = 2, MouseDrag = 3, KeyDown = 4, KeyUp = 5, ScrollWheel = 6, Repaint = 7, Layout = 8, DragUpdated = 9, DragPerform = 10, DragExited = 15, Ignore = 11, Used = 12, ValidateCommand = 13, ExecuteCommand = 14, ContextClick = 16, MouseEnterWindow = 20, MouseLeaveWindow = 21, TouchDown = 30, TouchUp = 31, TouchMove = 32, TouchEnter = 33, TouchLeave = 34, TouchStationary = 35, mouseDown = 0, mouseUp = 1, mouseMove = 2, mouseDrag = 3, keyDown = 4, keyUp = 5, scrollWheel = 6, repaint = 7, layout = 8, dragUpdated = 9, dragPerform = 10, ignore = 11, used = 12 }
        /** Pointer types.
        */
        enum PointerType { Mouse = 0, Touch = 1, Pen = 2 }
        /** Types of modifier key that can be active during a keystroke event.
        */
        enum EventModifiers { None = 0, Shift = 1, Control = 2, Alt = 4, Command = 8, Numeric = 16, CapsLock = 32, FunctionKey = 64 }
        /** Options for specifying the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed. You can combine states using bitwise OR operators.
        */
        enum PenStatus { None = 0, Contact = 1, Barrel = 2, Inverted = 4, Eraser = 8 }
        /** Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard. If "Use Physical Keys" is enabled in, these map directly to a physical key on the keyboard. If "Use Physical Keys" is disabled these map to language dependent mapping, different for every platform and cannot be guaranteed to work. "Use Physical Keys" is enabled by default from 2022.1
        */
        enum KeyCode { None = 0, Backspace = 8, Delete = 127, Tab = 9, Clear = 12, Return = 13, Pause = 19, Escape = 27, Space = 32, Keypad0 = 256, Keypad1 = 257, Keypad2 = 258, Keypad3 = 259, Keypad4 = 260, Keypad5 = 261, Keypad6 = 262, Keypad7 = 263, Keypad8 = 264, Keypad9 = 265, KeypadPeriod = 266, KeypadDivide = 267, KeypadMultiply = 268, KeypadMinus = 269, KeypadPlus = 270, KeypadEnter = 271, KeypadEquals = 272, UpArrow = 273, DownArrow = 274, RightArrow = 275, LeftArrow = 276, Insert = 277, Home = 278, End = 279, PageUp = 280, PageDown = 281, F1 = 282, F2 = 283, F3 = 284, F4 = 285, F5 = 286, F6 = 287, F7 = 288, F8 = 289, F9 = 290, F10 = 291, F11 = 292, F12 = 293, F13 = 294, F14 = 295, F15 = 296, Alpha0 = 48, Alpha1 = 49, Alpha2 = 50, Alpha3 = 51, Alpha4 = 52, Alpha5 = 53, Alpha6 = 54, Alpha7 = 55, Alpha8 = 56, Alpha9 = 57, Exclaim = 33, DoubleQuote = 34, Hash = 35, Dollar = 36, Percent = 37, Ampersand = 38, Quote = 39, LeftParen = 40, RightParen = 41, Asterisk = 42, Plus = 43, Comma = 44, Minus = 45, Period = 46, Slash = 47, Colon = 58, Semicolon = 59, Less = 60, Equals = 61, Greater = 62, Question = 63, At = 64, LeftBracket = 91, Backslash = 92, RightBracket = 93, Caret = 94, Underscore = 95, BackQuote = 96, A = 97, B = 98, C = 99, D = 100, E = 101, F = 102, G = 103, H = 104, I = 105, J = 106, K = 107, L = 108, M = 109, N = 110, O = 111, P = 112, Q = 113, R = 114, S = 115, T = 116, U = 117, V = 118, W = 119, X = 120, Y = 121, Z = 122, LeftCurlyBracket = 123, Pipe = 124, RightCurlyBracket = 125, Tilde = 126, Numlock = 300, CapsLock = 301, ScrollLock = 302, RightShift = 303, LeftShift = 304, RightControl = 305, LeftControl = 306, RightAlt = 307, LeftAlt = 308, LeftMeta = 310, LeftCommand = 310, LeftApple = 310, LeftWindows = 311, RightMeta = 309, RightCommand = 309, RightApple = 309, RightWindows = 312, AltGr = 313, Help = 315, Print = 316, SysReq = 317, Break = 318, Menu = 319, Mouse0 = 323, Mouse1 = 324, Mouse2 = 325, Mouse3 = 326, Mouse4 = 327, Mouse5 = 328, Mouse6 = 329, JoystickButton0 = 330, JoystickButton1 = 331, JoystickButton2 = 332, JoystickButton3 = 333, JoystickButton4 = 334, JoystickButton5 = 335, JoystickButton6 = 336, JoystickButton7 = 337, JoystickButton8 = 338, JoystickButton9 = 339, JoystickButton10 = 340, JoystickButton11 = 341, JoystickButton12 = 342, JoystickButton13 = 343, JoystickButton14 = 344, JoystickButton15 = 345, JoystickButton16 = 346, JoystickButton17 = 347, JoystickButton18 = 348, JoystickButton19 = 349, Joystick1Button0 = 350, Joystick1Button1 = 351, Joystick1Button2 = 352, Joystick1Button3 = 353, Joystick1Button4 = 354, Joystick1Button5 = 355, Joystick1Button6 = 356, Joystick1Button7 = 357, Joystick1Button8 = 358, Joystick1Button9 = 359, Joystick1Button10 = 360, Joystick1Button11 = 361, Joystick1Button12 = 362, Joystick1Button13 = 363, Joystick1Button14 = 364, Joystick1Button15 = 365, Joystick1Button16 = 366, Joystick1Button17 = 367, Joystick1Button18 = 368, Joystick1Button19 = 369, Joystick2Button0 = 370, Joystick2Button1 = 371, Joystick2Button2 = 372, Joystick2Button3 = 373, Joystick2Button4 = 374, Joystick2Button5 = 375, Joystick2Button6 = 376, Joystick2Button7 = 377, Joystick2Button8 = 378, Joystick2Button9 = 379, Joystick2Button10 = 380, Joystick2Button11 = 381, Joystick2Button12 = 382, Joystick2Button13 = 383, Joystick2Button14 = 384, Joystick2Button15 = 385, Joystick2Button16 = 386, Joystick2Button17 = 387, Joystick2Button18 = 388, Joystick2Button19 = 389, Joystick3Button0 = 390, Joystick3Button1 = 391, Joystick3Button2 = 392, Joystick3Button3 = 393, Joystick3Button4 = 394, Joystick3Button5 = 395, Joystick3Button6 = 396, Joystick3Button7 = 397, Joystick3Button8 = 398, Joystick3Button9 = 399, Joystick3Button10 = 400, Joystick3Button11 = 401, Joystick3Button12 = 402, Joystick3Button13 = 403, Joystick3Button14 = 404, Joystick3Button15 = 405, Joystick3Button16 = 406, Joystick3Button17 = 407, Joystick3Button18 = 408, Joystick3Button19 = 409, Joystick4Button0 = 410, Joystick4Button1 = 411, Joystick4Button2 = 412, Joystick4Button3 = 413, Joystick4Button4 = 414, Joystick4Button5 = 415, Joystick4Button6 = 416, Joystick4Button7 = 417, Joystick4Button8 = 418, Joystick4Button9 = 419, Joystick4Button10 = 420, Joystick4Button11 = 421, Joystick4Button12 = 422, Joystick4Button13 = 423, Joystick4Button14 = 424, Joystick4Button15 = 425, Joystick4Button16 = 426, Joystick4Button17 = 427, Joystick4Button18 = 428, Joystick4Button19 = 429, Joystick5Button0 = 430, Joystick5Button1 = 431, Joystick5Button2 = 432, Joystick5Button3 = 433, Joystick5Button4 = 434, Joystick5Button5 = 435, Joystick5Button6 = 436, Joystick5Button7 = 437, Joystick5Button8 = 438, Joystick5Button9 = 439, Joystick5Button10 = 440, Joystick5Button11 = 441, Joystick5Button12 = 442, Joystick5Button13 = 443, Joystick5Button14 = 444, Joystick5Button15 = 445, Joystick5Button16 = 446, Joystick5Button17 = 447, Joystick5Button18 = 448, Joystick5Button19 = 449, Joystick6Button0 = 450, Joystick6Button1 = 451, Joystick6Button2 = 452, Joystick6Button3 = 453, Joystick6Button4 = 454, Joystick6Button5 = 455, Joystick6Button6 = 456, Joystick6Button7 = 457, Joystick6Button8 = 458, Joystick6Button9 = 459, Joystick6Button10 = 460, Joystick6Button11 = 461, Joystick6Button12 = 462, Joystick6Button13 = 463, Joystick6Button14 = 464, Joystick6Button15 = 465, Joystick6Button16 = 466, Joystick6Button17 = 467, Joystick6Button18 = 468, Joystick6Button19 = 469, Joystick7Button0 = 470, Joystick7Button1 = 471, Joystick7Button2 = 472, Joystick7Button3 = 473, Joystick7Button4 = 474, Joystick7Button5 = 475, Joystick7Button6 = 476, Joystick7Button7 = 477, Joystick7Button8 = 478, Joystick7Button9 = 479, Joystick7Button10 = 480, Joystick7Button11 = 481, Joystick7Button12 = 482, Joystick7Button13 = 483, Joystick7Button14 = 484, Joystick7Button15 = 485, Joystick7Button16 = 486, Joystick7Button17 = 487, Joystick7Button18 = 488, Joystick7Button19 = 489, Joystick8Button0 = 490, Joystick8Button1 = 491, Joystick8Button2 = 492, Joystick8Button3 = 493, Joystick8Button4 = 494, Joystick8Button5 = 495, Joystick8Button6 = 496, Joystick8Button7 = 497, Joystick8Button8 = 498, Joystick8Button9 = 499, Joystick8Button10 = 500, Joystick8Button11 = 501, Joystick8Button12 = 502, Joystick8Button13 = 503, Joystick8Button14 = 504, Joystick8Button15 = 505, Joystick8Button16 = 506, Joystick8Button17 = 507, Joystick8Button18 = 508, Joystick8Button19 = 509 }
        /** The GUI class is the interface for Unity's GUI with manual positioning.
        */
        class GUI extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Applies a global tint to the GUI. The tint affects backgrounds and text colors.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Global tinting color for all background elements rendered by the GUI.
            */
            public static get backgroundColor(): UnityEngine.Color;
            public static set backgroundColor(value: UnityEngine.Color);
            /** Tinting color for all text rendered by the GUI.
            */
            public static get contentColor(): UnityEngine.Color;
            public static set contentColor(value: UnityEngine.Color);
            /** Returns true if any controls changed the value of the input data.
            */
            public static get changed(): boolean;
            public static set changed(value: boolean);
            /** Is the GUI enabled?
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** The sorting depth of the currently executing GUI behaviour.
            */
            public static get depth(): number;
            public static set depth(value: number);
            /** The global skin to use.
            */
            public static get skin(): UnityEngine.GUISkin;
            public static set skin(value: UnityEngine.GUISkin);
            /** The GUI transform matrix.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).
            */
            public static get tooltip(): string;
            public static set tooltip(value: string);
            /** Set the name of the next control.
            */
            public static SetNextControlName($name: string): void
            /** Get the name of named control that has focus.
            */
            public static GetNameOfFocusedControl(): string
            /** Move keyboard focus to a named control.
            * @param $name Name set using SetNextControlName.
            */
            public static FocusControl($name: string): void
            /** Make a window draggable.
            * @param $position The part of the window that can be dragged. This is clipped to the actual window.
            */
            public static DragWindow($position: UnityEngine.Rect): void
            /** Bring a specific window to front of the floating windows.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToFront($windowID: number): void
            /** Bring a specific window to back of the floating windows.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static BringWindowToBack($windowID: number): void
            /** Make a window become the active window.
            * @param $windowID The identifier used when you created the window in the Window call.
            */
            public static FocusWindow($windowID: number): void
            /** Remove focus from all windows.
            */
            public static UnfocusWindow(): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $text: string): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $image: UnityEngine.Texture): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $content: UnityEngine.GUIContent): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): void
            /** Make a text or texture label on screen.
            * @param $position Rectangle on the screen to use for the label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            */
            public static Label($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture): void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode): void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean): void
            /** Draw a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number): void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param $color A tint color to apply on the texture.
            * @param $borderWidth The width of the border. If 0, the full texture is drawn.
            * @param $borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param $borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param $borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidth: number, $borderRadius: number): void
            /** Draws a border with rounded corners within a rectangle. The texture is used to pattern the border.  Note that this method only works on shader model 2.5 and above.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to apply alpha blending when drawing the image (enabled by default).
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.
            * @param $color A tint color to apply on the texture.
            * @param $borderWidth The width of the border. If 0, the full texture is drawn.
            * @param $borderWidths The width of the borders (left, top, right and bottom). If Vector4.zero, the full texture is drawn.
            * @param $borderRadius The radius for rounded corners. If 0, corners will not be rounded.
            * @param $borderRadiuses The radiuses for rounded corners (top-left, top-right, bottom-right and bottom-left). If Vector4.zero, corners will not be rounded.
            */
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadius: number): void
            public static DrawTexture($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $alphaBlend: boolean, $imageAspect: number, $color: UnityEngine.Color, $borderWidths: UnityEngine.Vector4, $borderRadiuses: UnityEngine.Vector4): void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect): void
            /** Draw a texture within a rectangle with the given texture coordinates.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $texCoords How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $alphaBlend Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.
            */
            public static DrawTextureWithTexCoords($position: UnityEngine.Rect, $image: UnityEngine.Texture, $texCoords: UnityEngine.Rect, $alphaBlend: boolean): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $text: string): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $image: UnityEngine.Texture): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $content: UnityEngine.GUIContent): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): void
            /** Create a Box on the GUI Layer.
            * @param $position Rectangle on the screen to use for the box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            */
            public static Box($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): void
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $text: string): boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $image: UnityEngine.Texture): boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $content: UnityEngine.GUIContent): boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): boolean
            /** Make a single press button. The user clicks them and something happens immediately.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns true when the users clicks the button. 
            */
            public static Button($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $text: string): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $image: UnityEngine.Texture): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $content: UnityEngine.GUIContent): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): boolean
            /** Make a button that is active as long as the user holds it down.
            * @param $position Rectangle on the screen to use for the button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns True when the users clicks the button. 
            */
            public static RepeatButton($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): boolean
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField($position: UnityEngine.Rect, $text: string): string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField($position: UnityEngine.Rect, $text: string, $maxLength: number): string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): string
            /** Make a single-line text field where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextField($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle): string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($position: UnityEngine.Rect, $password: string, $maskChar: number): string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number): string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($position: UnityEngine.Rect, $password: string, $maskChar: number, $style: UnityEngine.GUIStyle): string
            /** Make a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($position: UnityEngine.Rect, $password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle): string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea($position: UnityEngine.Rect, $text: string): string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea($position: UnityEngine.Rect, $text: string, $maxLength: number): string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): string
            /** Make a Multi-line text area where the user can edit a string.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @returns The edited string. 
            */
            public static TextArea($position: UnityEngine.Rect, $text: string, $maxLength: number, $style: UnityEngine.GUIStyle): string
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $text: string): boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture): boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent): boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $text: string, $style: UnityEngine.GUIStyle): boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): boolean
            /** Make an on/off toggle button.
            * @param $position Rectangle on the screen to use for the button.
            * @param $value Is this button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the toggle style from the current GUISkin is used.
            * @returns The new value of the button. 
            */
            public static Toggle($position: UnityEngine.Rect, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): boolean
            public static Toggle($position: UnityEngine.Rect, $id: number, $value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): boolean
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>): number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>): number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>): number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle): number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle): number
            /** Make a toolbar.
            * @param $position Rectangle on the screen to use for the toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the toolbar buttons.
            * @param $images An array of textures on the toolbar buttons.
            * @param $contents An array of text, image and tooltips for the toolbar buttons.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle): number
            public static Toolbar($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle): number
            /** Make a grid of buttons.
            * @param $position Rectangle on the screen to use for the grid.
            * @param $selected The index of the selected grid button.
            * @param $texts An array of strings to show on the grid buttons.
            * @param $images An array of textures on the grid buttons.
            * @param $contents An array of text, image and tooltips for the grid button.
            * @param $xCount How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($position: UnityEngine.Rect, $selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle): number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number): number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle): number
            public static HorizontalSlider($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle): number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number): number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle): number
            public static VerticalSlider($position: UnityEngine.Rect, $value: number, $topValue: number, $bottomValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $thumbExtent: UnityEngine.GUIStyle): number
            public static Slider($position: UnityEngine.Rect, $value: number, $size: number, $start: number, $end: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, $horiz: boolean, $id: number, $thumbExtent?: UnityEngine.GUIStyle): number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number): number
            /** Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar($position: UnityEngine.Rect, $value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle): number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top of the scrollbar.
            * @param $bottomValue The value at the bottom of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number): number
            /** Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.
            * @param $position Rectangle on the screen to use for the scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top of the scrollbar.
            * @param $bottomValue The value at the bottom of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar($position: UnityEngine.Rect, $value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle): number
            public static BeginClip($position: UnityEngine.Rect, $scrollOffset: UnityEngine.Vector2, $renderOffset: UnityEngine.Vector2, $resetOffset: boolean): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $text: string): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $image: UnityEngine.Texture): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $content: UnityEngine.GUIContent): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $style: UnityEngine.GUIStyle): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): void
            /** Begin a group. Must be matched with a call to EndGroup.
            * @param $position Rectangle on the screen to use for the group.
            * @param $text Text to display on the group.
            * @param $image Texture to display on the group.
            * @param $content Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.
            * @param $style The style to use for the background.
            */
            public static BeginGroup($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): void
            /** End a group.
            */
            public static EndGroup(): void
            public static BeginClip($position: UnityEngine.Rect): void
            public static EndClip(): void
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect): UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean): UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2
            /** Begin a scrolling view inside your GUI.
            * @param $position Rectangle on the screen to use for the ScrollView.
            * @param $scrollPosition The pixel distance that the view is scrolled in the X and Y directions.
            * @param $viewRect The rectangle used inside the scrollview.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when viewRect is wider than position.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when viewRect is taller than position.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($position: UnityEngine.Rect, $scrollPosition: UnityEngine.Vector2, $viewRect: UnityEngine.Rect, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView(): void
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView($handleScrollWheel: boolean): void
            /** Scrolls all enclosing scrollviews so they try to make position visible.
            */
            public static ScrollTo($position: UnityEngine.Rect): void
            public static ScrollTowards($position: UnityEngine.Rect, $maxDelta: number): boolean
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string): UnityEngine.Rect
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture): UnityEngine.Rect
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent): UnityEngine.Rect
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            public static Window($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $title: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            public static ModalWindow($id: number, $clientRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            /** If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.
            */
            public static DragWindow(): void
            public constructor()
        }
        /** Defines how GUI looks and behaves.
        */
        class GUISkin extends UnityEngine.ScriptableObject {
            protected [__keep_incompatibility]: never;
            /** The default font to use for all styles.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** Style used by default for GUI.Box controls.
            */
            public get box(): UnityEngine.GUIStyle;
            public set box(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Label controls.
            */
            public get label(): UnityEngine.GUIStyle;
            public set label(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextField controls.
            */
            public get textField(): UnityEngine.GUIStyle;
            public set textField(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.TextArea controls.
            */
            public get textArea(): UnityEngine.GUIStyle;
            public set textArea(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Button controls.
            */
            public get button(): UnityEngine.GUIStyle;
            public set button(value: UnityEngine.GUIStyle);
            /** Style used by default for GUI.Toggle controls.
            */
            public get toggle(): UnityEngine.GUIStyle;
            public set toggle(value: UnityEngine.GUIStyle);
            /** Style used by default for Window controls (Additional resources: GUI.Window).
            */
            public get window(): UnityEngine.GUIStyle;
            public set window(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalSlider controls.
            */
            public get horizontalSlider(): UnityEngine.GUIStyle;
            public set horizontalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalSlider controls.
            */
            public get horizontalSliderThumb(): UnityEngine.GUIStyle;
            public set horizontalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalSlider controls.
            */
            public get verticalSlider(): UnityEngine.GUIStyle;
            public set verticalSlider(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalSlider controls.
            */
            public get verticalSliderThumb(): UnityEngine.GUIStyle;
            public set verticalSliderThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbar(): UnityEngine.GUIStyle;
            public set horizontalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarThumb(): UnityEngine.GUIStyle;
            public set horizontalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the left button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarLeftButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarLeftButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the right button on GUI.HorizontalScrollbar controls.
            */
            public get horizontalScrollbarRightButton(): UnityEngine.GUIStyle;
            public set horizontalScrollbarRightButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background part of GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbar(): UnityEngine.GUIStyle;
            public set verticalScrollbar(value: UnityEngine.GUIStyle);
            /** Style used by default for the thumb that is dragged in GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarThumb(): UnityEngine.GUIStyle;
            public set verticalScrollbarThumb(value: UnityEngine.GUIStyle);
            /** Style used by default for the up button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarUpButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarUpButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the down button on GUI.VerticalScrollbar controls.
            */
            public get verticalScrollbarDownButton(): UnityEngine.GUIStyle;
            public set verticalScrollbarDownButton(value: UnityEngine.GUIStyle);
            /** Style used by default for the background of ScrollView controls (see GUI.BeginScrollView).
            */
            public get scrollView(): UnityEngine.GUIStyle;
            public set scrollView(value: UnityEngine.GUIStyle);
            /** Array of GUI styles for specific needs.
            */
            public get customStyles(): System.Array$1<UnityEngine.GUIStyle>;
            public set customStyles(value: System.Array$1<UnityEngine.GUIStyle>);
            /** Generic settings for how controls should behave with this skin.
            */
            public get settings(): UnityEngine.GUISettings;
            /** Get a named GUIStyle.
            */
            public GetStyle($styleName: string): UnityEngine.GUIStyle
            /** Try to search for a GUIStyle. This functions returns NULL and does not give an error.
            */
            public FindStyle($styleName: string): UnityEngine.GUIStyle
            public GetEnumerator(): System.Collections.IEnumerator
            public constructor()
        }
        /** The contents of a GUI element.
        */
        class GUIContent extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Shorthand for empty content.
            */
            public static none: UnityEngine.GUIContent
            /** The text contained.
            */
            public get text(): string;
            public set text(value: string);
            /** The icon image contained.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** The tooltip of this element.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            public constructor()
            public constructor($text: string)
            public constructor($image: UnityEngine.Texture)
            public constructor($text: string, $image: UnityEngine.Texture)
            public constructor($text: string, $tooltip: string)
            public constructor($image: UnityEngine.Texture, $tooltip: string)
            public constructor($text: string, $image: UnityEngine.Texture, $tooltip: string)
            public constructor($src: UnityEngine.GUIContent)
        }
        /** Styling information for GUI elements.
        */
        class GUIStyle extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The font to use for rendering. If null, the default font for the current GUISkin is used instead.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** How image and text of the GUIContent is combined.
            */
            public get imagePosition(): UnityEngine.ImagePosition;
            public set imagePosition(value: UnityEngine.ImagePosition);
            /** Text alignment.
            */
            public get alignment(): UnityEngine.TextAnchor;
            public set alignment(value: UnityEngine.TextAnchor);
            /** Should the text be wordwrapped?
            */
            public get wordWrap(): boolean;
            public set wordWrap(value: boolean);
            /** What to do when the contents to be rendered is too large to fit within the area given.
            */
            public get clipping(): UnityEngine.TextClipping;
            public set clipping(value: UnityEngine.TextClipping);
            /** Pixel offset to apply to the content of this GUIstyle.
            */
            public get contentOffset(): UnityEngine.Vector2;
            public set contentOffset(value: UnityEngine.Vector2);
            /** If non-0, any GUI elements rendered with this style will have the width specified here.
            */
            public get fixedWidth(): number;
            public set fixedWidth(value: number);
            /** If non-0, any GUI elements rendered with this style will have the height specified here.
            */
            public get fixedHeight(): number;
            public set fixedHeight(value: number);
            /** Can GUI elements of this style be stretched horizontally for better layouting?
            */
            public get stretchWidth(): boolean;
            public set stretchWidth(value: boolean);
            /** Can GUI elements of this style be stretched vertically for better layout?
            */
            public get stretchHeight(): boolean;
            public set stretchHeight(value: boolean);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The name of this GUIStyle. Used for getting them based on name.
            */
            public get name(): string;
            public set name(value: string);
            /** Rendering settings for when the component is displayed normally.
            */
            public get normal(): UnityEngine.GUIStyleState;
            public set normal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the mouse is hovering over the control.
            */
            public get hover(): UnityEngine.GUIStyleState;
            public set hover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is pressed down.
            */
            public get active(): UnityEngine.GUIStyleState;
            public set active(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on.
            */
            public get onNormal(): UnityEngine.GUIStyleState;
            public set onNormal(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the control is turned on and the mouse is hovering it.
            */
            public get onHover(): UnityEngine.GUIStyleState;
            public set onHover(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element is turned on and pressed down.
            */
            public get onActive(): UnityEngine.GUIStyleState;
            public set onActive(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard focus.
            */
            public get focused(): UnityEngine.GUIStyleState;
            public set focused(value: UnityEngine.GUIStyleState);
            /** Rendering settings for when the element has keyboard and is turned on.
            */
            public get onFocused(): UnityEngine.GUIStyleState;
            public set onFocused(value: UnityEngine.GUIStyleState);
            /** The borders of all background images.
            */
            public get border(): UnityEngine.RectOffset;
            public set border(value: UnityEngine.RectOffset);
            /** The margins between elements rendered in this style and any other GUI elements.
            */
            public get margin(): UnityEngine.RectOffset;
            public set margin(value: UnityEngine.RectOffset);
            /** Space from the edge of GUIStyle to the start of the contents.
            */
            public get padding(): UnityEngine.RectOffset;
            public set padding(value: UnityEngine.RectOffset);
            /** Extra space to be added to the background image.
            */
            public get overflow(): UnityEngine.RectOffset;
            public set overflow(value: UnityEngine.RectOffset);
            /** The height of one line of text with this style, measured in pixels. (Read Only)
            */
            public get lineHeight(): number;
            /** Shortcut for an empty GUIStyle.
            */
            public static get none(): UnityEngine.GUIStyle;
            public get isHeightDependantOnWidth(): boolean;
            /** Draw this GUIStyle on to the screen, internal version.
            */
            public Draw($position: UnityEngine.Rect, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean): void
            /** Draw the GUIStyle with a text string inside.
            */
            public Draw($position: UnityEngine.Rect, $text: string, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean): void
            /** Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw($position: UnityEngine.Rect, $image: UnityEngine.Texture, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean): void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $isHover: boolean, $isActive: boolean, $on: boolean, $hasKeyboardFocus: boolean): void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number): void
            /** Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.
            */
            public Draw($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean): void
            public Draw($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $on: boolean, $hover: boolean): void
            /** Draw this GUIStyle with selected content.
            */
            public DrawCursor($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $character: number): void
            /** Draw this GUIStyle with selected content.
            */
            public DrawWithTextSelection($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $controlID: number, $firstSelectedCharacter: number, $lastSelectedCharacter: number): void
            public static op_Implicit($str: string): UnityEngine.GUIStyle
            /** Get the pixel position of a given string index.
            */
            public GetCursorPixelPosition($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorStringIndex: number): UnityEngine.Vector2
            /** Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.
            */
            public GetCursorStringIndex($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $cursorPixelPosition: UnityEngine.Vector2): number
            /** Calculate the size of some content if it is rendered with this style.
            */
            public CalcSize($content: UnityEngine.GUIContent): UnityEngine.Vector2
            /** Calculate the size of an element formatted with this style, and a given space to content.
            */
            public CalcScreenSize($contentSize: UnityEngine.Vector2): UnityEngine.Vector2
            /** How tall this element will be when rendered with content and a specific width.
            */
            public CalcHeight($content: UnityEngine.GUIContent, $width: number): number
            /** Calculate the minimum and maximum widths for this style rendered with content.
            */
            public CalcMinMaxWidth($content: UnityEngine.GUIContent, $minWidth: $Ref<number>, $maxWidth: $Ref<number>): void
            public constructor()
            public constructor($other: UnityEngine.GUIStyle)
        }
        /** Scaling mode to draw textures with.
        */
        enum ScaleMode { StretchToFill = 0, ScaleAndCrop = 1, ScaleToFit = 2 }
        /** The GUILayout class is the interface for Unity gui with automatic layout.
        */
        class GUILayout extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($text: string, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout label.
            * @param $text Text to display on the label.
            * @param $image Texture to display on the label.
            * @param $content Text, image and tooltip for this label.
            * @param $style The style to use. If left out, the label style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Label($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($text: string, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make an auto-layout box.
            * @param $text Text to display on the box.
            * @param $image Texture to display on the box.
            * @param $content Text, image and tooltip for this box.
            * @param $style The style to use. If left out, the box style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Box($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($text: string, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single press button.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the users clicks the button. 
            */
            public static Button($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($text: string, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a repeating button. The button returns true as long as the user holds down the mouse.
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the holds down the mouse. 
            */
            public static RepeatButton($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField($text: string, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a single-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textArea style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextField($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($password: string, $maskChar: number, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($password: string, $maskChar: number, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($password: string, $maskChar: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a text field where the user can enter a password.
            * @param $password Password to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maskChar Character to mask the password with.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @returns The edited password. 
            */
            public static PasswordField($password: string, $maskChar: number, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea($text: string, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea($text: string, $maxLength: number, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make a multi-line text field where the user can edit a string.
            * @param $text Text to edit. The return value of this function should be assigned back to the string as shown in the example.
            * @param $maxLength The maximum length of the string. If left out, the user can type for ever and ever.
            * @param $style The style to use. If left out, the textField style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&amp;lt;br&amp;gt;
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The edited string. 
            */
            public static TextArea($text: string, $maxLength: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): string
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $text: string, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make an on/off toggle button.
            * @param $value Is the button on or off?
            * @param $text Text to display on the button.
            * @param $image Texture to display on the button.
            * @param $content Text, image and tooltip for this button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The new value of the button. 
            */
            public static Toggle($value: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): boolean
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $texts: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $images: System.Array$1<UnityEngine.Texture>, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            public static Toolbar($selected: number, $texts: System.Array$1<string>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]): number
            public static Toolbar($selected: number, $images: System.Array$1<UnityEngine.Texture>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a toolbar.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $buttonSize Determines how toolbar button size is calculated.
            * @returns The index of the selected button. 
            */
            public static Toolbar($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            public static Toolbar($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]): number
            public static Toolbar($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            public static Toolbar($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $enabled: System.Array$1<boolean>, $style: UnityEngine.GUIStyle, $buttonSize: UnityEngine.GUI.ToolbarButtonSize, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $texts: System.Array$1<string>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $content: System.Array$1<UnityEngine.GUIContent>, $xCount: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $texts: System.Array$1<string>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $images: System.Array$1<UnityEngine.Texture>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a Selection Grid.
            * @param $selected The index of the selected button.
            * @param $texts An array of strings to show on the buttons.
            * @param $images An array of textures on the buttons.
            * @param $contents An array of text, image and tooltips for the button.
            * @param $xCount How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.
            * @param $style The style to use. If left out, the button style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the selected button. 
            */
            public static SelectionGrid($selected: number, $contents: System.Array$1<UnityEngine.GUIContent>, $xCount: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** A horizontal slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static HorizontalSlider($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** A vertical slider the user can drag to change a value between a min and a max.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $topValue The value at the top end of the slider.
            * @param $bottomValue The value at the bottom end of the slider.
            * @param $slider The GUIStyle to use for displaying the dragging area. If left out, the horizontalSlider style from the current GUISkin is used.
            * @param $thumb The GUIStyle to use for displaying draggable thumb. If left out, the horizontalSliderThumb style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The value that has been set by the user. 
            */
            public static VerticalSlider($value: number, $leftValue: number, $rightValue: number, $slider: UnityEngine.GUIStyle, $thumb: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a horizontal scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar($value: number, $size: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a horizontal scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $leftValue The value at the left end of the scrollbar.
            * @param $rightValue The value at the right end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static HorizontalScrollbar($value: number, $size: number, $leftValue: number, $rightValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a vertical scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top end of the scrollbar.
            * @param $bottomValue The value at the bottom end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar($value: number, $size: number, $topValue: number, $bottomValue: number, ...options: UnityEngine.GUILayoutOption[]): number
            /** Make a vertical scrollbar.
            * @param $value The position between min and max.
            * @param $size How much can we see?
            * @param $topValue The value at the top end of the scrollbar.
            * @param $bottomValue The value at the bottom end of the scrollbar.
            * @param $style The style to use for the scrollbar background. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.
            * @returns The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end. 
            */
            public static VerticalScrollbar($value: number, $size: number, $topValue: number, $bottomValue: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): number
            /** Insert a space in the current layout group.
            */
            public static Space($pixels: number): void
            /** Insert a flexible space element.
            */
            public static FlexibleSpace(): void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal(...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a Horizontal control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Close a group started with BeginHorizontal.
            */
            public static EndHorizontal(): void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical(...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical($image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Begin a vertical control group.
            * @param $text Text to display on group.
            * @param $image Texture to display on group.
            * @param $content Text, image, and tooltip for this group.
            * @param $style The style to use for background image and padding values. If left out, the background is transparent.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): void
            /** Close a group started with BeginVertical.
            */
            public static EndVertical(): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $text: string): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $style: UnityEngine.GUIStyle): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle): void
            /** Begin a GUILayout block of GUI controls in a fixed screen area.
            * @param $text Optional text to display in the area.
            * @param $image Optional texture to display in the area.
            * @param $content Optional text, image and tooltip top display for this area.
            * @param $style The style to use. If left out, the empty GUIStyle (GUIStyle.none) is used, giving a transparent background.
            */
            public static BeginArea($screenRect: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): void
            /** Close a GUILayout block started with BeginArea.
            */
            public static EndArea(): void
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $alwaysShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwaysShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2
            /** End a scroll view begun with a call to BeginScrollView.
            */
            public static EndScrollView(): void
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $image: UnityEngine.Texture, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public static Window($id: number, $screenRect: UnityEngine.Rect, $func: UnityEngine.GUI.WindowFunction, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Option passed to a control to give it an absolute width.
            */
            public static Width($width: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum width.
            */
            public static MinWidth($minWidth: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum width.
            */
            public static MaxWidth($maxWidth: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to give it an absolute height.
            */
            public static Height($height: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a minimum height.
            */
            public static MinHeight($minHeight: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to specify a maximum height.
            */
            public static MaxHeight($maxHeight: number): UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow horizontal expansion.
            */
            public static ExpandWidth($expand: boolean): UnityEngine.GUILayoutOption
            /** Option passed to a control to allow or disallow vertical expansion.
            */
            public static ExpandHeight($expand: boolean): UnityEngine.GUILayoutOption
            public constructor()
        }
        /** Class internally used to pass layout options into GUILayout functions. You don't use these directly, but construct them with the layouting functions in the GUILayout class.
        */
        class GUILayoutOption extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Utility functions for implementing and extending the GUILayout class.
        */
        class GUILayoutUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param $content The content to make room for displaying.
            * @param $style The GUIStyle to layout for.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            /** Reserve layout space for a rectangle for displaying some contents with a specific style.
            * @param $content The content to make room for displaying.
            * @param $style The GUIStyle to layout for.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle that is large enough to contain content when rendered in style. 
            */
            public static GetRect($content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect($width: number, $height: number): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect($width: number, $height: number, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect($width: number, $height: number, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a fixed content area.
            * @param $width The width of the area you want.
            * @param $height The height of the area you want.
            * @param $style An optional GUIStyle to layout for. If specified, the style's padding value will be added to your sizes & its margin value will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rectangle to put your control in. 
            */
            public static GetRect($width: number, $height: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number): UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Reserve layout space for a flexible rect.
            * @param $minWidth The minimum width of the area passed back.
            * @param $maxWidth The maximum width of the area passed back.
            * @param $minHeight The minimum width of the area passed back.
            * @param $maxHeight The maximum width of the area passed back.
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes requested & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns A rectangle with size between minWidth & maxWidth on both axes. 
            */
            public static GetRect($minWidth: number, $maxWidth: number, $minHeight: number, $maxHeight: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Get the rectangle last used by GUILayout for a control.
            * @returns The last used rectangle. 
            */
            public static GetLastRect(): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect($aspect: number): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect($aspect: number, $style: UnityEngine.GUIStyle): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect($aspect: number, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            /** Reserve layout space for a rectangle with a specific aspect ratio.
            * @param $aspect The aspect ratio of the element (width / height).
            * @param $style An optional style. If specified, the style's padding value will be added to the sizes of the returned rectangle & the style's margin values will be used for spacing.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The rect for the control. 
            */
            public static GetAspectRect($aspect: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect
            public constructor()
        }
        /** General settings for how the GUI behaves.
        */
        class GUISettings extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Should double-clicking select words in text fields.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** Should triple-clicking select whole text in text fields.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** The color of the cursor in text fields.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** The speed of text field cursor flashes.
            */
            public get cursorFlashSpeed(): number;
            public set cursorFlashSpeed(value: number);
            /** The color of the selection rect in text fields.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            public constructor()
        }
        /** Script interface for.
        */
        class Font extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The material used for the font display.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public get fontNames(): System.Array$1<string>;
            public set fontNames(value: System.Array$1<string>);
            /** Is the font a dynamic font.
            */
            public get dynamic(): boolean;
            /** The ascent of the font.
            */
            public get ascent(): number;
            /** The default size of the font.
            */
            public get fontSize(): number;
            /** Access an array of all characters contained in the font texture.
            */
            public get characterInfo(): System.Array$1<UnityEngine.CharacterInfo>;
            public set characterInfo(value: System.Array$1<UnityEngine.CharacterInfo>);
            /** The line height of the font.
            */
            public get lineHeight(): number;
            public static add_textureRebuilt($value: System.Action$1<UnityEngine.Font>): void
            public static remove_textureRebuilt($value: System.Action$1<UnityEngine.Font>): void
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param $fontname The name of the OS font to use for this font object.
            * @param $size The default character size of the generated font.
            * @param $fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont($fontname: string, $size: number): UnityEngine.Font
            /** Creates a Font object which lets you render a font installed on the user machine.
            * @param $fontname The name of the OS font to use for this font object.
            * @param $size The default character size of the generated font.
            * @param $fontnames Am array of names of OS fonts to use for this font object. When rendering characters using this font object, the first font which is installed on the machine, which contains the requested character will be used.
            * @returns The generate Font object. 
            */
            public static CreateDynamicFontFromOSFont($fontnames: System.Array$1<string>, $size: number): UnityEngine.Font
            /** Returns the maximum number of verts that the text generator may return for a given string.
            * @param $str Input string.
            */
            public static GetMaxVertsForString($str: string): number
            /** Does this font have a specific character?
            * @param $c The character to check for.
            * @returns Whether or not the font has the character specified. 
            */
            public HasCharacter($c: number): boolean
            /** Get names of fonts installed on the machine.
            * @returns An array of the names of all fonts installed on the machine. 
            */
            public static GetOSInstalledFontNames(): System.Array$1<string>
            /** Gets the file paths of the fonts that are installed on the operating system.
            * @returns An array of the file paths of all fonts installed on the machine. 
            */
            public static GetPathsToOSFonts(): System.Array$1<string>
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number, $style: UnityEngine.FontStyle): boolean
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo($ch: number, $info: $Ref<UnityEngine.CharacterInfo>, $size: number): boolean
            /** Get rendering info for a specific character.
            * @param $ch The character you need rendering information for.
            * @param $info Returns the CharacterInfo struct with the rendering information for the character (if available).
            * @param $size The size of the character (default value of zero will use font default size).
            * @param $style The style of the character.
            */
            public GetCharacterInfo($ch: number, $info: $Ref<UnityEngine.CharacterInfo>): boolean
            /** Request characters to be added to the font texture (dynamic fonts only).
            * @param $characters The characters which are needed to be in the font texture.
            * @param $size The size of the requested characters (the default value of zero will use the font's default size).
            * @param $style The style of the requested characters.
            */
            public RequestCharactersInTexture($characters: string, $size: number, $style: UnityEngine.FontStyle): void
            public RequestCharactersInTexture($characters: string, $size: number): void
            public RequestCharactersInTexture($characters: string): void
            public constructor()
            public constructor($name: string)
        }
        /** Specialized values for the given states used by GUIStyle objects.
        */
        class GUIStyleState extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The background image used by GUI elements in this given state.
            */
            public get background(): UnityEngine.Texture2D;
            public set background(value: UnityEngine.Texture2D);
            /** The text color used by GUI elements in this state.
            */
            public get textColor(): UnityEngine.Color;
            public set textColor(value: UnityEngine.Color);
            public constructor()
        }
        /** How image and text is placed inside GUIStyle.
        */
        enum ImagePosition { ImageLeft = 0, ImageAbove = 1, ImageOnly = 2, TextOnly = 3 }
        /** Where the anchor of the text is placed.
        */
        enum TextAnchor { UpperLeft = 0, UpperCenter = 1, UpperRight = 2, MiddleLeft = 3, MiddleCenter = 4, MiddleRight = 5, LowerLeft = 6, LowerCenter = 7, LowerRight = 8 }
        /** Different methods for how the GUI system handles text being too large to fit the rectangle allocated.
        */
        enum TextClipping { Overflow = 0, Clip = 1 }
        /** Font Style applied to GUI Texts, Text Meshes or GUIStyles.
        */
        enum FontStyle { Normal = 0, Bold = 1, Italic = 2, BoldAndItalic = 3 }
        /** Allows to control for which display the OnGUI is called.
        */
        class GUITargetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($displayIndex: number)
            public constructor($displayIndex: number, $displayIndex1: number)
            public constructor($displayIndex: number, $displayIndex1: number, ...displayIndexList: number[])
        }
        /** Utility class for making new GUI controls.
        */
        class GUIUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** A global property, which is true if a ModalWindow is being displayed, false otherwise.
            */
            public static get hasModalWindow(): boolean;
            /** Get access to the system-wide clipboard.
            */
            public static get systemCopyBuffer(): string;
            public static set systemCopyBuffer(value: string);
            /** The controlID of the current hot control.
            */
            public static get hotControl(): number;
            public static set hotControl(value: number);
            /** The controlID of the control that has keyboard focus.
            */
            public static get keyboardControl(): number;
            public static set keyboardControl(value: number);
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID($hint: number, $focusType: UnityEngine.FocusType, $rect: UnityEngine.Rect): number
            /** Align a local space rectangle to the pixel grid.
            * @param $local The local space rectangle that needs to be processed.
            * @param $widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param $heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice($rect: UnityEngine.Rect, $widthInPixels: $Ref<number>, $heightInPixels: $Ref<number>): UnityEngine.Rect
            /** Get a unique ID for a control.
            */
            public static GetControlID($focus: UnityEngine.FocusType): number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType): number
            /** Get a unique ID for a control.
            */
            public static GetControlID($focus: UnityEngine.FocusType, $position: UnityEngine.Rect): number
            /** Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID($contents: UnityEngine.GUIContent, $focus: UnityEngine.FocusType, $position: UnityEngine.Rect): number
            /** Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.
            */
            public static GetControlID($hint: number, $focus: UnityEngine.FocusType): number
            /** Get a state object from a controlID.
            */
            public static GetStateObject($t: System.Type, $controlID: number): any
            /** Get an existing state object from a controlID.
            */
            public static QueryStateObject($t: System.Type, $controlID: number): any
            /** Puts the GUI in a state that will prevent all subsequent immediate mode GUI functions from evaluating for the remainder of the GUI loop by throwing an ExitGUIException.
            */
            public static ExitGUI(): void
            /** Convert a point from GUI position to screen space.
            */
            public static GUIToScreenPoint($guiPoint: UnityEngine.Vector2): UnityEngine.Vector2
            /** Convert a rect from GUI position to screen space.
            */
            public static GUIToScreenRect($guiRect: UnityEngine.Rect): UnityEngine.Rect
            /** Convert a point from screen space to GUI position.
            */
            public static ScreenToGUIPoint($screenPoint: UnityEngine.Vector2): UnityEngine.Vector2
            /** Convert a rect from screen space to GUI position.
            */
            public static ScreenToGUIRect($screenRect: UnityEngine.Rect): UnityEngine.Rect
            /** Helper function to rotate the GUI around a point.
            */
            public static RotateAroundPivot($angle: number, $pivotPoint: UnityEngine.Vector2): void
            /** Helper function to scale the GUI around a point.
            */
            public static ScaleAroundPivot($scale: UnityEngine.Vector2, $pivotPoint: UnityEngine.Vector2): void
            /** Align a local space rectangle to the pixel grid.
            * @param $local The local space rectangle that needs to be processed.
            * @param $widthInPixels Width, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @param $heightInPixels Height, in pixel units, of the axis-aligned bounding box that encompasses the aligned points.
            * @returns The aligned rectangle in local space. 
            */
            public static AlignRectToDevice($rect: UnityEngine.Rect): UnityEngine.Rect
            public constructor()
        }
        /** Used by GUIUtility.GetControlID to inform the IMGUI system if a given control can get keyboard focus. This allows the IMGUI system to give focus appropriately when a user presses tab for cycling between controls.
        */
        enum FocusType { Native = 0, Keyboard = 1, Passive = 2 }
        /** An exception that will prevent all subsequent immediate mode GUI functions from evaluating for the remainder of the GUI loop.
        */
        class ExitGUIException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        class TextEditor extends System.Object {
            protected [__keep_incompatibility]: never;
            public keyboardOnScreen: UnityEngine.TouchScreenKeyboard
            public controlID: number
            public style: UnityEngine.GUIStyle
            public multiline: boolean
            public hasHorizontalCursorPos: boolean
            public isPasswordField: boolean
            public scrollOffset: UnityEngine.Vector2
            public graphicalCursorPos: UnityEngine.Vector2
            public graphicalSelectCursorPos: UnityEngine.Vector2
            public get text(): string;
            public set text(value: string);
            public get position(): UnityEngine.Rect;
            public set position(value: UnityEngine.Rect);
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            public get selectIndex(): number;
            public set selectIndex(value: number);
            public get doubleClickSnapping(): UnityEngine.TextEditor.DblClickSnapping;
            public set doubleClickSnapping(value: UnityEngine.TextEditor.DblClickSnapping);
            public get altCursorPosition(): number;
            public set altCursorPosition(value: number);
            public get hasSelection(): boolean;
            public get SelectedText(): string;
            public OnFocus(): void
            public OnLostFocus(): void
            public HandleKeyEvent($e: UnityEngine.Event): boolean
            public DeleteLineBack(): boolean
            public DeleteWordBack(): boolean
            public DeleteWordForward(): boolean
            public Delete(): boolean
            public CanPaste(): boolean
            public Backspace(): boolean
            public SelectAll(): void
            public SelectNone(): void
            public DeleteSelection(): boolean
            public ReplaceSelection($replace: string): void
            public Insert($c: number): void
            public MoveSelectionToAltCursor(): void
            public MoveRight(): void
            public MoveLeft(): void
            public MoveUp(): void
            public MoveDown(): void
            public MoveLineStart(): void
            public MoveLineEnd(): void
            public MoveGraphicalLineStart(): void
            public MoveGraphicalLineEnd(): void
            public MoveTextStart(): void
            public MoveTextEnd(): void
            public MoveParagraphForward(): void
            public MoveParagraphBackward(): void
            public MoveCursorToPosition($cursorPosition: UnityEngine.Vector2): void
            public MoveAltCursorToPosition($cursorPosition: UnityEngine.Vector2): void
            public IsOverSelection($cursorPosition: UnityEngine.Vector2): boolean
            public SelectToPosition($cursorPosition: UnityEngine.Vector2): void
            public SelectLeft(): void
            public SelectRight(): void
            public SelectUp(): void
            public SelectDown(): void
            public SelectTextEnd(): void
            public SelectTextStart(): void
            public MouseDragSelectsWholeWords($on: boolean): void
            public DblClickSnap($snapping: UnityEngine.TextEditor.DblClickSnapping): void
            public MoveWordRight(): void
            public MoveToStartOfNextWord(): void
            public MoveToEndOfPreviousWord(): void
            public SelectToStartOfNextWord(): void
            public SelectToEndOfPreviousWord(): void
            public FindStartOfNextWord($p: number): number
            public MoveWordLeft(): void
            public SelectWordRight(): void
            public SelectWordLeft(): void
            public ExpandSelectGraphicalLineStart(): void
            public ExpandSelectGraphicalLineEnd(): void
            public SelectGraphicalLineStart(): void
            public SelectGraphicalLineEnd(): void
            public SelectParagraphForward(): void
            public SelectParagraphBackward(): void
            public SelectCurrentWord(): void
            public SelectCurrentParagraph(): void
            public UpdateScrollOffsetIfNeeded($evt: UnityEngine.Event): void
            public DrawCursor($newText: string): void
            public SaveBackup(): void
            public Undo(): void
            public Cut(): boolean
            public Copy(): void
            public Paste(): boolean
            public DetectFocusChange(): void
            public constructor()
        }
        /** This class provides utility and extension methods to convert image data from or to PNG, EXR, TGA, and JPEG formats.
        */
        class ImageConversion extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Enables legacy PNG runtime import behavior.
            */
            public static get EnableLegacyPngGammaRuntimeLoadBehavior(): boolean;
            public static set EnableLegacyPngGammaRuntimeLoadBehavior(value: boolean);
            /** Encodes the specified texture in TGA format.
            * @param $tex The texture to encode.
            */
            public static EncodeToTGA($tex: UnityEngine.Texture2D): System.Array$1<number>
            /** Encodes this texture into PNG format.
            * @param $tex The texture to convert.
            */
            public static EncodeToPNG($tex: UnityEngine.Texture2D): System.Array$1<number>
            /** Encodes this texture into JPG format.
            * @param $tex Text texture to convert.
            * @param $quality JPG quality to encode with. The range is 1 through 100. 1 is the lowest quality. The default is 75.
            */
            public static EncodeToJPG($tex: UnityEngine.Texture2D, $quality: number): System.Array$1<number>
            /** Encodes this texture into JPG format.
            * @param $tex Text texture to convert.
            * @param $quality JPG quality to encode with. The range is 1 through 100. 1 is the lowest quality. The default is 75.
            */
            public static EncodeToJPG($tex: UnityEngine.Texture2D): System.Array$1<number>
            public static EncodeToEXR($tex: UnityEngine.Texture2D, $flags: UnityEngine.Texture2D.EXRFlags): System.Array$1<number>
            public static EncodeToEXR($tex: UnityEngine.Texture2D): System.Array$1<number>
            /** Loads PNG or JPG image byte array into a texture.
            * @param $tex The texture to load the image into.
            * @param $data The byte array containing the image data to load.
            * @param $markNonReadable Set to false by default, pass true to optionally mark the texture as non-readable.
            * @returns Returns true if the data can be loaded, false otherwise. 
            */
            public static LoadImage($tex: UnityEngine.Texture2D, $data: System.Array$1<number>, $markNonReadable: boolean): boolean
            public static LoadImage($tex: UnityEngine.Texture2D, $data: System.Array$1<number>): boolean
            /** Encodes this array into TGA format.
            * @param $array The byte array to convert.
            * @param $format The pixel format of the image data.
            * @param $width The width of the image data in pixels.
            * @param $height The height of the image data in pixels.
            * @param $rowBytes The length of a single row in bytes. The default is 0, which means Unity calculates the length automatically.
            */
            public static EncodeArrayToTGA($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number): System.Array$1<number>
            /** Encodes this array into PNG format.
            * @param $array The byte array to convert.
            * @param $format The pixel format of the image data.
            * @param $width The width of the image data in pixels.
            * @param $height The height of the image data in pixels.
            * @param $rowBytes The length of a single row in bytes. The default is 0, which means Unity calculates the length automatically.
            */
            public static EncodeArrayToPNG($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number): System.Array$1<number>
            /** Encodes this array into JPG format.
            * @param $array The byte array to convert.
            * @param $format The pixel format of the image data.
            * @param $width The width of the image data in pixels.
            * @param $height The height of the image data in pixels.
            * @param $rowBytes The length of a single row in bytes. The default is 0, which means Unity calculates the length automatically.
            * @param $quality JPG quality to encode with. The range is 1 through 100. 1 is the lowest quality. The default is 75.
            */
            public static EncodeArrayToJPG($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number, $quality?: number): System.Array$1<number>
            public static EncodeArrayToEXR($array: System.Array, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $width: number, $height: number, $rowBytes?: number, $flags?: UnityEngine.Texture2D.EXRFlags): System.Array$1<number>
        }
        /** Interface into the Gyroscope.
        */
        class Gyroscope extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Returns rotation rate as measured by the device's gyroscope.
            */
            public get rotationRate(): UnityEngine.Vector3;
            /** Returns unbiased rotation rate as measured by the device's gyroscope.
            */
            public get rotationRateUnbiased(): UnityEngine.Vector3;
            /** Returns the gravity acceleration vector expressed in the device's reference frame.
            */
            public get gravity(): UnityEngine.Vector3;
            /** Returns the acceleration that the user is giving to the device.
            */
            public get userAcceleration(): UnityEngine.Vector3;
            /** Returns the attitude (ie, orientation in space) of the device.
            */
            public get attitude(): UnityEngine.Quaternion;
            /** Sets or retrieves the enabled status of this gyroscope.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Sets or retrieves gyroscope interval in seconds.
            */
            public get updateInterval(): number;
            public set updateInterval(value: number);
        }
        /** Provides methods that allow an application to access the device's location.
        */
        class LocationService extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Indicates whether the device allows the application to access the location service.
            */
            public get isEnabledByUser(): boolean;
            /** Returns the location service status.
            */
            public get status(): UnityEngine.LocationServiceStatus;
            /** The last geographical location that the device registered.
            */
            public get lastData(): UnityEngine.LocationInfo;
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters 
            The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters 
            The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start($desiredAccuracyInMeters: number, $updateDistanceInMeters: number): void
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters 
            The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters 
            The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start($desiredAccuracyInMeters: number): void
            /** Starts location service updates.
            * @param $desiredAccuracyInMeters 
            The service accuracy you want to use, in meters. This determines the accuracy of the device's last location coordinates. Higher values like 500 don't require the device to use its GPS chip and
            thus save battery power. Lower values like 5-10 provide the best accuracy but require the GPS chip and thus use more battery power. The default value is 10 meters.
            * @param $updateDistanceInMeters 
            The minimum distance, in meters, that the device must move laterally before Unity updates Input.location. Higher values like 500 produce fewer updates and are less resource intensive to process. The default is 10 meters.
            */
            public Start(): void
            /** Stops location service updates. This is useful to save battery power when the application doesn't require the location service.
            */
            public Stop(): void
            public constructor()
        }
        /** Describes the location service status for a device.
        */
        enum LocationServiceStatus { Stopped = 0, Initializing = 1, Running = 2, Failed = 3 }
        /** Structure describing device location.
        */
        class LocationInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Interface into compass functionality.
        */
        class Compass extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The heading in degrees relative to the magnetic North Pole. (Read Only)
            */
            public get magneticHeading(): number;
            /** The heading in degrees relative to the geographic North Pole. (Read Only)
            */
            public get trueHeading(): number;
            /** Accuracy of heading reading in degrees.
            */
            public get headingAccuracy(): number;
            /** The raw geomagnetic data measured in microteslas. (Read Only)
            */
            public get rawVector(): UnityEngine.Vector3;
            /** Indicates the time elapsed since the compass heading was last updated. (Read Only)
            */
            public get timestamp(): number;
            /** Used to enable or disable compass. Note, that if you want Input.compass.trueHeading property to contain a valid value, you must also enable location updates by calling Input.location.Start().
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            public constructor()
        }
        /** Interface into the Input system.
        */
        class Input extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Enables/Disables mouse simulation with touches. By default this option is enabled.
            */
            public static get simulateMouseWithTouches(): boolean;
            public static set simulateMouseWithTouches(value: boolean);
            /** Is any key or mouse button currently held down? (Read Only)
            */
            public static get anyKey(): boolean;
            /** Returns true the first frame the user hits any key or mouse button. (Read Only)
            */
            public static get anyKeyDown(): boolean;
            /** Returns the keyboard input entered this frame. (Read Only)
            */
            public static get inputString(): string;
            /** The current mouse position in pixel coordinates. (Read Only).
            */
            public static get mousePosition(): UnityEngine.Vector3;
            /** The current mouse scroll delta. (Read Only)
            */
            public static get mouseScrollDelta(): UnityEngine.Vector2;
            /** Controls enabling and disabling of IME input composition.
            */
            public static get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public static set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            /** The current IME composition string being typed by the user.
            */
            public static get compositionString(): string;
            /** Does the user have an IME keyboard input source selected?
            */
            public static get imeIsSelected(): boolean;
            /** The current text input position used by IMEs to open windows.
            */
            public static get compositionCursorPos(): UnityEngine.Vector2;
            public static set compositionCursorPos(value: UnityEngine.Vector2);
            /** Indicates if a mouse device is detected.
            */
            public static get mousePresent(): boolean;
            /** Returns the number of queued pen events that can be accessed by calling GetPenEvent().
            */
            public static get penEventCount(): number;
            /** Number of touches. Guaranteed not to change throughout the frame. (Read Only)
            */
            public static get touchCount(): number;
            /** Bool value which let's users check if touch pressure is supported.
            */
            public static get touchPressureSupported(): boolean;
            /** Returns true when Stylus Touch is supported by a device or platform.
            */
            public static get stylusTouchSupported(): boolean;
            /** Returns whether the device on which application is currently running supports touch input.
            */
            public static get touchSupported(): boolean;
            /** Property indicating whether the system handles multiple touches.
            */
            public static get multiTouchEnabled(): boolean;
            public static set multiTouchEnabled(value: boolean);
            /** Device physical orientation as reported by OS. (Read Only)
            */
            public static get deviceOrientation(): UnityEngine.DeviceOrientation;
            /** Last measured linear acceleration of a device in three-dimensional space. (Read Only)
            */
            public static get acceleration(): UnityEngine.Vector3;
            /** This property controls if input sensors should be compensated for screen orientation.
            */
            public static get compensateSensors(): boolean;
            public static set compensateSensors(value: boolean);
            /** Number of acceleration measurements which occurred during last frame.
            */
            public static get accelerationEventCount(): number;
            /** Should  Back button quit the application?
            Only usable on Android, Windows Phone or Windows Tablets.
            */
            public static get backButtonLeavesApp(): boolean;
            public static set backButtonLeavesApp(value: boolean);
            /** Property for accessing device location (handheld devices only). (Read Only)
            */
            public static get location(): UnityEngine.LocationService;
            /** Property for accessing compass (handheld devices only). (Read Only)
            */
            public static get compass(): UnityEngine.Compass;
            /** Returns default gyroscope.
            */
            public static get gyro(): UnityEngine.Gyroscope;
            /** Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).
            */
            public static get touches(): System.Array$1<UnityEngine.Touch>;
            /** Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).
            */
            public static get accelerationEvents(): System.Array$1<UnityEngine.AccelerationEvent>;
            /** Returns the value of the virtual axis identified by axisName.
            */
            public static GetAxis($axisName: string): number
            /** Returns the value of the virtual axis identified by axisName with no smoothing filtering applied.
            */
            public static GetAxisRaw($axisName: string): number
            /** Returns true while the virtual button identified by buttonName is held down.
            * @param $buttonName The name of the button such as Jump.
            * @returns True when an axis has been pressed and not released. 
            */
            public static GetButton($buttonName: string): boolean
            /** Returns true during the frame the user pressed down the virtual button identified by buttonName.
            */
            public static GetButtonDown($buttonName: string): boolean
            /** Returns true the first frame the user releases the virtual button identified by buttonName.
            */
            public static GetButtonUp($buttonName: string): boolean
            /** Returns whether the given mouse button is held down.
            */
            public static GetMouseButton($button: number): boolean
            /** Returns true during the frame the user pressed the given mouse button.
            */
            public static GetMouseButtonDown($button: number): boolean
            /** Returns true during the frame the user releases the given mouse button.
            */
            public static GetMouseButtonUp($button: number): boolean
            /** Resets all input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame.
            */
            public static ResetInputAxes(): void
            /** Retrieves a list of input device names corresponding to the index of an Axis configured within Input Manager.
            * @returns Returns an array of joystick and gamepad device names. 
            */
            public static GetJoystickNames(): System.Array$1<string>
            /** Call Input.GetTouch to obtain a Touch struct.
            * @param $index The touch input on the device screen.
            * @returns Touch details in the struct. 
            */
            public static GetTouch($index: number): UnityEngine.Touch
            /** Returns the PenData for the pen event at the given index in the pen event queue.
            * @returns Pen event details in the struct. 
            */
            public static GetPenEvent($index: number): UnityEngine.PenData
            /** Returns the PenData for the last stored pen up or down event.
            * @returns Pen event details in the struct. 
            */
            public static GetLastPenContactEvent(): UnityEngine.PenData
            /** Clears the pen event queue.
            */
            public static ResetPenEvents(): void
            /** Clears the last stored pen event.
            Calling this function may impact event handling for UIToolKit elements.
            */
            public static ClearLastPenContactEvent(): void
            /** Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).
            */
            public static GetAccelerationEvent($index: number): UnityEngine.AccelerationEvent
            /** Returns true while the user holds down the key identified by the key KeyCode enum parameter.
            */
            public static GetKey($key: UnityEngine.KeyCode): boolean
            /** Returns true while the user holds down the key identified by name.
            */
            public static GetKey($name: string): boolean
            /** Returns true during the frame the user releases the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyUp($key: UnityEngine.KeyCode): boolean
            /** Returns true during the frame the user releases the key identified by name.
            */
            public static GetKeyUp($name: string): boolean
            /** Returns true during the frame the user starts pressing down the key identified by the key KeyCode enum parameter.
            */
            public static GetKeyDown($key: UnityEngine.KeyCode): boolean
            /** Returns true during the frame the user starts pressing down the key identified by name.
            */
            public static GetKeyDown($name: string): boolean
            public constructor()
        }
        /** Structure describing the status of a finger touching the screen.
        */
        class Touch extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Structure describing the status of a pen event.
        */
        class PenData extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Structure describing acceleration status of the device.
        */
        class AccelerationEvent extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Controls IME input.
        */
        enum IMECompositionMode { Auto = 0, On = 1, Off = 2 }
        /** Describes physical orientation of the device as determined by the OS.
        */
        enum DeviceOrientation { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6 }
        /** Utility functions for working with JSON data.
        */
        class JsonUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Generate a JSON representation of the public fields of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson($obj: any): string
            /** Generate a JSON representation of the public fields of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson($obj: any, $prettyPrint: boolean): string
            /** Create an object from its JSON representation.
            * @param $json The JSON representation of the object.
            * @param $type The type of object represented by the Json.
            * @returns An instance of the object. 
            */
            public static FromJson($json: string, $type: System.Type): any
            /** Overwrite data in an object by reading from its JSON representation.
            * @param $json The JSON representation of the object.
            * @param $objectToOverwrite The object that should be overwritten.
            */
            public static FromJsonOverwrite($json: string, $objectToOverwrite: any): void
        }
        /** An asset to represent a table of localized strings for one specific locale.
        */
        class LocalizationAsset extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** ISO Code used to identify the locale. ex: en-uk, zh-hans, ja
            */
            public get localeIsoCode(): string;
            public set localeIsoCode(value: string);
            /** Is this asset used to localize UI components of the Unity Editor
            */
            public get isEditorAsset(): boolean;
            public set isEditorAsset(value: boolean);
            /** Set the localized string for the specified key
            * @param $original Original string acting as key.
            * @param $localized Localized string matching the original in the LocalizationAsset locale
            */
            public SetLocalizedString($original: string, $localized: string): void
            /** Get the localized string for the specified key.
            * @param $original Original string acting as key.
            * @returns Localized string matching the original in the LocalizationAsset locale 
            */
            public GetLocalizedString($original: string): string
            public constructor()
        }
        /** Script interface for the Built-in Particle System. Unity's powerful and versatile particle system implementation.
        */
        class ParticleSystem extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Determines whether the Particle System is playing.
            */
            public get isPlaying(): boolean;
            /** Determines whether the Particle System is emitting particles. A Particle System may stop emitting when its emission module has finished, it has been paused or if the system has been stopped using ParticleSystem.Stop|Stop with the ParticleSystemStopBehavior.StopEmitting|StopEmitting flag. Resume emitting by calling ParticleSystem.Play|Play.
            */
            public get isEmitting(): boolean;
            /** Determines whether the Particle System is in the stopped state.
            */
            public get isStopped(): boolean;
            /** Determines whether the Particle System is paused.
            */
            public get isPaused(): boolean;
            /** The current number of particles (Read Only). The number doesn't include particles of child Particle Systems
            */
            public get particleCount(): number;
            /** Playback position in seconds.
            */
            public get time(): number;
            public set time(value: number);
            /** Total playback time in seconds, including the Start Delay setting.
            */
            public get totalTime(): number;
            /** Override the random seed used for the Particle System emission.
            */
            public get randomSeed(): number;
            public set randomSeed(value: number);
            /** Controls whether the Particle System uses an automatically-generated random number to seed the random number generator.
            */
            public get useAutoRandomSeed(): boolean;
            public set useAutoRandomSeed(value: boolean);
            /** Does this system support Procedural Simulation?
            */
            public get proceduralSimulationSupported(): boolean;
            /** Determines whether the Particle System rotates its particles around only the Z axis, or whether the system specifies separate values for the X, Y and Z axes.
            */
            public get has3DParticleRotations(): boolean;
            /** Determines whether the Particle System uses a single value for the width and height (and depth, when using meshes), or if the system specifies different values for each axis.
            */
            public get hasNonUniformParticleSizes(): boolean;
            /** Access the main Particle System settings.
            */
            public get main(): UnityEngine.ParticleSystem.MainModule;
            /** Script interface for the EmissionModule of a Particle System.
            */
            public get emission(): UnityEngine.ParticleSystem.EmissionModule;
            /** Script interface for the ShapeModule of a Particle System. 
            */
            public get shape(): UnityEngine.ParticleSystem.ShapeModule;
            /** Script interface for the VelocityOverLifetimeModule of a Particle System.
            */
            public get velocityOverLifetime(): UnityEngine.ParticleSystem.VelocityOverLifetimeModule;
            /** Script interface for the LimitVelocityOverLifetimeModule of a Particle System. .
            */
            public get limitVelocityOverLifetime(): UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule;
            /** Script interface for the InheritVelocityModule of a Particle System.
            */
            public get inheritVelocity(): UnityEngine.ParticleSystem.InheritVelocityModule;
            /** Script interface for the Particle System Lifetime By Emitter Speed module.
            */
            public get lifetimeByEmitterSpeed(): UnityEngine.ParticleSystem.LifetimeByEmitterSpeedModule;
            /** Script interface for the ForceOverLifetimeModule of a Particle System.
            */
            public get forceOverLifetime(): UnityEngine.ParticleSystem.ForceOverLifetimeModule;
            /** Script interface for the ColorOverLifetimeModule of a Particle System.
            */
            public get colorOverLifetime(): UnityEngine.ParticleSystem.ColorOverLifetimeModule;
            /** Script interface for the ColorByLifetimeModule of a Particle System.
            */
            public get colorBySpeed(): UnityEngine.ParticleSystem.ColorBySpeedModule;
            /** Script interface for the SizeOverLifetimeModule of a Particle System. 
            */
            public get sizeOverLifetime(): UnityEngine.ParticleSystem.SizeOverLifetimeModule;
            /** Script interface for the SizeBySpeedModule of a Particle System.
            */
            public get sizeBySpeed(): UnityEngine.ParticleSystem.SizeBySpeedModule;
            /** Script interface for the RotationOverLifetimeModule of a Particle System.
            */
            public get rotationOverLifetime(): UnityEngine.ParticleSystem.RotationOverLifetimeModule;
            /** Script interface for the RotationBySpeedModule of a Particle System.
            */
            public get rotationBySpeed(): UnityEngine.ParticleSystem.RotationBySpeedModule;
            /** Script interface for the ExternalForcesModule of a Particle System.
            */
            public get externalForces(): UnityEngine.ParticleSystem.ExternalForcesModule;
            /** Script interface for the NoiseModule of a Particle System.
            */
            public get noise(): UnityEngine.ParticleSystem.NoiseModule;
            /** Script interface for the CollisionModule of a Particle System.
            */
            public get collision(): UnityEngine.ParticleSystem.CollisionModule;
            /** Script interface for the TriggerModule of a Particle System.
            */
            public get trigger(): UnityEngine.ParticleSystem.TriggerModule;
            /** Script interface for the SubEmittersModule of a Particle System.
            */
            public get subEmitters(): UnityEngine.ParticleSystem.SubEmittersModule;
            /** Script interface for the TextureSheetAnimationModule of a Particle System.
            */
            public get textureSheetAnimation(): UnityEngine.ParticleSystem.TextureSheetAnimationModule;
            /** Script interface for the LightsModule of a Particle System.
            */
            public get lights(): UnityEngine.ParticleSystem.LightsModule;
            /** Script interface for the TrailsModule of a Particle System.
            */
            public get trails(): UnityEngine.ParticleSystem.TrailModule;
            /** Script interface for the CustomDataModule of a Particle System.
            */
            public get customData(): UnityEngine.ParticleSystem.CustomDataModule;
            public SetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number): void
            public SetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number): void
            public SetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>): void
            public SetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number): void
            public SetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number): void
            public SetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>): void
            public GetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number): number
            public GetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>, $size: number): number
            public GetParticles($particles: System.Array$1<UnityEngine.ParticleSystem.Particle>): number
            public GetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number, $offset: number): number
            public GetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>, $size: number): number
            public GetParticles($particles: Unity.Collections.NativeArray$1<UnityEngine.ParticleSystem.Particle>): number
            public SetCustomParticleData($customData: System.Collections.Generic.List$1<UnityEngine.Vector4>, $streamIndex: UnityEngine.ParticleSystemCustomData): void
            public GetCustomParticleData($customData: System.Collections.Generic.List$1<UnityEngine.Vector4>, $streamIndex: UnityEngine.ParticleSystemCustomData): number
            /** Returns all the data that relates to the current internal state of the Particle System.
            * @returns The current internal state of the Particle System. 
            */
            public GetPlaybackState(): UnityEngine.ParticleSystem.PlaybackState
            public SetPlaybackState($playbackState: UnityEngine.ParticleSystem.PlaybackState): void
            /** Returns all the data relating to the current internal state of the Particle System Trails.
            * @returns The variable to populate with the Trails that currently belong to the Particle System.. 
            */
            public GetTrails(): UnityEngine.ParticleSystem.Trails
            public GetTrails($trailData: $Ref<UnityEngine.ParticleSystem.Trails>): number
            public SetTrails($trailData: UnityEngine.ParticleSystem.Trails): void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param $t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param $withChildren Fast-forward all child Particle Systems as well.
            * @param $restart Restart and start from the beginning.
            * @param $fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate($t: number, $withChildren: boolean, $restart: boolean, $fixedTimeStep: boolean): void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param $t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param $withChildren Fast-forward all child Particle Systems as well.
            * @param $restart Restart and start from the beginning.
            * @param $fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate($t: number, $withChildren: boolean, $restart: boolean): void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param $t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param $withChildren Fast-forward all child Particle Systems as well.
            * @param $restart Restart and start from the beginning.
            * @param $fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate($t: number, $withChildren: boolean): void
            /** Fast-forwards the Particle System by simulating particles over the given period of time, then pauses it.
            * @param $t Time period in seconds to advance the ParticleSystem simulation by. If restart is true, the ParticleSystem will be reset to 0 time, and then advanced by this value. If restart is false, the ParticleSystem simulation will be advanced in time from its current state by this value.
            * @param $withChildren Fast-forward all child Particle Systems as well.
            * @param $restart Restart and start from the beginning.
            * @param $fixedTimeStep Only update the system at fixed intervals, based on the value in "Fixed Time" in the Time options.
            */
            public Simulate($t: number): void
            /** Starts the Particle System.
            * @param $withChildren Play all child Particle Systems as well.
            */
            public Play($withChildren: boolean): void
            /** Starts the Particle System.
            * @param $withChildren Play all child Particle Systems as well.
            */
            public Play(): void
            /** Pauses the system so no new particles are emitted and the existing particles are not updated.
            * @param $withChildren Pause all child Particle Systems as well.
            */
            public Pause($withChildren: boolean): void
            /** Pauses the system so no new particles are emitted and the existing particles are not updated.
            * @param $withChildren Pause all child Particle Systems as well.
            */
            public Pause(): void
            /** Stops playing the Particle System using the supplied stop behaviour.
            * @param $withChildren Stop all child Particle Systems as well.
            * @param $stopBehavior Stop emitting or stop emitting and clear the system.
            */
            public Stop($withChildren: boolean, $stopBehavior: UnityEngine.ParticleSystemStopBehavior): void
            /** Stops playing the Particle System using the supplied stop behaviour.
            * @param $withChildren Stop all child Particle Systems as well.
            * @param $stopBehavior Stop emitting or stop emitting and clear the system.
            */
            public Stop($withChildren: boolean): void
            /** Stops playing the Particle System using the supplied stop behaviour.
            * @param $withChildren Stop all child Particle Systems as well.
            * @param $stopBehavior Stop emitting or stop emitting and clear the system.
            */
            public Stop(): void
            /** Remove all particles in the Particle System.
            * @param $withChildren Clear all child Particle Systems as well.
            */
            public Clear($withChildren: boolean): void
            /** Remove all particles in the Particle System.
            * @param $withChildren Clear all child Particle Systems as well.
            */
            public Clear(): void
            /** Does the Particle System contain any live particles, or will it produce more?
            * @param $withChildren Check all child Particle Systems as well.
            * @returns True if the Particle System contains live particles or is still creating new particles. False if the Particle System has stopped emitting particles and all particles are dead. 
            */
            public IsAlive($withChildren: boolean): boolean
            /** Does the Particle System contain any live particles, or will it produce more?
            * @param $withChildren Check all child Particle Systems as well.
            * @returns True if the Particle System contains live particles or is still creating new particles. False if the Particle System has stopped emitting particles and all particles are dead. 
            */
            public IsAlive(): boolean
            /** Emit count particles immediately.
            * @param $count Number of particles to emit.
            */
            public Emit($count: number): void
            public Emit($emitParams: UnityEngine.ParticleSystem.EmitParams, $count: number): void
            /** Triggers the specified sub emitter on all particles of the Particle System.
            * @param $subEmitterIndex Index of the sub emitter to trigger.
            */
            public TriggerSubEmitter($subEmitterIndex: number): void
            public TriggerSubEmitter($subEmitterIndex: number, $particle: $Ref<UnityEngine.ParticleSystem.Particle>): void
            public TriggerSubEmitter($subEmitterIndex: number, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>): void
            /** Reset the cache of reserved graphics memory used for efficient rendering of Particle Systems.
            */
            public static ResetPreMappedBufferMemory(): void
            /** Limits the amount of graphics memory Unity reserves for efficient rendering of Particle Systems.
            * @param $vertexBuffersCount The maximum number of cached vertex buffers.
            * @param $indexBuffersCount The maximum number of cached index buffers.
            */
            public static SetMaximumPreMappedBufferCounts($vertexBuffersCount: number, $indexBuffersCount: number): void
            /** Ensures that the ParticleSystemJobs.ParticleSystemJobData._axisOfRotations|axisOfRotations particle attribute array is allocated.
            */
            public AllocateAxisOfRotationAttribute(): void
            /** Ensures that the ParticleSystemJobs.ParticleSystemJobData._meshIndices|meshIndices particle attribute array is allocated.
            */
            public AllocateMeshIndexAttribute(): void
            /** Ensures that the ParticleSystemJobs.ParticleSystemJobData.customData1|customData1 and ParticleSystemJobs.ParticleSystemJobData.customData1|customData2 particle attribute arrays are allocated.
            * @param $stream The custom data stream to allocate.
            */
            public AllocateCustomDataAttribute($stream: UnityEngine.ParticleSystemCustomData): void
            public constructor()
        }
        /** Script interface for the Built-in Particle System. Unity's powerful and versatile particle system implementation.
        */
        interface ParticleSystem {
            /** Safe array size for use with ParticleSystem.GetCollisionEvents.
            */
            GetSafeCollisionEventSize(): number;
            GetCollisionEvents($go: UnityEngine.GameObject, $collisionEvents: System.Collections.Generic.List$1<UnityEngine.ParticleCollisionEvent>): number;
            /** Safe array size for use with ParticleSystem.GetTriggerParticles.
            * @param $ps Particle system.
            * @param $type Type of trigger to return size for.
            * @returns Number of particles with this trigger event type. 
            */
            GetSafeTriggerParticlesSize($type: UnityEngine.ParticleSystemTriggerEventType): number;
            GetTriggerParticles($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>): number;
            GetTriggerParticles($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $colliderData: $Ref<UnityEngine.ParticleSystem.ColliderData>): number;
            SetTriggerParticles($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $offset: number, $count: number): void;
            SetTriggerParticles($type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>): void;
        }
        /** The space to simulate particles in.
        */
        enum ParticleSystemSimulationSpace { Local = 0, World = 1, Custom = 2 }
        /** Control how particle systems apply transform scale.
        */
        enum ParticleSystemScalingMode { Hierarchy = 0, Local = 1, Shape = 2 }
        /** Which stream of custom particle data to set.
        */
        enum ParticleSystemCustomData { Custom1 = 0, Custom2 = 1 }
        /** The behavior to apply when calling ParticleSystem.Stop|Stop.
        */
        enum ParticleSystemStopBehavior { StopEmittingAndClear = 0, StopEmitting = 1 }
        /** Method extension for Physics in Particle System.
        */
        class ParticlePhysicsExtensions extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Safe array size for use with ParticleSystem.GetCollisionEvents.
            */
            public static GetSafeCollisionEventSize($ps: UnityEngine.ParticleSystem): number
            public static GetCollisionEvents($ps: UnityEngine.ParticleSystem, $go: UnityEngine.GameObject, $collisionEvents: System.Collections.Generic.List$1<UnityEngine.ParticleCollisionEvent>): number
            /** Safe array size for use with ParticleSystem.GetTriggerParticles.
            * @param $ps Particle system.
            * @param $type Type of trigger to return size for.
            * @returns Number of particles with this trigger event type. 
            */
            public static GetSafeTriggerParticlesSize($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType): number
            public static GetTriggerParticles($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>): number
            public static GetTriggerParticles($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $colliderData: $Ref<UnityEngine.ParticleSystem.ColliderData>): number
            public static SetTriggerParticles($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>, $offset: number, $count: number): void
            public static SetTriggerParticles($ps: UnityEngine.ParticleSystem, $type: UnityEngine.ParticleSystemTriggerEventType, $particles: System.Collections.Generic.List$1<UnityEngine.ParticleSystem.Particle>): void
        }
        /** Information about a particle collision.
        */
        class ParticleCollisionEvent extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The different types of particle triggers.
        */
        enum ParticleSystemTriggerEventType { Inside = 0, Outside = 1, Enter = 2, Exit = 3 }
        /** Script interface for Particle System Force Fields.
        */
        class ParticleSystemForceField extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Selects the type of shape used for influencing particles.
            */
            public get shape(): UnityEngine.ParticleSystemForceFieldShape;
            public set shape(value: UnityEngine.ParticleSystemForceFieldShape);
            /** Setting a value greater than 0 creates a hollow Force Field shape. This will cause particles to not be affected by the Force Field when closer to the center of the volume than the startRange property.
            */
            public get startRange(): number;
            public set startRange(value: number);
            /** Determines the size of the shape used for influencing particles.
            */
            public get endRange(): number;
            public set endRange(value: number);
            /** Describes the length of the Cylinder when using the Cylinder Force Field shape to influence particles.
            */
            public get length(): number;
            public set length(value: number);
            /** When using the gravity force, set this value between 0 and 1 to control the focal point of the gravity effect.
            */
            public get gravityFocus(): number;
            public set gravityFocus(value: number);
            /** Apply randomness to the Force Field axis that particles will travel around.
            */
            public get rotationRandomness(): UnityEngine.Vector2;
            public set rotationRandomness(value: UnityEngine.Vector2);
            /** When using Drag, the drag strength will be multiplied by the size of the particles if this toggle is enabled.
            */
            public get multiplyDragByParticleSize(): boolean;
            public set multiplyDragByParticleSize(value: boolean);
            /** When using Drag, the drag strength will be multiplied by the speed of the particles if this toggle is enabled.
            */
            public get multiplyDragByParticleVelocity(): boolean;
            public set multiplyDragByParticleVelocity(value: boolean);
            /** Apply forces to particles within the volume of the Force Field, by using a 3D texture containing vector field data.
            */
            public get vectorField(): UnityEngine.Texture3D;
            public set vectorField(value: UnityEngine.Texture3D);
            /** Apply a linear force along the local X axis to particles within the volume of the Force Field.
            */
            public get directionX(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionX(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply a linear force along the local Y axis to particles within the volume of the Force Field.
            */
            public get directionY(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionY(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply a linear force along the local Z axis to particles within the volume of the Force Field.
            */
            public get directionZ(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set directionZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply gravity to particles within the volume of the Force Field.
            */
            public get gravity(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set gravity(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** The speed at which particles are propelled around a vortex.
            */
            public get rotationSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set rotationSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Controls how strongly particles are dragged into the vortex motion.
            */
            public get rotationAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set rotationAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Apply drag to particles within the volume of the Force Field.
            */
            public get drag(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set drag(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** The speed at which particles are propelled through the vector field.
            */
            public get vectorFieldSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set vectorFieldSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
            /** Controls how strongly particles are dragged into the vector field motion.
            */
            public get vectorFieldAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
            public set vectorFieldAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
            public constructor()
        }
        /** The type of shape used for influencing particles in the Force Field Component.
        */
        enum ParticleSystemForceFieldShape { Sphere = 0, Hemisphere = 1, Cylinder = 2, Box = 3 }
        /** ControllerColliderHit is used by CharacterController.OnControllerColliderHit to give detailed information about the collision and how to deal with it.
        */
        class ControllerColliderHit extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The controller that hit the collider.
            */
            public get controller(): UnityEngine.CharacterController;
            /** The collider that was hit by the controller.
            */
            public get collider(): UnityEngine.Collider;
            /** The rigidbody that was hit by the controller.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The game object that was hit by the controller.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The transform that was hit by the controller.
            */
            public get transform(): UnityEngine.Transform;
            /** The impact point in world space.
            */
            public get point(): UnityEngine.Vector3;
            /** The normal of the surface we collided with in world space.
            */
            public get normal(): UnityEngine.Vector3;
            /** The direction the CharacterController was moving in when the collision occured.
            */
            public get moveDirection(): UnityEngine.Vector3;
            /** How far the character has travelled until it hit the collider.
            */
            public get moveLength(): number;
            public constructor()
        }
        /** A CharacterController allows you to easily do movement constrained by collisions without having to deal with a rigidbody.
        */
        class CharacterController extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The current relative velocity of the Character (see notes).
            */
            public get velocity(): UnityEngine.Vector3;
            /** Was the CharacterController touching the ground during the last move?
            */
            public get isGrounded(): boolean;
            /** What part of the capsule collided with the environment during the last CharacterController.Move call.
            */
            public get collisionFlags(): UnityEngine.CollisionFlags;
            /** The radius of the character's capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the character's capsule.
            */
            public get height(): number;
            public set height(value: number);
            /** The center of the character's capsule relative to the transform's position.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The character controllers slope limit in degrees.
            */
            public get slopeLimit(): number;
            public set slopeLimit(value: number);
            /** The character controllers step offset in meters.
            */
            public get stepOffset(): number;
            public set stepOffset(value: number);
            /** The character's collision skin width.
            */
            public get skinWidth(): number;
            public set skinWidth(value: number);
            /** Gets or sets the minimum move distance of the character controller.
            */
            public get minMoveDistance(): number;
            public set minMoveDistance(value: number);
            /** Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** Enables or disables overlap recovery.
            Enables or disables overlap recovery. Used to depenetrate character controllers from static objects when an overlap is detected.
            */
            public get enableOverlapRecovery(): boolean;
            public set enableOverlapRecovery(value: boolean);
            /** Moves the character with speed.
            */
            public SimpleMove($speed: UnityEngine.Vector3): boolean
            /** Supplies the movement of a GameObject with an attached CharacterController component.
            */
            public Move($motion: UnityEngine.Vector3): UnityEngine.CollisionFlags
            public constructor()
        }
        /** Control of an object's position through physics simulation.
        */
        class Rigidbody extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The velocity vector of the rigidbody. It represents the rate of change of Rigidbody position.
            */
            public get velocity(): UnityEngine.Vector3;
            public set velocity(value: UnityEngine.Vector3);
            /** The angular velocity vector of the rigidbody measured in radians per second.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            public set angularVelocity(value: UnityEngine.Vector3);
            /** The drag of the object.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag of the object.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The mass of the rigidbody.
            */
            public get mass(): number;
            public set mass(value: number);
            /** Controls whether gravity affects this rigidbody.
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Maximum velocity of a rigidbody when moving out of penetrating state.
            */
            public get maxDepenetrationVelocity(): number;
            public set maxDepenetrationVelocity(value: number);
            /** Controls whether physics affects the rigidbody.
            */
            public get isKinematic(): boolean;
            public set isKinematic(value: boolean);
            /** Controls whether physics will change the rotation of the object.
            */
            public get freezeRotation(): boolean;
            public set freezeRotation(value: boolean);
            /** Controls which degrees of freedom are allowed for the simulation of this Rigidbody.
            */
            public get constraints(): UnityEngine.RigidbodyConstraints;
            public set constraints(value: UnityEngine.RigidbodyConstraints);
            /** The Rigidbody's collision detection mode.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode);
            /** Whether or not to calculate the center of mass automatically.
            */
            public get automaticCenterOfMass(): boolean;
            public set automaticCenterOfMass(value: boolean);
            /** The center of mass relative to the transform's origin.
            */
            public get centerOfMass(): UnityEngine.Vector3;
            public set centerOfMass(value: UnityEngine.Vector3);
            /** The center of mass of the rigidbody in world space (Read Only).
            */
            public get worldCenterOfMass(): UnityEngine.Vector3;
            /** Whether or not to calculate the inertia tensor automatically.
            */
            public get automaticInertiaTensor(): boolean;
            public set automaticInertiaTensor(value: boolean);
            /** The rotation of the inertia tensor.
            */
            public get inertiaTensorRotation(): UnityEngine.Quaternion;
            public set inertiaTensorRotation(value: UnityEngine.Quaternion);
            /** The inertia tensor of this body, defined as a diagonal matrix in a reference frame positioned at this body's center of mass and rotated by Rigidbody.inertiaTensorRotation.
            */
            public get inertiaTensor(): UnityEngine.Vector3;
            public set inertiaTensor(value: UnityEngine.Vector3);
            /** Should collision detection be enabled? (By default always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** The position of the rigidbody.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** The rotation of the Rigidbody.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** Interpolation provides a way to manage the appearance of jitter in the movement of your Rigidbody GameObjects at run time.
            */
            public get interpolation(): UnityEngine.RigidbodyInterpolation;
            public set interpolation(value: UnityEngine.RigidbodyInterpolation);
            /** The solverIterations determines how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverIterations. Must be positive.
            */
            public get solverIterations(): number;
            public set solverIterations(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** The maximum angular velocity of the rigidbody measured in radians per second. (Default 7) range { 0, infinity }.
            */
            public get maxAngularVelocity(): number;
            public set maxAngularVelocity(value: number);
            /** The maximum linear velocity of the rigidbody measured in meters per second.
            */
            public get maxLinearVelocity(): number;
            public set maxLinearVelocity(value: number);
            /** The solverVelocityIterations affects how how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverVelocityIterations. Must be positive.
            */
            public get solverVelocityIterations(): number;
            public set solverVelocityIterations(value: number);
            /** The additional layers that all Colliders attached to this Rigidbody should exclude when deciding if the Collider can come into contact with another Collider.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional layers that all Colliders attached to this Rigidbody should include when deciding if the Collider can come into contact with another Collider.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** Sets the mass based on the attached colliders assuming a constant density.
            */
            public SetDensity($density: number): void
            /** Moves the kinematic Rigidbody towards position.
            * @param $position Provides the new position for the Rigidbody object.
            */
            public MovePosition($position: UnityEngine.Vector3): void
            /** Rotates the rigidbody to rotation.
            * @param $rot The new rotation for the Rigidbody.
            */
            public MoveRotation($rot: UnityEngine.Quaternion): void
            /** Moves the Rigidbody to position and rotates the Rigidbody to rotation.
            * @param $position The new position for the Rigidbody.
            * @param $rotation The new rotation for the Rigidbody.
            */
            public Move($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): void
            /** Forces a rigidbody to sleep at least one frame.
            */
            public Sleep(): void
            /** Is the rigidbody sleeping?
            */
            public IsSleeping(): boolean
            /** Forces a rigidbody to wake up.
            */
            public WakeUp(): void
            /** Reset the center of mass of the rigidbody.
            */
            public ResetCenterOfMass(): void
            /** Reset the inertia tensor value and rotation.
            */
            public ResetInertiaTensor(): void
            /** The velocity relative to the rigidbody at the point relativePoint.
            */
            public GetRelativePointVelocity($relativePoint: UnityEngine.Vector3): UnityEngine.Vector3
            /** The velocity of the rigidbody at the point worldPoint in global space.
            */
            public GetPointVelocity($worldPoint: UnityEngine.Vector3): UnityEngine.Vector3
            /** Returns the force that the Rigidbody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated force expressed in ForceMode.Force. 
            */
            public GetAccumulatedForce($step: number): UnityEngine.Vector3
            public GetAccumulatedForce(): UnityEngine.Vector3
            /** Returns the torque that the Rigidbody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated torque expressed in ForceMode.Force. 
            */
            public GetAccumulatedTorque($step: number): UnityEngine.Vector3
            public GetAccumulatedTorque(): UnityEngine.Vector3
            /** Adds a force to the Rigidbody.
            * @param $force Force vector in world coordinates.
            * @param $mode Type of force to apply.
            */
            public AddForce($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode): void
            /** Adds a force to the Rigidbody.
            * @param $force Force vector in world coordinates.
            * @param $mode Type of force to apply.
            */
            public AddForce($force: UnityEngine.Vector3): void
            /** Adds a force to the Rigidbody.
            * @param $x Size of force along the world x-axis.
            * @param $y Size of force along the world y-axis.
            * @param $z Size of force along the world z-axis.
            * @param $mode Type of force to apply.
            */
            public AddForce($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode): void
            /** Adds a force to the Rigidbody.
            * @param $x Size of force along the world x-axis.
            * @param $y Size of force along the world y-axis.
            * @param $z Size of force along the world z-axis.
            * @param $mode Type of force to apply.
            */
            public AddForce($x: number, $y: number, $z: number): void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $force Force vector in local coordinates.
            */
            public AddRelativeForce($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode): void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $force Force vector in local coordinates.
            */
            public AddRelativeForce($force: UnityEngine.Vector3): void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $x Size of force along the local x-axis.
            * @param $y Size of force along the local y-axis.
            * @param $z Size of force along the local z-axis.
            */
            public AddRelativeForce($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode): void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $x Size of force along the local x-axis.
            * @param $y Size of force along the local y-axis.
            * @param $z Size of force along the local z-axis.
            */
            public AddRelativeForce($x: number, $y: number, $z: number): void
            /** Adds a torque to the rigidbody.
            * @param $torque Torque vector in world coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddTorque($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode): void
            /** Adds a torque to the rigidbody.
            * @param $torque Torque vector in world coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddTorque($torque: UnityEngine.Vector3): void
            /** Adds a torque to the rigidbody.
            * @param $x Size of torque along the world x-axis.
            * @param $y Size of torque along the world y-axis.
            * @param $z Size of torque along the world z-axis.
            * @param $mode The type of torque to apply.
            */
            public AddTorque($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode): void
            /** Adds a torque to the rigidbody.
            * @param $x Size of torque along the world x-axis.
            * @param $y Size of torque along the world y-axis.
            * @param $z Size of torque along the world z-axis.
            * @param $mode The type of torque to apply.
            */
            public AddTorque($x: number, $y: number, $z: number): void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $torque Torque vector in local coordinates.
            */
            public AddRelativeTorque($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode): void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $torque Torque vector in local coordinates.
            */
            public AddRelativeTorque($torque: UnityEngine.Vector3): void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $x Size of torque along the local x-axis.
            * @param $y Size of torque along the local y-axis.
            * @param $z Size of torque along the local z-axis.
            */
            public AddRelativeTorque($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode): void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $x Size of torque along the local x-axis.
            * @param $y Size of torque along the local y-axis.
            * @param $z Size of torque along the local z-axis.
            */
            public AddRelativeTorque($x: number, $y: number, $z: number): void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param $force Force vector in world coordinates.
            * @param $position Position in world coordinates.
            */
            public AddForceAtPosition($force: UnityEngine.Vector3, $position: UnityEngine.Vector3, $mode: UnityEngine.ForceMode): void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param $force Force vector in world coordinates.
            * @param $position Position in world coordinates.
            */
            public AddForceAtPosition($force: UnityEngine.Vector3, $position: UnityEngine.Vector3): void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number, $mode: UnityEngine.ForceMode): void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number): void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number): void
            /** The closest point to the bounding box of the attached colliders.
            */
            public ClosestPointOnBounds($position: UnityEngine.Vector3): UnityEngine.Vector3
            /** Tests if a rigidbody would collide with anything, if it was moved through the Scene.
            * @param $direction The direction into which to sweep the rigidbody.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit (Additional resources: RaycastHit).
            * @param $maxDistance The length of the sweep.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the rigidbody sweep intersects any collider, otherwise false. 
            */
            public SweepTest($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public SweepTest($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public SweepTest($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Like Rigidbody.SweepTest, but returns all hits.
            * @param $direction The direction into which to sweep the rigidbody.
            * @param $maxDistance The length of the sweep.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public SweepTestAll($direction: UnityEngine.Vector3, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll($direction: UnityEngine.Vector3, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll($direction: UnityEngine.Vector3): System.Array$1<UnityEngine.RaycastHit>
            public constructor()
        }
        /** Describes a collision.
        */
        class Collision extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The total impulse applied to this contact pair to resolve the collision.
            */
            public get impulse(): UnityEngine.Vector3;
            /** The relative linear velocity of the two colliding objects (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector3;
            /** The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The ArticulationBody of the collider that your GameObject collides with (Read Only).
            */
            public get articulationBody(): UnityEngine.ArticulationBody;
            /** The Rigidbody or ArticulationBody of the collider that your Component collides with (Read Only).
            */
            public get body(): UnityEngine.Component;
            /** The Collider we hit (Read Only).
            */
            public get collider(): UnityEngine.Collider;
            /** The Transform of the object we hit (Read Only).
            */
            public get transform(): UnityEngine.Transform;
            /** The GameObject whose collider you are colliding with. (Read Only).
            */
            public get gameObject(): UnityEngine.GameObject;
            /** Gets the number of contacts for this collision.
            */
            public get contactCount(): number;
            /** The contact points generated by the physics engine. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
            */
            public get contacts(): System.Array$1<UnityEngine.ContactPoint>;
            /** Gets the contact point at the specified index.
            * @param $index The index of the contact to retrieve.
            * @returns The contact at the specified index. 
            */
            public GetContact($index: number): UnityEngine.ContactPoint
            /** Retrieves all contact points for this collision.
            * @param $contacts An array of ContactPoint used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contacts: System.Array$1<UnityEngine.ContactPoint>): number
            public GetContacts($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint>): number
            public constructor()
        }
        /** A body that forms part of a Physics articulation.
        */
        class ArticulationBody extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
        }
        /** Describes a contact point where the collision occurs.
        */
        class ContactPoint extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Global physics properties and helper methods.
        */
        class Physics extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Layer mask constant to select ignore raycast layer.
            */
            public static IgnoreRaycastLayer: number
            /** Layer mask constant to select default raycast layers.
            */
            public static DefaultRaycastLayers: number
            /** Layer mask constant to select all layers.
            */
            public static AllLayers: number
            /** The gravity applied to all rigid bodies in the Scene.
            */
            public static get gravity(): UnityEngine.Vector3;
            public static set gravity(value: UnityEngine.Vector3);
            /** The default contact offset of the newly created colliders.
            */
            public static get defaultContactOffset(): number;
            public static set defaultContactOffset(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public static get sleepThreshold(): number;
            public static set sleepThreshold(value: number);
            /** Specifies whether queries (raycasts, spherecasts, overlap tests, etc.) hit Triggers by default.
            */
            public static get queriesHitTriggers(): boolean;
            public static set queriesHitTriggers(value: boolean);
            /** Whether physics queries should hit back-face triangles.
            */
            public static get queriesHitBackfaces(): boolean;
            public static set queriesHitBackfaces(value: boolean);
            /** Two colliding objects with a relative velocity below this will not bounce (default 2). Must be positive.
            */
            public static get bounceThreshold(): number;
            public static set bounceThreshold(value: number);
            /** The maximum default velocity needed to move a Rigidbody's collider out of another collider's surface penetration. Must be positive.
            */
            public static get defaultMaxDepenetrationVelocity(): number;
            public static set defaultMaxDepenetrationVelocity(value: number);
            /** The defaultSolverIterations determines how accurately Rigidbody joints and collision contacts are resolved. (default 6). Must be positive.
            */
            public static get defaultSolverIterations(): number;
            public static set defaultSolverIterations(value: number);
            /** The defaultSolverVelocityIterations affects how accurately the Rigidbody joints and collision contacts are resolved. (default 1). Must be positive.
            */
            public static get defaultSolverVelocityIterations(): number;
            public static set defaultSolverVelocityIterations(value: number);
            /** Controls when Unity executes the physics simulation.
            */
            public static get simulationMode(): UnityEngine.SimulationMode;
            public static set simulationMode(value: UnityEngine.SimulationMode);
            /** Default maximum angular speed of the dynamic Rigidbody, in radians (default 50).
            */
            public static get defaultMaxAngularSpeed(): number;
            public static set defaultMaxAngularSpeed(value: number);
            /** Enables an improved patch friction mode that guarantees static and dynamic friction do not exceed analytical results.
            */
            public static get improvedPatchFriction(): boolean;
            public static set improvedPatchFriction(value: boolean);
            /** Whether or not MonoBehaviour collision messages will be sent by the physics system.
            */
            public static get invokeCollisionCallbacks(): boolean;
            public static set invokeCollisionCallbacks(value: boolean);
            /** The PhysicsScene automatically created when Unity starts.
            */
            public static get defaultPhysicsScene(): UnityEngine.PhysicsScene;
            /** Whether or not to automatically sync transform changes with the physics system whenever a Transform component changes.
            */
            public static get autoSyncTransforms(): boolean;
            public static set autoSyncTransforms(value: boolean);
            /** Determines whether the garbage collector should reuse only a single instance of a Collision type for all collision callbacks.
            */
            public static get reuseCollisionCallbacks(): boolean;
            public static set reuseCollisionCallbacks(value: boolean);
            /** Sets the minimum separation distance for cloth inter-collision.
            */
            public static get interCollisionDistance(): number;
            public static set interCollisionDistance(value: number);
            /** Sets the cloth inter-collision stiffness.
            */
            public static get interCollisionStiffness(): number;
            public static set interCollisionStiffness(value: number);
            public static get interCollisionSettingsToggle(): boolean;
            public static set interCollisionSettingsToggle(value: boolean);
            /** Cloth Gravity setting.
            Set gravity for all cloth components.
            */
            public static get clothGravity(): UnityEngine.Vector3;
            public static set clothGravity(value: UnityEngine.Vector3);
            public static add_ContactModifyEvent($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>): void
            public static remove_ContactModifyEvent($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>): void
            public static add_ContactModifyEventCCD($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>): void
            public static remove_ContactModifyEventCCD($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>): void
            /** Makes the collision detection system ignore all collisions between collider1 and collider2.
            * @param $collider1 Any collider.
            * @param $collider2 Another collider you want to have collider1 to start or stop ignoring collisions with.
            * @param $ignore Whether or not the collisions between the two colliders should be ignored or not.
            */
            public static IgnoreCollision($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider, $ignore: boolean): void
            public static IgnoreCollision($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider): void
            /** Makes the collision detection system ignore all collisions between any collider in layer1 and any collider in layer2.
            Note that IgnoreLayerCollision will reset the trigger state of affected colliders, so you might receive OnTriggerExit and OnTriggerEnter messages in response to calling this.
            */
            public static IgnoreLayerCollision($layer1: number, $layer2: number, $ignore: boolean): void
            public static IgnoreLayerCollision($layer1: number, $layer2: number): void
            /** Are collisions between layer1 and layer2 being ignored?
            */
            public static GetIgnoreLayerCollision($layer1: number, $layer2: number): boolean
            /** Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.
            * @param $collider1 The first collider to compare to collider2.
            * @param $collider2 The second collider to compare to collider1.
            * @returns Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not. 
            */
            public static GetIgnoreCollision($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider): boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true if the ray intersects with a Collider, otherwise false. 
            */
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3): boolean
            /** Casts a ray against all colliders in the Scene and returns detailed information on what was hit.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the closest collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public static Raycast($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param $ray The starting point and direction of the ray.
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Raycast($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number): boolean
            public static Raycast($ray: UnityEngine.Ray, $maxDistance: number): boolean
            public static Raycast($ray: UnityEngine.Ray): boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param $ray The starting point and direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the closest collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Raycast($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): boolean
            public static Raycast($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public static Raycast($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param $start Start point.
            * @param $end End point.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number): boolean
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3): boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param $start Start point.
            * @param $end End point.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            */
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number): boolean
            public static Linecast($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the capsule sweep intersects any collider, otherwise false. 
            */
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3): boolean
            /** * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public static CapsuleCast($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction into which to sweep the sphere.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static SphereCast($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): boolean
            public static SphereCast($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public static SphereCast($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $maxDistance: number): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number): boolean
            /** * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number): boolean
            public static SphereCast($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3): boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion): boolean
            public static BoxCast($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>): boolean
            /** Additional resources: Raycast.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layermask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static RaycastAll($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3): System.Array$1<UnityEngine.RaycastHit>
            /** Casts a ray through the Scene and returns all hits. Note that order of the results is undefined.
            * @param $ray The starting point and direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of RaycastHit objects. Note that the order of the results is undefined. 
            */
            public static RaycastAll($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($ray: UnityEngine.Ray, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll($ray: UnityEngine.Ray): System.Array$1<UnityEngine.RaycastHit>
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param $ray The starting point and direction of the ray.
            * @param $results The buffer to store the hits into.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static RaycastNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): number
            public static RaycastNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number): number
            public static RaycastNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param $origin The starting point and direction of the ray.
            * @param $results The buffer to store the hits into.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static CapsuleCastAll($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3): System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction in which to sweep the sphere.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static SphereCastAll($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3): System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCastAll($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($ray: UnityEngine.Ray, $radius: number, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll($ray: UnityEngine.Ray, $radius: number): System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders.
            * @param $point0 The center of the sphere at the start of the capsule.
            * @param $point1 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders touching or inside the capsule. 
            */
            public static OverlapCapsule($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number): System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number): System.Array$1<UnityEngine.Collider>
            /** Computes and stores colliders touching or inside the sphere.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $layerMask A defines which layers of colliders to include in the query.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns an array with all colliders touching or inside the sphere. 
            */
            public static OverlapSphere($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.Collider>
            public static OverlapSphere($position: UnityEngine.Vector3, $radius: number, $layerMask: number): System.Array$1<UnityEngine.Collider>
            public static OverlapSphere($position: UnityEngine.Vector3, $radius: number): System.Array$1<UnityEngine.Collider>
            /** Simulate physics in the Scene.
            * @param $step The time to advance physics by.
            */
            public static Simulate($step: number): void
            /** Apply Transform changes to the physics engine.
            */
            public static SyncTransforms(): void
            /** Compute the minimal translation required to separate the given colliders apart at specified poses.
            * @param $colliderA The first collider.
            * @param $positionA Position of the first collider.
            * @param $rotationA Rotation of the first collider.
            * @param $colliderB The second collider.
            * @param $positionB Position of the second collider.
            * @param $rotationB Rotation of the second collider.
            * @param $direction Direction along which the translation required to separate the colliders apart is minimal.
            * @param $distance The distance along direction that is required to separate the colliders apart.
            * @returns True, if the colliders overlap at the given poses. 
            */
            public static ComputePenetration($colliderA: UnityEngine.Collider, $positionA: UnityEngine.Vector3, $rotationA: UnityEngine.Quaternion, $colliderB: UnityEngine.Collider, $positionB: UnityEngine.Vector3, $rotationB: UnityEngine.Quaternion, $direction: $Ref<UnityEngine.Vector3>, $distance: $Ref<number>): boolean
            /** Returns a point on the given collider that is closest to the specified location.
            * @param $point Location you want to find the closest point to.
            * @param $collider The collider that you find the closest point on.
            * @param $position The position of the collider.
            * @param $rotation The rotation of the collider.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public static ClosestPoint($point: UnityEngine.Vector3, $collider: UnityEngine.Collider, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion): UnityEngine.Vector3
            /** Computes and stores colliders touching or inside the sphere into the provided buffer.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $results The buffer to store the results into.
            * @param $layerMask A defines which layers of colliders to include in the query.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns the amount of colliders stored into the results buffer. 
            */
            public static OverlapSphereNonAlloc($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static OverlapSphereNonAlloc($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number): number
            public static OverlapSphereNonAlloc($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>): number
            /** Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckSphere($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static CheckSphere($position: UnityEngine.Vector3, $radius: number, $layerMask: number): boolean
            public static CheckSphere($position: UnityEngine.Vector3, $radius: number): boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit into the buffer.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $results The buffer to store the hits into.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the buffer. 
            */
            public static CapsuleCastNonAlloc($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static CapsuleCastNonAlloc($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): number
            public static CapsuleCastNonAlloc($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number): number
            public static CapsuleCastNonAlloc($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Cast sphere along the direction and store the results into buffer.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction in which to sweep the sphere.
            * @param $results The buffer to save the hits into.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static SphereCastNonAlloc($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): number
            public static SphereCastNonAlloc($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number): number
            public static SphereCastNonAlloc($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Cast sphere along the direction and store the results into buffer.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $results The buffer to save the results to.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static SphereCastNonAlloc($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number): number
            public static SphereCastNonAlloc($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number): number
            public static SphereCastNonAlloc($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Checks if any colliders overlap a capsule-shaped volume in world space.
            * @param $start The center of the sphere at the start of the capsule.
            * @param $end The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckCapsule($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static CheckCapsule($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number): boolean
            public static CheckCapsule($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number): boolean
            /** Check whether the given box overlaps with other colliders or not.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $orientation Rotation of the box.
            * @param $layermask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if the box overlaps with any colliders. 
            */
            public static CheckBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layermask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean
            public static CheckBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number): boolean
            public static CheckBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion): boolean
            public static CheckBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3): boolean
            /** Find all colliders touching or inside of the given box.
            * @param $center Center of the box.
            * @param $halfExtents Half of the size of the box in each dimension.
            * @param $orientation Rotation of the box.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders that overlap with the given box. 
            */
            public static OverlapBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.Collider>
            public static OverlapBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number): System.Array$1<UnityEngine.Collider>
            public static OverlapBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion): System.Array$1<UnityEngine.Collider>
            public static OverlapBox($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3): System.Array$1<UnityEngine.Collider>
            /** Find all colliders touching or inside of the given box, and store them into the buffer.
            * @param $center Center of the box.
            * @param $halfExtents Half of the size of the box in each dimension.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored in results. 
            */
            public static OverlapBoxNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static OverlapBoxNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number): number
            public static OverlapBoxNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion): number
            public static OverlapBoxNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>): number
            /** Cast the box along the direction, and store hits in the provided buffer.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public static BoxCastNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static BoxCastNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion): number
            public static BoxCastNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number): number
            public static BoxCastNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number): number
            public static BoxCastNonAlloc($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>): number
            /** Like Physics.BoxCast, but returns all hits.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns All colliders that were hit. 
            */
            public static BoxCastAll($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number): System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion): System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3): System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
            * @param $point0 The center of the sphere at the start of the capsule.
            * @param $point1 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $results The buffer to store the results into.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of entries written to the buffer. 
            */
            public static OverlapCapsuleNonAlloc($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number
            public static OverlapCapsuleNonAlloc($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number): number
            public static OverlapCapsuleNonAlloc($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>): number
            /** Rebuild the broadphase interest regions as well as set the world boundaries.
            * @param $worldBounds Boundaries of the physics world.
            * @param $subdivisions How many cells to create along x and z axis.
            */
            public static RebuildBroadphaseRegions($worldBounds: UnityEngine.Bounds, $subdivisions: number): void
            /** Prepares the mesh for use with a MeshCollider.
            * @param $meshID The instance ID of the mesh to bake collision data from.
            * @param $convex A flag to indicate whether to bake convex geometry or not.
            * @param $cookingOptions The cooking options to use when you bake the mesh.
            */
            public static BakeMesh($meshID: number, $convex: boolean, $cookingOptions: UnityEngine.MeshColliderCookingOptions): void
            /** Prepares the mesh for use with a MeshCollider and uses default cooking options.
            * @param $meshID The instance ID of the mesh to bake collision data from.
            * @param $convex A flag to indicate whether to bake convex geometry or not.
            */
            public static BakeMesh($meshID: number, $convex: boolean): void
            public static add_ContactEvent($value: UnityEngine.Physics.ContactEventDelegate): void
            public static remove_ContactEvent($value: UnityEngine.Physics.ContactEventDelegate): void
            public constructor()
        }
        /** Represents a single instance of a 3D physics Scene.
        */
        class PhysicsScene extends System.ValueType implements System.IEquatable$1<UnityEngine.PhysicsScene> {
            protected [__keep_incompatibility]: never;
        }
        /** A light-weight proxy that allows to access the contact buffers directly.
        */
        class ModifiableContactPair extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A selection of modes that control when Unity executes the physics simulation.
        */
        enum SimulationMode { FixedUpdate = 0, Update = 1, Script = 2 }
        /** Overrides the global Physics.queriesHitTriggers.
        */
        enum QueryTriggerInteraction { UseGlobal = 0, Ignore = 1, Collide = 2 }
        /** Structure used to get information back from a raycast.
        */
        class RaycastHit extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Cooking options that are available with MeshCollider.
        */
        enum MeshColliderCookingOptions { None = 0, InflateConvexMesh = 1, CookForFasterSimulation = 2, EnableMeshCleaning = 4, WeldColocatedVertices = 8, UseFastMidphase = 16 }
        /** A header struct which contains colliding bodies.
        */
        class ContactPairHeader extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Physics material describes how to handle colliding objects (friction, bounciness).
        */
        class PhysicMaterial extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** The friction used when already moving.  This value is usually between 0 and 1.
            */
            public get dynamicFriction(): number;
            public set dynamicFriction(value: number);
            /** The friction coefficient used when an object is lying on a surface.
            */
            public get staticFriction(): number;
            public set staticFriction(value: number);
            /** Determines how the friction is combined.
            */
            public get frictionCombine(): UnityEngine.PhysicMaterialCombine;
            public set frictionCombine(value: UnityEngine.PhysicMaterialCombine);
            /** Determines how the bounciness is combined.
            */
            public get bounceCombine(): UnityEngine.PhysicMaterialCombine;
            public set bounceCombine(value: UnityEngine.PhysicMaterialCombine);
            public constructor()
            public constructor($name: string)
        }
        /** Describes how physics materials of the colliding objects are combined.
        The friction force as well as the residual bounce impulse are applied symmertrically to both of the colliders in contact, so each pair of overlapping colliders must have a single set of friction and bouciness settings. However, one can set arbitrary physics materials to any colliders. For that particular reason, there is a mechanism that allows the combination of two different sets of properties that correspond to each of the colliders in contact into one set to be used in the solver.
        Specifying Average, Maximum, Minimum or Multiply as the physics material combine mode, you directly set the function that is used to combine the settings corresponding to the two overlapping colliders into one set of settings that can be used to apply the material effect.
        Note that there is a special case when the two overlapping colliders have physics materials with different combine modes set. In this particular case, the function that has the highest priority is used. The priority order is as follows: Average < Minimum < Multiply < Maximum. For example, if one material has Average set but the other one has Maximum, then the combine function to be used is Maximum, since it has higher priority.
        */
        enum PhysicMaterialCombine { Average = 0, Minimum = 2, Multiply = 1, Maximum = 3 }
        /** Use these flags to constrain motion of Rigidbodies.
        */
        enum RigidbodyConstraints { None = 0, FreezePositionX = 2, FreezePositionY = 4, FreezePositionZ = 8, FreezeRotationX = 16, FreezeRotationY = 32, FreezeRotationZ = 64, FreezePosition = 14, FreezeRotation = 112, FreezeAll = 126 }
        /** The collision detection mode constants used for Rigidbody.collisionDetectionMode.
        */
        enum CollisionDetectionMode { Discrete = 0, Continuous = 1, ContinuousDynamic = 2, ContinuousSpeculative = 3 }
        /** Rigidbody interpolation mode.
        */
        enum RigidbodyInterpolation { None = 0, Interpolate = 1, Extrapolate = 2 }
        /** Specifies Layers to use in a Physics.Raycast.
        */
        class LayerMask extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Use ForceMode to specify how to apply a force using Rigidbody.AddForce or ArticulationBody.AddForce.
        */
        enum ForceMode { Force = 0, Acceleration = 5, Impulse = 1, VelocityChange = 2 }
        /** CollisionFlags is a bitmask returned by CharacterController.Move.
        */
        enum CollisionFlags { None = 0, Sides = 1, Above = 2, Below = 4, CollidedSides = 1, CollidedAbove = 2, CollidedBelow = 4 }
        /** A mesh collider allows you to do between meshes and primitives.
        */
        class MeshCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The mesh object used for collision detection.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Use a convex collider from the mesh.
            */
            public get convex(): boolean;
            public set convex(value: boolean);
            /** Options used to enable or disable certain features in mesh cooking.
            */
            public get cookingOptions(): UnityEngine.MeshColliderCookingOptions;
            public set cookingOptions(value: UnityEngine.MeshColliderCookingOptions);
            public constructor()
        }
        /** A box-shaped primitive collider.
        */
        class BoxCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The center of the box, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The size of the box, measured in the object's local space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor()
        }
        /** A sphere-shaped primitive collider.
        */
        class SphereCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The center of the sphere in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor()
        }
        /** A force applied constantly.
        */
        class ConstantForce extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The force applied to the rigidbody every frame.
            */
            public get force(): UnityEngine.Vector3;
            public set force(value: UnityEngine.Vector3);
            /** The force - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeForce(): UnityEngine.Vector3;
            public set relativeForce(value: UnityEngine.Vector3);
            /** The torque applied to the rigidbody every frame.
            */
            public get torque(): UnityEngine.Vector3;
            public set torque(value: UnityEngine.Vector3);
            /** The torque - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeTorque(): UnityEngine.Vector3;
            public set relativeTorque(value: UnityEngine.Vector3);
            public constructor()
        }
        /** Joint is the base class for all joints.
        */
        class Joint extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** A reference to another rigidbody this joint connects to.
            */
            public get connectedBody(): UnityEngine.Rigidbody;
            public set connectedBody(value: UnityEngine.Rigidbody);
            /** A reference to an articulation body this joint connects to.
            */
            public get connectedArticulationBody(): UnityEngine.ArticulationBody;
            public set connectedArticulationBody(value: UnityEngine.ArticulationBody);
            /** The Direction of the axis around which the body is constrained.
            */
            public get axis(): UnityEngine.Vector3;
            public set axis(value: UnityEngine.Vector3);
            /** The Position of the anchor around which the joints motion is constrained.
            */
            public get anchor(): UnityEngine.Vector3;
            public set anchor(value: UnityEngine.Vector3);
            /** Position of the anchor relative to the connected Rigidbody.
            */
            public get connectedAnchor(): UnityEngine.Vector3;
            public set connectedAnchor(value: UnityEngine.Vector3);
            /** Should the connectedAnchor be calculated automatically?
            */
            public get autoConfigureConnectedAnchor(): boolean;
            public set autoConfigureConnectedAnchor(value: boolean);
            /** The force that needs to be applied for this joint to break.
            */
            public get breakForce(): number;
            public set breakForce(value: number);
            /** The torque that needs to be applied for this joint to break. To be able to break, a joint must be _Locked_ or _Limited_ on the axis of rotation where the torque is being applied. This means that some joints cannot break, such as an unconstrained Configurable Joint.
            */
            public get breakTorque(): number;
            public set breakTorque(value: number);
            /** Enable collision between bodies connected with the joint.
            */
            public get enableCollision(): boolean;
            public set enableCollision(value: boolean);
            /** Toggle preprocessing for this joint.
            */
            public get enablePreprocessing(): boolean;
            public set enablePreprocessing(value: boolean);
            /** The scale to apply to the inverse mass and inertia tensor of the body prior to solving the constraints.
            */
            public get massScale(): number;
            public set massScale(value: number);
            /** The scale to apply to the inverse mass and inertia tensor of the connected body prior to solving the constraints.
            */
            public get connectedMassScale(): number;
            public set connectedMassScale(value: number);
            /** The force applied by the solver to satisfy all constraints.
            */
            public get currentForce(): UnityEngine.Vector3;
            /** The torque applied by the solver to satisfy all constraints.
            */
            public get currentTorque(): UnityEngine.Vector3;
            public constructor()
        }
        /** The HingeJoint groups together 2 rigid bodies, constraining them to move like connected by a hinge.
        */
        class HingeJoint extends UnityEngine.Joint {
            protected [__keep_incompatibility]: never;
            /** The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.
            */
            public get motor(): UnityEngine.JointMotor;
            public set motor(value: UnityEngine.JointMotor);
            /** Limit of angular rotation (in degrees) on the hinge joint.
            */
            public get limits(): UnityEngine.JointLimits;
            public set limits(value: UnityEngine.JointLimits);
            /** The spring attempts to reach a target angle by adding spring and damping forces.
            */
            public get spring(): UnityEngine.JointSpring;
            public set spring(value: UnityEngine.JointSpring);
            /** Enables the joint's motor. Disabled by default.
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Enables the joint's limits. Disabled by default.
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** If enabled, the angle of the hinge is extended to [-360, 360] degrees.
            */
            public get extendedLimits(): boolean;
            public set extendedLimits(value: boolean);
            /** Enables the joint's spring. Disabled by default.
            */
            public get useSpring(): boolean;
            public set useSpring(value: boolean);
            /** The angular velocity of the joint in degrees per second. (Read Only)
            */
            public get velocity(): number;
            /** The current angle in degrees of the joint relative to its rest position. (Read Only)
            */
            public get angle(): number;
            /** Defines whether the HingeJoint.spring outputs accelerations instead of forces.
            */
            public get useAcceleration(): boolean;
            public set useAcceleration(value: boolean);
            public constructor()
        }
        /** The JointMotor is used to motorize a joint.
        */
        class JointMotor extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** JointLimits is used by the HingeJoint to limit the joints angle.
        */
        class JointLimits extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** JointSpring is used add a spring force to HingeJoint and PhysicMaterial.
        */
        class JointSpring extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The spring joint ties together 2 rigid bodies, spring forces will be automatically applied to keep the object at the given distance.
        */
        class SpringJoint extends UnityEngine.Joint {
            protected [__keep_incompatibility]: never;
            /** The spring force used to keep the two objects together.
            */
            public get spring(): number;
            public set spring(value: number);
            /** The damper force used to dampen the spring force.
            */
            public get damper(): number;
            public set damper(value: number);
            /** The minimum distance between the bodies relative to their initial distance.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** The maximum distance between the bodies relative to their initial distance.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** The maximum allowed error between the current spring length and the length defined by minDistance and maxDistance.
            */
            public get tolerance(): number;
            public set tolerance(value: number);
            public constructor()
        }
        /** The Fixed joint groups together 2 rigidbodies, making them stick together in their bound position.
        */
        class FixedJoint extends UnityEngine.Joint {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Character Joints are mainly used for Ragdoll effects.
        */
        class CharacterJoint extends UnityEngine.Joint {
            protected [__keep_incompatibility]: never;
            /** The secondary axis around which the joint can rotate.
            */
            public get swingAxis(): UnityEngine.Vector3;
            public set swingAxis(value: UnityEngine.Vector3);
            /** The configuration of the spring attached to the twist limits of the joint.
            */
            public get twistLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set twistLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the swing limits of the joint.
            */
            public get swingLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set swingLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The lower limit around the primary axis of the character joint.
            */
            public get lowTwistLimit(): UnityEngine.SoftJointLimit;
            public set lowTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The upper limit around the primary axis of the character joint.
            */
            public get highTwistLimit(): UnityEngine.SoftJointLimit;
            public set highTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing1Limit(): UnityEngine.SoftJointLimit;
            public set swing1Limit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing2Limit(): UnityEngine.SoftJointLimit;
            public set swing2Limit(value: UnityEngine.SoftJointLimit);
            /** Brings violated constraints back into alignment even when the solver fails.
            */
            public get enableProjection(): boolean;
            public set enableProjection(value: boolean);
            /** Set the linear tolerance threshold for projection.
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            public constructor()
        }
        /** The configuration of the spring attached to the joint's limits: linear and angular. Used by CharacterJoint and ConfigurableJoint.
        */
        class SoftJointLimitSpring extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The limits defined by the CharacterJoint.
        */
        class SoftJointLimit extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The configurable joint is an extremely flexible joint giving you complete control over rotation and linear motion.
        */
        class ConfigurableJoint extends UnityEngine.Joint {
            protected [__keep_incompatibility]: never;
            /** The joint's secondary axis.
            */
            public get secondaryAxis(): UnityEngine.Vector3;
            public set secondaryAxis(value: UnityEngine.Vector3);
            /** Allow movement along the X axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get xMotion(): UnityEngine.ConfigurableJointMotion;
            public set xMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Y axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get yMotion(): UnityEngine.ConfigurableJointMotion;
            public set yMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Z axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get zMotion(): UnityEngine.ConfigurableJointMotion;
            public set zMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the X axis to be Free, completely Locked, or Limited according to Low and High Angular XLimit.
            */
            public get angularXMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularXMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Y axis to be Free, completely Locked, or Limited according to Angular YLimit.
            */
            public get angularYMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularYMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Z axis to be Free, completely Locked, or Limited according to Angular ZLimit.
            */
            public get angularZMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularZMotion(value: UnityEngine.ConfigurableJointMotion);
            /** The configuration of the spring attached to the linear limit of the joint.
            */
            public get linearLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set linearLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular X limit of the joint.
            */
            public get angularXLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularXLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular Y and angular Z limits of the joint.
            */
            public get angularYZLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularYZLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** Boundary defining movement restriction, based on distance from the joint's origin.
            */
            public get linearLimit(): UnityEngine.SoftJointLimit;
            public set linearLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining lower rotation restriction, based on delta from original rotation.
            */
            public get lowAngularXLimit(): UnityEngine.SoftJointLimit;
            public set lowAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining upper rotation restriction, based on delta from original rotation.
            */
            public get highAngularXLimit(): UnityEngine.SoftJointLimit;
            public set highAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularYLimit(): UnityEngine.SoftJointLimit;
            public set angularYLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularZLimit(): UnityEngine.SoftJointLimit;
            public set angularZLimit(value: UnityEngine.SoftJointLimit);
            /** The desired position that the joint should move into.
            */
            public get targetPosition(): UnityEngine.Vector3;
            public set targetPosition(value: UnityEngine.Vector3);
            /** The desired velocity that the joint should move along.
            */
            public get targetVelocity(): UnityEngine.Vector3;
            public set targetVelocity(value: UnityEngine.Vector3);
            /** Definition of how the joint's movement will behave along its local X axis.
            */
            public get xDrive(): UnityEngine.JointDrive;
            public set xDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Y axis.
            */
            public get yDrive(): UnityEngine.JointDrive;
            public set yDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Z axis.
            */
            public get zDrive(): UnityEngine.JointDrive;
            public set zDrive(value: UnityEngine.JointDrive);
            /** This is a Quaternion. It defines the desired rotation that the joint should rotate into.
            */
            public get targetRotation(): UnityEngine.Quaternion;
            public set targetRotation(value: UnityEngine.Quaternion);
            /** This is a Vector3. It defines the desired angular velocity that the joint should rotate into.
            */
            public get targetAngularVelocity(): UnityEngine.Vector3;
            public set targetAngularVelocity(value: UnityEngine.Vector3);
            /** Control the object's rotation with either X & YZ or Slerp Drive by itself.
            */
            public get rotationDriveMode(): UnityEngine.RotationDriveMode;
            public set rotationDriveMode(value: UnityEngine.RotationDriveMode);
            /** Definition of how the joint's rotation will behave around its local X axis. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularXDrive(): UnityEngine.JointDrive;
            public set angularXDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around its local Y and Z axes. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularYZDrive(): UnityEngine.JointDrive;
            public set angularYZDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around all local axes. Only used if Rotation Drive Mode is Slerp Only.
            */
            public get slerpDrive(): UnityEngine.JointDrive;
            public set slerpDrive(value: UnityEngine.JointDrive);
            /** Brings violated constraints back into alignment even when the solver fails. Projection is not a physical process and does not preserve momentum or respect collision geometry. It is best avoided if practical, but can be useful in improving simulation quality where joint separation results in unacceptable artifacts.
            */
            public get projectionMode(): UnityEngine.JointProjectionMode;
            public set projectionMode(value: UnityEngine.JointProjectionMode);
            /** Set the linear tolerance threshold for projection.
            If the joint separates by more than this distance along its locked degrees of freedom, the solver
            will move the bodies to close the distance.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            If the joint deviates by more than this angle around its locked angular degrees of freedom,
            the solver will move the bodies to close the angle.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            /** If enabled, all Target values will be calculated in world space instead of the object's local space.
            */
            public get configuredInWorldSpace(): boolean;
            public set configuredInWorldSpace(value: boolean);
            /** Enable this property to swap the order in which the physics engine processes the Rigidbodies involved in the joint. This results in different joint motion but has no impact on Rigidbodies and anchors.
            */
            public get swapBodies(): boolean;
            public set swapBodies(value: boolean);
            public constructor()
        }
        /** Constrains movement for a ConfigurableJoint along the 6 axes.
        */
        enum ConfigurableJointMotion { Locked = 0, Limited = 1, Free = 2 }
        /** How the joint's movement will behave along its local X axis.
        */
        class JointDrive extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Control ConfigurableJoint's rotation with either X & YZ or Slerp Drive.
        */
        enum RotationDriveMode { XYAndZ = 0, Slerp = 1 }
        /** Determines how to snap physics joints back to its constrained position when it drifts off too much.
        */
        enum JointProjectionMode { None = 0, PositionAndRotation = 1, PositionOnly = 2 }
        /** Scene extensions to access the underlying physics scene.
        */
        class PhysicsSceneExtensions extends System.Object {
            protected [__keep_incompatibility]: never;
            /** An extension method that returns the 3D physics Scene from the Scene.
            * @param $scene The Scene from which to return the 3D physics Scene.
            * @returns The 3D physics Scene used by the Scene. 
            */
            public static GetPhysicsScene($scene: UnityEngine.SceneManagement.Scene): UnityEngine.PhysicsScene
        }
        /** Scene extensions to access the underlying physics scene.
        */
        class PhysicsSceneExtensions2D extends System.Object {
            protected [__keep_incompatibility]: never;
            /** An extension method that returns the 2D physics Scene from the Scene.
            * @param $scene The Scene from which to return the 2D physics Scene.
            * @returns The 2D physics Scene used by the Scene. 
            */
            public static GetPhysicsScene2D($scene: UnityEngine.SceneManagement.Scene): UnityEngine.PhysicsScene2D
        }
        /** Represents a single instance of a 2D physics Scene.
        */
        class PhysicsScene2D extends System.ValueType implements System.IEquatable$1<UnityEngine.PhysicsScene2D> {
            protected [__keep_incompatibility]: never;
        }
        /** Global settings and helpers for 2D physics.
        */
        class Physics2D extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Layer mask constant for the default layer that ignores raycasts.
            */
            public static IgnoreRaycastLayer: number
            /** Layer mask constant that includes all layers participating in raycasts by default.
            */
            public static DefaultRaycastLayers: number
            /** Layer mask constant that includes all layers.
            */
            public static AllLayers: number
            /** The maximum number of vertices allowed per primitive polygon shape type (PhysicsShapeType2D.Polygon). (Read Only)
            */
            public static MaxPolygonShapeVertices: number
            /** The PhysicsScene2D automatically created when Unity starts.
            */
            public static get defaultPhysicsScene(): UnityEngine.PhysicsScene2D;
            /** The number of iterations of the physics solver when considering objects' velocities.
            */
            public static get velocityIterations(): number;
            public static set velocityIterations(value: number);
            /** The number of iterations of the physics solver when considering objects' positions.
            */
            public static get positionIterations(): number;
            public static set positionIterations(value: number);
            /** Acceleration due to gravity.
            */
            public static get gravity(): UnityEngine.Vector2;
            public static set gravity(value: UnityEngine.Vector2);
            /** Do raycasts detect Colliders configured as triggers?
            */
            public static get queriesHitTriggers(): boolean;
            public static set queriesHitTriggers(value: boolean);
            /** Set the raycasts or linecasts that start inside Colliders to detect or not detect those Colliders.
            */
            public static get queriesStartInColliders(): boolean;
            public static set queriesStartInColliders(value: boolean);
            /** Use this to control whether or not the appropriate OnCollisionExit2D or OnTriggerExit2D callbacks should be called when a Collider2D is disabled.
            */
            public static get callbacksOnDisable(): boolean;
            public static set callbacksOnDisable(value: boolean);
            /** Determines whether the garbage collector should reuse only a single instance of a Collision2D type for all collision callbacks.
            */
            public static get reuseCollisionCallbacks(): boolean;
            public static set reuseCollisionCallbacks(value: boolean);
            /** Set whether to automatically sync changes to the Transform component with the physics engine.
            */
            public static get autoSyncTransforms(): boolean;
            public static set autoSyncTransforms(value: boolean);
            /** Controls when Unity executes the 2D physics simulation.
            */
            public static get simulationMode(): UnityEngine.SimulationMode2D;
            public static set simulationMode(value: UnityEngine.SimulationMode2D);
            /** A set of options that control how physics operates when using the job system to multithread the physics simulation.
            */
            public static get jobOptions(): UnityEngine.PhysicsJobOptions2D;
            public static set jobOptions(value: UnityEngine.PhysicsJobOptions2D);
            /** Any collisions with a relative linear velocity below this threshold will be treated as inelastic.
            */
            public static get velocityThreshold(): number;
            public static set velocityThreshold(value: number);
            /** The maximum linear position correction used when solving constraints.  This helps to prevent overshoot.
            */
            public static get maxLinearCorrection(): number;
            public static set maxLinearCorrection(value: number);
            /** The maximum angular position correction used when solving constraints.  This helps to prevent overshoot.
            */
            public static get maxAngularCorrection(): number;
            public static set maxAngularCorrection(value: number);
            /** The maximum linear speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
            */
            public static get maxTranslationSpeed(): number;
            public static set maxTranslationSpeed(value: number);
            /** The maximum angular speed of a rigid-body per physics update.  Increasing this can cause numerical problems.
            */
            public static get maxRotationSpeed(): number;
            public static set maxRotationSpeed(value: number);
            /** The default contact offset of the newly created Colliders.
            */
            public static get defaultContactOffset(): number;
            public static set defaultContactOffset(value: number);
            /** The scale factor that controls how fast overlaps are resolved.
            */
            public static get baumgarteScale(): number;
            public static set baumgarteScale(value: number);
            /** The scale factor that controls how fast TOI overlaps are resolved.
            */
            public static get baumgarteTOIScale(): number;
            public static set baumgarteTOIScale(value: number);
            /** The time in seconds that a rigid-body must be still before it will go to sleep.
            */
            public static get timeToSleep(): number;
            public static set timeToSleep(value: number);
            /** A rigid-body cannot sleep if its linear velocity is above this tolerance.
            */
            public static get linearSleepTolerance(): number;
            public static set linearSleepTolerance(value: number);
            /** A Rigidbody cannot sleep if its angular velocity is above this tolerance threshold.
            */
            public static get angularSleepTolerance(): number;
            public static set angularSleepTolerance(value: number);
            /** Simulate physics in the Scene.
            * @param $step The time to advance physics by.
            * @returns Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail. 
            */
            public static Simulate($step: number): boolean
            /** Synchronizes.
            */
            public static SyncTransforms(): void
            public static IgnoreCollision($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D): void
            /** Makes the collision detection system ignore all collisionstriggers between collider1 and collider2/.
            * @param $collider1 The first Collider to compare to collider2.
            * @param $collider2 The second Collider to compare to collider1.
            * @param $ignore Whether collisionstriggers between collider1 and collider2/ should be ignored or not.
            */
            public static IgnoreCollision($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $ignore: boolean): void
            /** Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.
            * @param $collider1 The first Collider to compare to collider2.
            * @param $collider2 The second Collider to compare to collider1.
            * @returns Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not. 
            */
            public static GetIgnoreCollision($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D): boolean
            public static IgnoreLayerCollision($layer1: number, $layer2: number): void
            /** Choose whether to detect or ignore collisions between a specified pair of layers.
            * @param $layer1 ID of the first layer.
            * @param $layer2 ID of the second layer.
            * @param $ignore Should collisions between these layers be ignored?
            */
            public static IgnoreLayerCollision($layer1: number, $layer2: number, $ignore: boolean): void
            /** Checks whether collisions between the specified layers be ignored or not.
            * @param $layer1 ID of first layer.
            * @param $layer2 ID of second layer.
            * @returns Whether collisions between the specified layers be ignored or not. 
            */
            public static GetIgnoreLayerCollision($layer1: number, $layer2: number): boolean
            /** Set the collision layer mask that indicates which layer(s) the specified layer can collide with.
            * @param $layer The layer to set the collision layer mask for.
            * @param $layerMask A mask where each bit indicates a layer and whether it can collide with layer or not.
            */
            public static SetLayerCollisionMask($layer: number, $layerMask: number): void
            /** Get the collision layer mask that indicates which layer(s) the specified layer can collide with.
            * @param $layer The layer to retrieve the collision layer mask for.
            * @returns A mask where each bit indicates a layer and whether it can collide with layer or not. 
            */
            public static GetLayerCollisionMask($layer: number): number
            /** Checks whether the passed Colliders are in contact or not.
            * @param $collider1 The Collider to check if it is touching collider2.
            * @param $collider2 The Collider to check if it is touching collider1.
            * @returns Whether collider1 is touching collider2 or not. 
            */
            public static IsTouching($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D): boolean
            /** Checks whether the passed Colliders are in contact or not.
            * @param $collider1 The Collider to check if it is touching collider2.
            * @param $collider2 The Collider to check if it is touching collider1.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether collider1 is touching collider2 or not. 
            */
            public static IsTouching($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D): boolean
            /** Checks whether the passed Colliders are in contact or not.
            * @param $Collider The Collider to check if it is touching any other Collider filtered by the contactFilter.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether the Collider is touching any other Collider filtered by the contactFilter or not. 
            */
            public static IsTouching($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D): boolean
            public static IsTouchingLayers($collider: UnityEngine.Collider2D): boolean
            /** Checks whether the Collider is touching any Colliders on the specified layerMask or not.
            * @param $Collider The Collider to check if it is touching Colliders on the layerMask.
            * @param $layerMask Any Colliders on any of these layers count as touching.
            * @returns Whether the Collider is touching any Colliders on the specified layerMask or not. 
            */
            public static IsTouchingLayers($collider: UnityEngine.Collider2D, $layerMask: number): boolean
            /** Calculates the minimum distance between two Colliders.
            * @param $colliderA A Collider used to calculate the minimum distance against colliderB.
            * @param $colliderB A Collider used to calculate the minimum distance against colliderA.
            * @returns The minimum distance between colliderA and colliderB. 
            */
            public static Distance($colliderA: UnityEngine.Collider2D, $colliderB: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D
            /** Returns a point on the perimeter of the Collider that is closest to the specified position.
            * @param $position The position from which to find the closest point on the specified Collider.
            * @param $Collider The Collider on which to find the closest specified position.
            * @returns A point on the perimeter of the Collider that is closest to the specified position. 
            */
            public static ClosestPoint($position: UnityEngine.Vector2, $collider: UnityEngine.Collider2D): UnityEngine.Vector2
            /** Returns a point on the perimeter of all enabled Colliders attached to the rigidbody that is closest to the specified position.
            * @param $position The position from which to find the closest point on the specified rigidbody.
            * @param $rigidbody The Rigidbody on which to find the closest specified position.
            * @returns A point on the perimeter of a Collider attached to the rigidbody that is closest to the specified position. 
            */
            public static ClosestPoint($position: UnityEngine.Vector2, $rigidbody: UnityEngine.Rigidbody2D): UnityEngine.Vector2
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2): UnityEngine.RaycastHit2D
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number): UnityEngine.RaycastHit2D
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number): UnityEngine.RaycastHit2D
            /** Casts a line segment against Colliders in the Scene.
            * @param $start The start point of the line in world space.
            * @param $end The end point of the line in world space.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.RaycastHit2D
            /** Casts a line segment against Colliders in the Scene with results filtered by ContactFilter2D.
            * @param $start The start point of the line in world space.
            * @param $end The end point of the line in world space.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static Linecast($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>): number
            public static LinecastAll($start: UnityEngine.Vector2, $end: UnityEngine.Vector2): System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastAll($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastAll($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a line against Colliders in the Scene.
            * @param $start The start point of the line in world space.
            * @param $end The end point of the line in world space.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static LinecastAll($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static LinecastNonAlloc($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static LinecastNonAlloc($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number): number
            public static LinecastNonAlloc($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number, $minDepth: number): number
            /** Casts a line against Colliders in the Scene. Note: This method will be deprecated in a future build and it is recommended to use Linecast instead.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param $start The start point of the line in world space.
            * @param $end The end point of the line in world space.
            * @param $results Returned array of objects that intersect the line.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static LinecastNonAlloc($start: UnityEngine.Vector2, $end: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number): UnityEngine.RaycastHit2D
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): UnityEngine.RaycastHit2D
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): UnityEngine.RaycastHit2D
            /** Casts a ray against Colliders in the Scene.
            * @param $origin The point in 2D space where the ray originates.
            * @param $direction A vector representing the direction of the ray.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.RaycastHit2D
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** Casts a ray against Colliders in the Scene.
            * @param $origin The point in 2D space where the ray originates.
            * @param $direction A vector representing the direction of the ray.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param $distance The maximum distance over which to cast the ray.
            * @returns Returns the number of results placed in the results array. 
            */
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static Raycast($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public static RaycastNonAlloc($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number): number
            /** Casts a ray into the Scene. Note: This method will be deprecated in a future build and it is recommended to use Raycast instead.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param $origin The point in 2D space where the ray originates.
            * @param $direction A vector representing the direction of the ray.
            * @param $results Array to receive results.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to check objects only on specific layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static RaycastNonAlloc($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static RaycastAll($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2): System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static RaycastAll($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a ray against Colliders in the Scene, returning all Colliders that contact with it.
            * @param $origin The point in 2D space where the ray originates.
            * @param $direction A vector representing the direction of the ray.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static RaycastAll($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number): UnityEngine.RaycastHit2D
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): UnityEngine.RaycastHit2D
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): UnityEngine.RaycastHit2D
            /** Casts a circle against Colliders in the Scene, returning the first Collider to contact with it.
            * @param $origin The point in 2D space where the circle originates.
            * @param $radius The radius of the circle.
            * @param $direction A vector representing the direction of the circle.
            * @param $distance The maximum distance over which to cast the circle.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.RaycastHit2D
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** Casts a circle against Colliders in the Scene, returning all Colliders that contact with it.
            * @param $origin The point in 2D space where the circle originates.
            * @param $radius The radius of the circle.
            * @param $direction A vector representing the direction of the circle.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param $distance The maximum distance over which to cast the circle.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static CircleCast($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            public static CircleCastAll($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2): System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastAll($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a circle against Colliders in the Scene, returning all Colliders that contact with it.
            * @param $origin The point in 2D space where the circle originates.
            * @param $radius The radius of the circle.
            * @param $direction A vector representing the direction of the circle.
            * @param $distance The maximum distance over which to cast the circle.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static CircleCastAll($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CircleCastNonAlloc($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static CircleCastNonAlloc($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static CircleCastNonAlloc($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public static CircleCastNonAlloc($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number): number
            /** Casts a circle into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use CircleCast instead.
            * @param $origin The point in 2D space where the circle originates.
            * @param $radius The radius of the circle.
            * @param $direction A vector representing the direction of the circle.
            * @param $results Array to receive results.
            * @param $distance The maximum distance over which to cast the circle.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CircleCastNonAlloc($origin: UnityEngine.Vector2, $radius: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number): UnityEngine.RaycastHit2D
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): UnityEngine.RaycastHit2D
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): UnityEngine.RaycastHit2D
            /** Casts a box against Colliders in the Scene, returning the first Collider to contact with it.
            * @param $origin The point in 2D space where the box originates.
            * @param $size The size of the box.
            * @param $angle The angle of the box (in degrees).
            * @param $direction A vector representing the direction of the box.
            * @param $distance The maximum distance over which to cast the box.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.RaycastHit2D
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** Casts a box against the Colliders in the Scene and returns all Colliders that are in contact with it.
            * @param $origin The point in 2D space where the box originates.
            * @param $size The size of the box.
            * @param $angle The angle of the box (in degrees).
            * @param $direction A vector representing the direction of the box.
            * @param $distance The maximum distance over which to cast the box.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Returns the number of results placed in the results array. 
            */
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static BoxCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            public static BoxCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2): System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a box against Colliders in the Scene, returning all Colliders that contact with it.
            * @param $origin The point in 2D space where the box originates.
            * @param $size The size of the box.
            * @param $angle The angle of the box (in degrees).
            * @param $direction A vector representing the direction of the box.
            * @param $distance The maximum distance over which to cast the box.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static BoxCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static BoxCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static BoxCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static BoxCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public static BoxCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number): number
            /** Casts a box into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use BoxCast instead.
            * @param $origin The point in 2D space where the box originates.
            * @param $size The size of the box.
            * @param $angle The angle of the box (in degrees).
            * @param $direction A vector representing the direction of the box.
            * @param $results Array to receive results.
            * @param $distance The maximum distance over which to cast the box.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static BoxCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number): UnityEngine.RaycastHit2D
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): UnityEngine.RaycastHit2D
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): UnityEngine.RaycastHit2D
            /** Casts a capsule against Colliders in the Scene, returning the first Collider to contact with it.
            * @param $origin The point in 2D space where the capsule originates.
            * @param $size The size of the capsule.
            * @param $capsuleDirection The direction of the capsule.
            * @param $angle The angle of the capsule (in degrees).
            * @param $direction Vector representing the direction to cast the capsule.
            * @param $distance The maximum distance over which to cast the capsule.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.RaycastHit2D
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** Casts a capsule against the Colliders in the Scene and returns all Colliders that are in contact with it.
            * @param $origin The point in 2D space where the capsule originates.
            * @param $size The size of the capsule.
            * @param $capsuleDirection The direction of the capsule.
            * @param $angle The angle of the capsule (in degrees).
            * @param $direction Vector representing the direction to cast the capsule.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @param $distance The maximum distance over which to cast the capsule.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static CapsuleCast($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            public static CapsuleCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2): System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Casts a capsule against Colliders in the Scene, returning all Colliders that contact with it.
            * @param $origin The point in 2D space where the capsule originates.
            * @param $size The size of the capsule.
            * @param $capsuleDirection The direction of the capsule.
            * @param $angle The angle of the capsule (in degrees).
            * @param $direction Vector representing the direction to cast the capsule.
            * @param $distance The maximum distance over which to cast the capsule.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static CapsuleCastAll($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static CapsuleCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static CapsuleCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public static CapsuleCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public static CapsuleCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number): number
            /** Casts a capsule into the Scene, returning Colliders that contact with it into the provided results array. Note: This method will be deprecated in a future build and it is recommended to use CapsuleCast instead.
            * @param $origin The point in 2D space where the capsule originates.
            * @param $size The size of the capsule.
            * @param $capsuleDirection The direction of the capsule.
            * @param $angle The angle of the capsule (in degrees).
            * @param $direction Vector representing the direction to cast the capsule.
            * @param $results Array to receive results.
            * @param $distance The maximum distance over which to cast the capsule.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static CapsuleCastNonAlloc($origin: UnityEngine.Vector2, $size: UnityEngine.Vector2, $capsuleDirection: UnityEngine.CapsuleDirection2D, $angle: number, $direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static GetRayIntersection($ray: UnityEngine.Ray): UnityEngine.RaycastHit2D
            public static GetRayIntersection($ray: UnityEngine.Ray, $distance: number): UnityEngine.RaycastHit2D
            /** Cast a 3D ray against the Colliders in the Scene returning the first Collider along the ray.
            * @param $ray The 3D ray defining origin and direction to test.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @returns The cast results returned. 
            */
            public static GetRayIntersection($ray: UnityEngine.Ray, $distance: number, $layerMask: number): UnityEngine.RaycastHit2D
            public static GetRayIntersectionAll($ray: UnityEngine.Ray): System.Array$1<UnityEngine.RaycastHit2D>
            public static GetRayIntersectionAll($ray: UnityEngine.Ray, $distance: number): System.Array$1<UnityEngine.RaycastHit2D>
            /** Cast a 3D ray against the Colliders in the Scene returning all the Colliders along the ray.
            * @param $ray The 3D ray defining origin and direction to test.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @returns The cast results returned. 
            */
            public static GetRayIntersectionAll($ray: UnityEngine.Ray, $distance: number, $layerMask: number): System.Array$1<UnityEngine.RaycastHit2D>
            public static GetRayIntersectionNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public static GetRayIntersectionNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            /** Cast a 3D ray against the Colliders in the Scene returning the Colliders along the ray. Note: This method will be deprecated in a future build and it is recommended to use GetRayIntersection instead.
            * @param $ray The 3D ray defining origin and direction to test.
            * @param $distance The maximum distance over which to cast the ray.
            * @param $layerMask Filter to detect Colliders only on certain layers.
            * @param $results Array to receive results.
            * @returns The number of results returned. 
            */
            public static GetRayIntersectionNonAlloc($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public static OverlapPoint($point: UnityEngine.Vector2): UnityEngine.Collider2D
            public static OverlapPoint($point: UnityEngine.Vector2, $layerMask: number): UnityEngine.Collider2D
            public static OverlapPoint($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider overlaps a point in space.
            * @param $point A point in world space.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The Collider overlapping the point. 
            */
            public static OverlapPoint($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider overlaps a point in world space.
            * @param $point A point in world space.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapPoint($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapPoint($point: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static OverlapPointAll($point: UnityEngine.Vector2): System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointAll($point: UnityEngine.Vector2, $layerMask: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointAll($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all Colliders that overlap a point in space.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param $point A point in space.
            * @param $layerMask Filter to check objects only on specific layers.
            * @returns The cast results returned. 
            */
            public static OverlapPointAll($point: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapPointNonAlloc($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapPointNonAlloc($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number): number
            public static OverlapPointNonAlloc($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number): number
            /** Get a list of all Colliders that overlap a point in space. Note: This method will be deprecated in a future build and it is recommended to use OverlapPoint instead.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @param $point A point in space.
            * @param $results Array to receive results.
            * @param $layerMask Filter to check objects only on specific layers.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapPointNonAlloc($point: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number): UnityEngine.Collider2D
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number, $layerMask: number): UnityEngine.Collider2D
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a circular area.
            * @param $point Centre of the circle.
            * @param $radius The radius of the circle.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The Collider overlapping the circle. 
            */
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider is within a circular area.
            * @param $point Centre of the circle.
            * @param $radius The radius of the circle.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapCircle($point: UnityEngine.Vector2, $radius: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static OverlapCircleAll($point: UnityEngine.Vector2, $radius: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleAll($point: UnityEngine.Vector2, $radius: number, $layerMask: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleAll($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all Colliders that fall within a circular area.
            * @param $point The center of the circle.
            * @param $radius The radius of the circle.
            * @param $layerMask Filter to check objects only on specified layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results. 
            */
            public static OverlapCircleAll($point: UnityEngine.Vector2, $radius: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCircleNonAlloc($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapCircleNonAlloc($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number): number
            public static OverlapCircleNonAlloc($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number): number
            /** Get a list of all Colliders that fall within a circular area. Note: This method will be deprecated in a future build and it is recommended to use OverlapCircle instead.
            * @param $point The center of the circle.
            * @param $radius The radius of the circle.
            * @param $results Array to receive results.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCircleNonAlloc($point: UnityEngine.Vector2, $radius: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number): UnityEngine.Collider2D
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number): UnityEngine.Collider2D
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a box area.
            * @param $point The center of the box.
            * @param $size The size of the box.
            * @param $angle The angle of the box.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The Collider overlapping the box. 
            */
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a box area.
            * @param $point The center of the box.
            * @param $size The size of the box.
            * @param $angle The angle of the box.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapBox($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static OverlapBoxAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all Colliders that fall within a box area.
            * @param $point The center of the box.
            * @param $size The size of the box.
            * @param $angle The angle of the box.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static OverlapBoxAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapBoxNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapBoxNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number): number
            public static OverlapBoxNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number): number
            /** Get a list of all Colliders that fall within a box area. Note: This method will be deprecated in a future build and it is recommended to use OverlapBox instead.
            * @param $point The center of the box.
            * @param $size The size of the box.
            * @param $angle The angle of the box.
            * @param $results Array to receive results.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapBoxNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2): UnityEngine.Collider2D
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number): UnityEngine.Collider2D
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a rectangular area.
            * @param $pointA One corner of the rectangle.
            * @param $pointB Diagonally opposite the point A corner of the rectangle.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The Collider overlapping the area. 
            */
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a rectangular area.
            * @param $pointA One corner of the rectangle.
            * @param $pointB Diagonally opposite the point A corner of the rectangle.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapArea($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static OverlapAreaAll($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2): System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaAll($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaAll($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all Colliders that fall within a rectangular area.
            * @param $pointA One corner of the rectangle.
            * @param $pointB Diagonally opposite the point A corner of the rectangle.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns The cast results returned. 
            */
            public static OverlapAreaAll($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapAreaNonAlloc($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapAreaNonAlloc($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number): number
            public static OverlapAreaNonAlloc($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number): number
            /** Get a list of all Colliders that fall within a specified area. Note: This method will be deprecated in a future build and it is recommended to use OverlapArea instead.
            * @param $pointA One corner of the rectangle.
            * @param $pointB Diagonally opposite the point A corner of the rectangle.
            * @param $results Array to receive results.
            * @param $layerMask Filter to check objects only on specified layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than or equal to this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than or equal to this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapAreaNonAlloc($pointA: UnityEngine.Vector2, $pointB: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number): UnityEngine.Collider2D
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number): UnityEngine.Collider2D
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a capsule area.
            * @param $point The center of the capsule.
            * @param $size The size of the capsule.
            * @param $direction The direction of the capsule.
            * @param $angle The angle of the capsule.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The Collider overlapping the capsule. 
            */
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number): UnityEngine.Collider2D
            /** Checks if a Collider falls within a capsule area.
            * @param $point The center of the capsule.
            * @param $size The size of the capsule.
            * @param $direction The direction of the capsule.
            * @param $angle The angle of the capsule.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapCapsule($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static OverlapCapsuleAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number): System.Array$1<UnityEngine.Collider2D>
            /** Get a list of all Colliders that fall within a capsule area.
            * @param $point The center of the capsule.
            * @param $size The size of the capsule.
            * @param $direction The direction of the capsule.
            * @param $angle The angle of the capsule.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns The cast results returned. 
            */
            public static OverlapCapsuleAll($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $layerMask: number, $minDepth: number, $maxDepth: number): System.Array$1<UnityEngine.Collider2D>
            public static OverlapCapsuleNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapCapsuleNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number): number
            public static OverlapCapsuleNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number): number
            /** Get a list of all Colliders that fall within a capsule area. Note: This method will be deprecated in a future build and it is recommended to use OverlapCapsule instead.
            * @param $point The center of the capsule.
            * @param $size The size of the capsule.
            * @param $direction The direction of the capsule.
            * @param $angle The angle of the capsule.
            * @param $results Array to receive results.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCapsuleNonAlloc($point: UnityEngine.Vector2, $size: UnityEngine.Vector2, $direction: UnityEngine.CapsuleDirection2D, $angle: number, $results: System.Array$1<UnityEngine.Collider2D>, $layerMask: number, $minDepth: number, $maxDepth: number): number
            /** Gets a list of all Colliders that overlap the given Collider.
            * @param $Collider The Collider that defines the area used to query for other Collider overlaps.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public static OverlapCollider($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public static OverlapCollider($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Retrieves all contact points in for contacts between with the collider1 and collider2, with the results filtered by the ContactFilter2D.
            * @param $collider1 The Collider to check if it has contacts against collider2.
            * @param $collider2 The Collider to check if it has contacts against collider1.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all contact points in contact with the Collider.
            * @param $Collider The Collider to retrieve contacts for.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts($collider: UnityEngine.Collider2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all contact points in contact with the Collider, with the results filtered by the ContactFilter2D.
            * @param $Collider The Collider to retrieve contacts for.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all Colliders in contact with the Collider.
            * @param $Collider The Collider to retrieve contacts for.
            * @param $Colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of Colliders placed in the Colliders array. 
            */
            public static GetContacts($collider: UnityEngine.Collider2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            /** Retrieves all Colliders in contact with the Collider, with the results filtered by the ContactFilter2D.
            * @param $Collider The Collider to retrieve contacts for.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $Colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of Colliders placed in the Colliders array. 
            */
            public static GetContacts($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            /** Retrieves all contact points in contact with any of the Collider(s) attached to this rigidbody.
            * @param $rigidbody The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all contact points in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param $rigidbody The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody.
            * @param $rigidbody The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.
            * @param $Colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of Colliders placed in the Colliders array. 
            */
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param $rigidbody The rigidbody to retrieve contacts for.  All Colliders attached to this rigidbody will be checked.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $Colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of Colliders placed in the Colliders array. 
            */
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            public static GetContacts($collider1: UnityEngine.Collider2D, $collider2: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public static GetContacts($collider: UnityEngine.Collider2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public static GetContacts($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public static GetContacts($collider: UnityEngine.Collider2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static GetContacts($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public static GetContacts($rigidbody: UnityEngine.Rigidbody2D, $contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public constructor()
        }
        /** A selection of modes that control when Unity executes the 2D physics simulation.
        */
        enum SimulationMode2D { FixedUpdate = 0, Update = 1, Script = 2 }
        /** A set of options that control how physics operates when using the job system to multithread the physics simulation.
        */
        class PhysicsJobOptions2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Parent class for collider types used with 2D gameplay.
        */
        class Collider2D extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The density of the collider used to calculate its mass (when auto mass is enabled).
            */
            public get density(): number;
            public set density(value: number);
            /** Is this collider configured as a trigger?
            */
            public get isTrigger(): boolean;
            public set isTrigger(value: boolean);
            /** Whether the collider is used by an attached effector or not.
            */
            public get usedByEffector(): boolean;
            public set usedByEffector(value: boolean);
            /** Sets whether the Collider will be used or not used by a CompositeCollider2D.
            */
            public get usedByComposite(): boolean;
            public set usedByComposite(value: boolean);
            /** Get the CompositeCollider2D that is available to be attached to the collider.
            */
            public get composite(): UnityEngine.CompositeCollider2D;
            /** The local offset of the collider geometry.
            */
            public get offset(): UnityEngine.Vector2;
            public set offset(value: UnityEngine.Vector2);
            /** The Rigidbody2D attached to the Collider2D.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody2D;
            /** The number of active PhysicsShape2D the Collider2D is currently using.
            */
            public get shapeCount(): number;
            /** The world space bounding area of the collider.
            */
            public get bounds(): UnityEngine.Bounds;
            /** The error state that indicates the state of the physics shapes the 2D Collider tried to create. (Read Only)
            */
            public get errorState(): UnityEngine.ColliderErrorState2D;
            /** The PhysicsMaterial2D that is applied to this collider.
            */
            public get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
            public set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
            /** A decision priority assigned to this Collider2D used when there is a conflicting decision on whether a contact between itself and another Collision2D should happen or not.
            */
            public get layerOverridePriority(): number;
            public set layerOverridePriority(value: number);
            /** The additional Layers that this Collider2D should exclude when deciding if a contact with another Collider2D should happen or not.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional Layers that this Collider2D should include when deciding if a contact with another Collider2D should happen or not.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** The Layers that this Collider2D is allowed to send forces to during a Collision contact with another Collider2D.
            */
            public get forceSendLayers(): UnityEngine.LayerMask;
            public set forceSendLayers(value: UnityEngine.LayerMask);
            /** The Layers that this Collider2D can receive forces from during a Collision contact with another Collider2D.
            */
            public get forceReceiveLayers(): UnityEngine.LayerMask;
            public set forceReceiveLayers(value: UnityEngine.LayerMask);
            /** The layers of other Collider2D involved in contacts with this Collider2D that will be captured.
            */
            public get contactCaptureLayers(): UnityEngine.LayerMask;
            public set contactCaptureLayers(value: UnityEngine.LayerMask);
            /** The Layers that this Collider2D will report collision or trigger callbacks for during a contact with another Collider2D.
            */
            public get callbackLayers(): UnityEngine.LayerMask;
            public set callbackLayers(value: UnityEngine.LayerMask);
            /** Get the friction used by the collider.
            */
            public get friction(): number;
            /** Get the bounciness used by the collider.
            */
            public get bounciness(): number;
            /** Creates a planar Mesh that is identical to the area defined by the Collider2D geometry.
            * @param $useBodyPosition Should the mesh be transformed by the position of the attached Rigidbody2D?
            * @param $useBodyRotation Should the mesh be transformed by the rotation of the attached Rigidbody2D?
            * @returns The planar Mesh created that matches the collider geometry or NULL if no Mesh could be created. 
            */
            public CreateMesh($useBodyPosition: boolean, $useBodyRotation: boolean): UnityEngine.Mesh
            /** Generates a simple hash value based upon the geometry of the Collider2D.
            * @returns A hash value that uniquely identifies the configured geometry of the Collider2D. 
            */
            public GetShapeHash(): number
            /** Gets all the PhysicsShape2D used by the Collider2D.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
            * @returns Returns the number of PhysicsShape2D retrieved from the Collider2D. 
            */
            public GetShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D): number
            /** Gets the specified range of the PhysicsShape2D used by the Collider2D.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
            * @param $shapeIndex The index of the first shape to retrieve. This should be in the range of 0 to Collider2D.shapeCount-1.
            * @param $shapeCount The number of shapes to retrieve. The shapeIndex + shapeCount must be less than or equal to Collider2D.shapeCount.
            * @returns Returns the number of PhysicsShape2D retrieved from the Collider2D. In all cases this should be the same number as shapeCount . 
            */
            public GetShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D, $shapeIndex: number, $shapeCount?: number): number
            /** Check whether this collider is touching the collider or not.
            * @param $collider The collider to check if it is touching this collider.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching($collider: UnityEngine.Collider2D): boolean
            /** Check whether this collider is touching the collider or not with the results filtered by the contactFilter.
            * @param $collider The collider to check if it is touching this collider.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D): boolean
            /** Check whether this collider is touching other colliders or not with the results filtered by the contactFilter.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether this collider is touching the collider or not. 
            */
            public IsTouching($contactFilter: UnityEngine.ContactFilter2D): boolean
            public IsTouchingLayers(): boolean
            /** Checks whether this collider is touching any colliders on the specified layerMask or not.
            * @param $layerMask Any colliders on any of these layers count as touching.
            * @returns Whether this collider is touching any collider on the specified layerMask or not. 
            */
            public IsTouchingLayers($layerMask: number): boolean
            /** Check if a collider overlaps a point in space.
            * @param $point A point in world space.
            * @returns Does point overlap the collider? 
            */
            public OverlapPoint($point: UnityEngine.Vector2): boolean
            /** Calculates the minimum separation of this collider against another collider.
            * @param $collider A collider used to calculate the minimum separation against this collider.
            * @returns The minimum separation of collider and this collider. 
            */
            public Distance($collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D
            /** Get a list of all colliders that overlap this collider.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCollider($contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public OverlapCollider($contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Retrieves all contact points for this Collider.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            public GetContacts($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all contact points for this Collider, with the results filtered by the contactFilter.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all colliders in contact with this Collider.
            * @param $colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of contacts placed in the colliders array. 
            */
            public GetContacts($colliders: System.Array$1<UnityEngine.Collider2D>): number
            public GetContacts($colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Retrieves all colliders in contact with this Collider, with the results filtered by the contactFilter.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public Cast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public Cast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            /** Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
            * @param $direction Vector representing the direction to cast the shape.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the shape.
            * @param $ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
            * @returns The number of results returned. 
            */
            public Cast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $ignoreSiblingColliders: boolean): number
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            /** Casts the Collider shape into the Scene starting at the Collider position ignoring the Collider itself.
            * @param $direction Vector representing the direction to cast the shape.
            * @param $contactFilter Filter results defined by the contact filter.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the shape.
            * @param $ignoreSiblingColliders Determines whether the cast should ignore Colliders attached to the same Rigidbody2D (known as sibling Colliders).
            * @returns The number of results returned. 
            */
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $ignoreSiblingColliders: boolean): number
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number, $ignoreSiblingColliders?: boolean): number
            public Raycast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            public Raycast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public Raycast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number): number
            public Raycast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number): number
            /** Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
            * @param $direction Vector representing the direction of the ray.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the ray.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @param $contactFilter Filter results defined by the contact filter.
            * @returns The number of results returned. 
            */
            public Raycast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number, $layerMask: number, $minDepth: number, $maxDepth: number): number
            public Raycast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** Casts a ray into the Scene that starts at the Collider position and ignores the Collider itself.
            * @param $direction Vector representing the direction of the ray.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the ray.
            * @param $layerMask Filter to check objects only on specific layers.
            * @param $minDepth Only include objects with a Z coordinate (depth) greater than this value.
            * @param $maxDepth Only include objects with a Z coordinate (depth) less than this value.
            * @param $contactFilter Filter results defined by the contact filter.
            * @returns The number of results returned. 
            */
            public Raycast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public Raycast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            /** Returns a point on the perimeter of this Collider that is closest to the specified position.
            * @param $position The position from which to find the closest point on this Collider.
            * @returns A point on the perimeter of this Collider that is closest to the specified position. 
            */
            public ClosestPoint($position: UnityEngine.Vector2): UnityEngine.Vector2
            public constructor()
        }
        /** A set of parameters for filtering contact results. Define the angle by referring to their position in world space, where 0 degrees is parallel to the positive x-axis, 90 degrees is parallel to the positive y-axis, 180 degrees is parallel to the negative x-axis, and 270 degrees is parallel to the negative y-axis.
        */
        class ContactFilter2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Represents the separation or overlap of two Collider2D.
        */
        class ColliderDistance2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Rigidbody physics component for 2D sprites.
        */
        class Rigidbody2D extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The position of the rigidbody.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The rotation of the rigidbody.
            */
            public get rotation(): number;
            public set rotation(value: number);
            /** Linear velocity of the Rigidbody in units per second.
            */
            public get velocity(): UnityEngine.Vector2;
            public set velocity(value: UnityEngine.Vector2);
            /** Angular velocity in degrees per second.
            */
            public get angularVelocity(): number;
            public set angularVelocity(value: number);
            /** Should the total rigid-body mass be automatically calculated from the Collider2D.density of attached colliders?
            */
            public get useAutoMass(): boolean;
            public set useAutoMass(value: boolean);
            /** Mass of the Rigidbody.
            */
            public get mass(): number;
            public set mass(value: number);
            /** The PhysicsMaterial2D that is applied to all Collider2D attached to this Rigidbody2D.
            */
            public get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
            public set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
            /** The center of mass of the rigidBody in local space.
            */
            public get centerOfMass(): UnityEngine.Vector2;
            public set centerOfMass(value: UnityEngine.Vector2);
            /** Gets the center of mass of the rigidBody in global space.
            */
            public get worldCenterOfMass(): UnityEngine.Vector2;
            /** The Rigidbody's resistance to changes in angular velocity (rotation).
            */
            public get inertia(): number;
            public set inertia(value: number);
            /** Coefficient of drag.
            */
            public get drag(): number;
            public set drag(value: number);
            /** Coefficient of angular drag.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The degree to which this object is affected by gravity.
            */
            public get gravityScale(): number;
            public set gravityScale(value: number);
            /** The physical behaviour type of the Rigidbody2D.
            */
            public get bodyType(): UnityEngine.RigidbodyType2D;
            public set bodyType(value: UnityEngine.RigidbodyType2D);
            /** Should kinematickinematic and kinematicstatic collisions be allowed?
            */
            public get useFullKinematicContacts(): boolean;
            public set useFullKinematicContacts(value: boolean);
            /** Should this rigidbody be taken out of physics control?
            */
            public get isKinematic(): boolean;
            public set isKinematic(value: boolean);
            /** Controls whether physics will change the rotation of the object.
            */
            public get freezeRotation(): boolean;
            public set freezeRotation(value: boolean);
            /** Controls which degrees of freedom are allowed for the simulation of this Rigidbody2D.
            */
            public get constraints(): UnityEngine.RigidbodyConstraints2D;
            public set constraints(value: UnityEngine.RigidbodyConstraints2D);
            /** Indicates whether the rigid body should be simulated or not by the physics system.
            */
            public get simulated(): boolean;
            public set simulated(value: boolean);
            /** Physics interpolation used between updates.
            */
            public get interpolation(): UnityEngine.RigidbodyInterpolation2D;
            public set interpolation(value: UnityEngine.RigidbodyInterpolation2D);
            /** The sleep state that the rigidbody will initially be in.
            */
            public get sleepMode(): UnityEngine.RigidbodySleepMode2D;
            public set sleepMode(value: UnityEngine.RigidbodySleepMode2D);
            /** The method used by the physics engine to check if two objects have collided.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode2D;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode2D);
            /** Returns the number of Collider2D attached to this Rigidbody2D.
            */
            public get attachedColliderCount(): number;
            /** The total amount of force that has been explicitly applied to this Rigidbody2D since the last physics simulation step.
            */
            public get totalForce(): UnityEngine.Vector2;
            public set totalForce(value: UnityEngine.Vector2);
            /** The total amount of torque that has been explicitly applied to this Rigidbody2D since the last physics simulation step.
            */
            public get totalTorque(): number;
            public set totalTorque(value: number);
            /** The additional Layers that all Collider2D attached to this Rigidbody2D should exclude when deciding if a contact with another Collider2D should happen or not.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional Layers that all Collider2D attached to this Rigidbody2D should include when deciding if a contact with another Collider2D should happen or not.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** Sets the rotation of the Rigidbody2D to angle (given in degrees).
            * @param $angle The rotation of the Rigidbody (in degrees).
            */
            public SetRotation($angle: number): void
            /** Sets the rotation of the Rigidbody2D to the z-axis rotation extracted from the full 3D rotation.
            * @param $rotation Full 3D rotation used to extract only the z-axis rotation.
            */
            public SetRotation($rotation: UnityEngine.Quaternion): void
            /** Moves the rigidbody to position.
            * @param $position The new position for the Rigidbody object.
            */
            public MovePosition($position: UnityEngine.Vector2): void
            /** Rotates the Rigidbody to angle (given in degrees).
            * @param $angle The new rotation angle for the Rigidbody object.
            */
            public MoveRotation($angle: number): void
            /** An overload of MoveRotation that allows a full 3D rotation as an argument.
            * @param $rotation Full 3D rotation used to extract only the z-axis rotation.
            */
            public MoveRotation($rotation: UnityEngine.Quaternion): void
            /** Is the rigidbody "sleeping"?
            */
            public IsSleeping(): boolean
            /** Is the rigidbody "awake"?
            */
            public IsAwake(): boolean
            /** Make the rigidbody "sleep".
            */
            public Sleep(): void
            /** Disables the "sleeping" state of a rigidbody.
            */
            public WakeUp(): void
            /** Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not.
            * @param $collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
            * @returns Whether the collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching($collider: UnityEngine.Collider2D): boolean
            /** Checks whether the collider  is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
            * @param $collider The collider to check if it is touching any of the collider(s) attached to this rigidbody.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether the collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching($collider: UnityEngine.Collider2D, $contactFilter: UnityEngine.ContactFilter2D): boolean
            /** Checks whether any collider is touching any of the collider(s) attached to this rigidbody or not with the results filtered by the ContactFilter2D.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @returns Whether any collider is touching any of the collider(s) attached to this rigidbody or not. 
            */
            public IsTouching($contactFilter: UnityEngine.ContactFilter2D): boolean
            public IsTouchingLayers(): boolean
            /** Checks whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not.
            * @param $layerMask Any colliders on any of these layers count as touching.
            * @returns Whether any of the collider(s) attached to this rigidbody are touching any colliders on the specified layerMask or not. 
            */
            public IsTouchingLayers($layerMask: number): boolean
            /** Check if any of the Rigidbody2D colliders overlap a point in space.
            * @param $point A point in world space.
            * @returns Whether the point overlapped any of the Rigidbody2D colliders. 
            */
            public OverlapPoint($point: UnityEngine.Vector2): boolean
            /** Calculates the minimum distance of this collider against all Collider2D attached to this Rigidbody2D.
            * @param $collider A collider used to calculate the minimum distance against all colliders attached to this Rigidbody2D.
            * @returns The minimum distance of collider against all colliders attached to this Rigidbody2D. 
            */
            public Distance($collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D
            /** Returns a point on the perimeter of all enabled Colliders attached to this Rigidbody that is closest to the specified position.
            * @param $position The position from which to find the closest point on this Rigidbody.
            * @returns A point on the perimeter of a Collider attached to this rigidbody that is closest to the specified position. 
            */
            public ClosestPoint($position: UnityEngine.Vector2): UnityEngine.Vector2
            public AddForce($force: UnityEngine.Vector2): void
            /** Apply a force to the rigidbody.
            * @param $force Components of the force in the X and Y axes.
            * @param $mode The method used to apply the specified force.
            */
            public AddForce($force: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D): void
            public AddRelativeForce($relativeForce: UnityEngine.Vector2): void
            /** Adds a force to the rigidbody2D relative to its coordinate system.
            * @param $relativeForce Components of the force in the X and Y axes.
            * @param $mode The method used to apply the specified force.
            */
            public AddRelativeForce($relativeForce: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D): void
            public AddForceAtPosition($force: UnityEngine.Vector2, $position: UnityEngine.Vector2): void
            /** Apply a force at a given position in space.
            * @param $force Components of the force in the X and Y axes.
            * @param $position Position in world space to apply the force.
            * @param $mode The method used to apply the specified force.
            */
            public AddForceAtPosition($force: UnityEngine.Vector2, $position: UnityEngine.Vector2, $mode: UnityEngine.ForceMode2D): void
            public AddTorque($torque: number): void
            /** Apply a torque at the rigidbody's centre of mass.
            * @param $torque Torque to apply.
            * @param $mode The force mode to use.
            */
            public AddTorque($torque: number, $mode: UnityEngine.ForceMode2D): void
            /** Get a local space point given the point point in rigidBody global space.
            * @param $point The global space point to transform into local space.
            */
            public GetPoint($point: UnityEngine.Vector2): UnityEngine.Vector2
            /** Get a global space point given the point relativePoint in rigidBody local space.
            * @param $relativePoint The local space point to transform into global space.
            */
            public GetRelativePoint($relativePoint: UnityEngine.Vector2): UnityEngine.Vector2
            /** Get a local space vector given the vector vector in rigidBody global space.
            * @param $vector The global space vector to transform into a local space vector.
            */
            public GetVector($vector: UnityEngine.Vector2): UnityEngine.Vector2
            /** Get a global space vector given the vector relativeVector in rigidBody local space.
            * @param $relativeVector The local space vector to transform into a global space vector.
            */
            public GetRelativeVector($relativeVector: UnityEngine.Vector2): UnityEngine.Vector2
            /** The velocity of the rigidbody at the point Point in global space.
            * @param $point The global space point to calculate velocity for.
            */
            public GetPointVelocity($point: UnityEngine.Vector2): UnityEngine.Vector2
            /** The velocity of the rigidbody at the point Point in local space.
            * @param $relativePoint The local space point to calculate velocity for.
            */
            public GetRelativePointVelocity($relativePoint: UnityEngine.Vector2): UnityEngine.Vector2
            /** Get a list of all Colliders that overlap all Colliders attached to this Rigidbody2D.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth.  Note that normal angle is not used for overlap testing.
            * @param $results The array to receive results.  The size of the array determines the maximum number of results that can be returned.
            * @returns Returns the number of results placed in the results array. 
            */
            public OverlapCollider($contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.Collider2D>): number
            public OverlapCollider($contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Retrieves all contact points for all of the Collider(s) attached to this Rigidbody.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            public GetContacts($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all contact points for all of the Collider(s) attached to this Rigidbody, with the results filtered by the ContactFilter2D.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this Rigidbody.
            * @param $colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts($colliders: System.Array$1<UnityEngine.Collider2D>): number
            public GetContacts($colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Retrieves all Colliders in contact with any of the Collider(s) attached to this rigidbody, with the results filtered by the ContactFilter2D.
            * @param $contactFilter The contact filter used to filter the results differently, such as by layer mask, Z depth, or normal angle.
            * @param $colliders An array of Collider2D used to receive the results.
            * @returns Returns the number of colliders placed in the colliders array. 
            */
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Array$1<UnityEngine.Collider2D>): number
            public GetContacts($contactFilter: UnityEngine.ContactFilter2D, $colliders: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            /** Returns all Collider2D that are attached to this Rigidbody2D.
            * @param $results An array of Collider2D used to receive the results.
            * @returns Returns the number of Collider2D placed in the results array. 
            */
            public GetAttachedColliders($results: System.Array$1<UnityEngine.Collider2D>): number
            public GetAttachedColliders($results: System.Collections.Generic.List$1<UnityEngine.Collider2D>): number
            public Cast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
            * @param $direction Vector representing the direction to cast each Collider2D shape.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the Collider(s).
            * @returns Returns the number of results placed in the results array. 
            */
            public Cast($direction: UnityEngine.Vector2, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public Cast($direction: UnityEngine.Vector2, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance?: number): number
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>): number
            /** All the Collider2D shapes attached to the Rigidbody2D are cast into the Scene starting at each Collider position ignoring the Colliders attached to the same Rigidbody2D.
            * @param $direction Vector representing the direction to cast each Collider2D shape.
            * @param $contactFilter Filter results defined by the contact filter.
            * @param $results Array to receive results.
            * @param $distance Maximum distance over which to cast the Collider(s).
            * @returns Returns the number of results placed in the results array. 
            */
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Array$1<UnityEngine.RaycastHit2D>, $distance: number): number
            public Cast($direction: UnityEngine.Vector2, $contactFilter: UnityEngine.ContactFilter2D, $results: System.Collections.Generic.List$1<UnityEngine.RaycastHit2D>, $distance: number): number
            /** Gets all the PhysicsShape2D used by all Collider2D attached to the Rigidbody2D.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to store the retrieved PhysicsShape2D in.
            * @returns Returns the number of PhysicsShape2D retrieved from the Rigidbody2D. 
            */
            public GetShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D): number
            public constructor()
            public SetRotation($eulerAngles: UnityEngine.Vector3): void
            public SetRotation($path: string, $eulerAngles: UnityEngine.Vector3): void
        }
        /** Returns information about an object detected by a raycast in 2D physics.
        */
        class RaycastHit2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The direction that the capsule sides can extend.
        */
        enum CapsuleDirection2D { Vertical = 0, Horizontal = 1 }
        /** Details about a specific point of contact involved in a 2D physics collision.
        */
        class ContactPoint2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Represents a group of PhysicsShape2D and their geometry.
        */
        class PhysicsShapeGroup2D extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The total number of  PhysicsShape2D in the shape group. (Read Only)
            */
            public get shapeCount(): number;
            /** The total number of vertices in the shape group used to represent all PhysicsShape2D within it. (Read Only)
            */
            public get vertexCount(): number;
            /** Gets or sets a matrix that transforms the PhysicsShapeGroup2D vertices from local space into world space.
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            public set localToWorldMatrix(value: UnityEngine.Matrix4x4);
            /** Clears all the vertices and shapes from the PhysicsShapeGroup.
            */
            public Clear(): void
            /** Adds a copy of all the PhysicsShape2D and their geometry from the specified physicsShapeGroup into this shape group. The specified physicsShapeGroup is not modified.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to add to this shape group. (Read Only)
            */
            public Add($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D): void
            public GetShapeData($shapes: System.Collections.Generic.List$1<UnityEngine.PhysicsShape2D>, $vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            public GetShapeData($shapes: Unity.Collections.NativeArray$1<UnityEngine.PhysicsShape2D>, $vertices: Unity.Collections.NativeArray$1<UnityEngine.Vector2>): void
            public GetShapeVertices($shapeIndex: number, $vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            /** Gets a single vertex of a shape. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
            * @param $shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
            * @param $vertexIndex The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
            * @returns Returns the specified shape vertex. 
            */
            public GetShapeVertex($shapeIndex: number, $vertexIndex: number): UnityEngine.Vector2
            /** Sets a single vertex of a shape.
            * @param $shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
            * @param $vertexIndex The index of the shape vertex stored in the PhysicsShapeGroup2D. The vertex index is zero-based with the shape having a quantity of vertex specified by PhysicsShape2D.vertexCount.
            * @param $vertex The value to set the shape vertex to.
            */
            public SetShapeVertex($shapeIndex: number, $vertexIndex: number, $vertex: UnityEngine.Vector2): void
            /** Sets the radius of a shape.
            * @param $shapeIndex The index of the shape stored in the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
            * @param $radius The value to set the shape radius to.
            */
            public SetShapeRadius($shapeIndex: number, $radius: number): void
            /** Sets the adjacent vertices of a shape.
            * @param $shapeIndex The index of the shape to be modified that is stored the PhysicsShapeGroup2D.
            * @param $useAdjacentStart Sets the PhysicsShape2D.useAdjacentStart property of the selected shape.
            * @param $useAdjacentEnd Sets the PhysicsShape2D.useAdjacentEnd property of the selected shape.
            * @param $adjacentStart Sets the PhysicsShape2D.adjacentStart property of the selected shape.
            * @param $adjacentEnd Sets the PhysicsShape2D.adjacentEnd property of the selected shape.
            */
            public SetShapeAdjacentVertices($shapeIndex: number, $useAdjacentStart: boolean, $useAdjacentEnd: boolean, $adjacentStart: UnityEngine.Vector2, $adjacentEnd: UnityEngine.Vector2): void
            /** When destroying a shape at the specified shapeIndex, all other shapes that exist above the specified shapeIndex will have their shape indices updated appropriately.
            * @param $shapeIndex The index of the shape stored the PhysicsShapeGroup2D.
            */
            public DeleteShape($shapeIndex: number): void
            /** Gets the PhysicsShape2D stored at the specified shapeIndex.
            * @param $shapeIndex The index of the shape stored the PhysicsShapeGroup2D. The shape index is zero-based with the shape group having a quantity of shapes specified by PhysicsShapeGroup2D.shapeCount|shapeCount.
            * @returns Returns the shape stored at the specified shapeIndex. 
            */
            public GetShape($shapeIndex: number): UnityEngine.PhysicsShape2D
            /** Adds a circle shape (PhysicsShapeType2D.Circle) to the shape group.
            * @param $center The center point of the circle shape. This is analogous to Collider2D.offset.
            * @param $radius The radius of the circle defining a radius around the center. This is identical to CircleCollider2D.radius.
            * @returns Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape. 
            */
            public AddCircle($center: UnityEngine.Vector2, $radius: number): number
            /** Adds a capsule shape (PhysicsShapeType2D.Capsule) to the shape group.
            * @param $vertex0 The position of one end of a capsule shape. This point represents the center point of a logical circle at the end of a capsule.
            * @param $vertex1 The position of the opposite end of a capsule shape. This point represents the  center point of a logical circle at the opposite end of a capsule.
            * @param $radius The radius of the capsule defining a radius around the vertex0 and vertex1 and the area between them.
            * @returns Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape. 
            */
            public AddCapsule($vertex0: UnityEngine.Vector2, $vertex1: UnityEngine.Vector2, $radius: number): number
            /** Adds a box shape (PhysicsShapeType2D.Polygon) to the shape group.
            * @param $center The center point of the box shape. This is analogous to Collider2D.offset.
            * @param $size The size of the box. This is identical to BoxCollider2D.size.
            * @param $angle The angle in degrees the box should be rotated around the center.
            * @param $edgeRadius The radius extending around the edges of the box. This is identical to BoxCollider2D.edgeRadius.
            * @returns Returns the shape index the shape was added to in the PhysicsShapeGroup2D. This index is used as the main reference when retrieving a shape. 
            */
            public AddBox($center: UnityEngine.Vector2, $size: UnityEngine.Vector2, $angle?: number, $edgeRadius?: number): number
            public AddPolygon($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>): number
            public AddEdges($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>, $edgeRadius?: number): number
            public AddEdges($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>, $useAdjacentStart: boolean, $useAdjacentEnd: boolean, $adjacentStart: UnityEngine.Vector2, $adjacentEnd: UnityEngine.Vector2, $edgeRadius?: number): number
            public constructor($shapeCapacity?: number, $vertexCapacity?: number)
            public constructor()
        }
        /** Represents an efficient low-level physics shape used by the physics engine.
        */
        class PhysicsShape2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Collision details returned by 2D physics callback functions.
        */
        class Collision2D extends System.Object {
            protected [__keep_incompatibility]: never;
            /** The incoming Collider2D involved in the collision with the otherCollider.
            */
            public get collider(): UnityEngine.Collider2D;
            /** The other Collider2D involved in the collision with the collider.
            */
            public get otherCollider(): UnityEngine.Collider2D;
            /** The incoming Rigidbody2D involved in the collision with the otherRigidbody.
            */
            public get rigidbody(): UnityEngine.Rigidbody2D;
            /** The other Rigidbody2D involved in the collision with the rigidbody.
            */
            public get otherRigidbody(): UnityEngine.Rigidbody2D;
            /** The Transform of the incoming object involved in the collision.
            */
            public get transform(): UnityEngine.Transform;
            /** The incoming GameObject involved in the collision.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The relative linear velocity of the two colliding objects (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector2;
            /** Indicates whether the collision response or reaction is enabled or disabled.
            */
            public get enabled(): boolean;
            /** The specific points of contact with the incoming Collider2D. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
            */
            public get contacts(): System.Array$1<UnityEngine.ContactPoint2D>;
            /** Gets the number of contacts for this collision.
            */
            public get contactCount(): number;
            /** Gets the contact point at the specified index.
            * @param $index The index of the contact to retrieve.
            * @returns The contact at the specified index. 
            */
            public GetContact($index: number): UnityEngine.ContactPoint2D
            /** Retrieves all contact points for contacts between collider and otherCollider.
            * @param $contacts An array of ContactPoint2D used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts($contacts: System.Array$1<UnityEngine.ContactPoint2D>): number
            public GetContacts($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint2D>): number
            public constructor()
        }
        /** Asset type that defines the surface properties of a Collider2D.
        */
        class PhysicsMaterial2D extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The degree of elasticity during collisions.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** Coefficient of friction.
            */
            public get friction(): number;
            public set friction(value: number);
            public constructor()
            public constructor($name: string)
        }
        /** The physical behaviour type of the Rigidbody2D.
        */
        enum RigidbodyType2D { Dynamic = 0, Kinematic = 1, Static = 2 }
        /** Use these flags to constrain motion of the Rigidbody2D.
        */
        enum RigidbodyConstraints2D { None = 0, FreezePositionX = 1, FreezePositionY = 2, FreezeRotation = 4, FreezePosition = 3, FreezeAll = 7 }
        /** Interpolation mode for Rigidbody2D objects.
        */
        enum RigidbodyInterpolation2D { None = 0, Interpolate = 1, Extrapolate = 2 }
        /** Settings for a Rigidbody2D's initial sleep state.
        */
        enum RigidbodySleepMode2D { NeverSleep = 0, StartAwake = 1, StartAsleep = 2 }
        /** Controls how collisions are detected when a Rigidbody2D moves.
        */
        enum CollisionDetectionMode2D { None = 0, Discrete = 0, Continuous = 1 }
        /** Option for how to apply a force using Rigidbody2D.AddForce.
        */
        enum ForceMode2D { Force = 0, Impulse = 1 }
        /** A Collider that can merge other Colliders together.
        */
        class CompositeCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** Specifies the type of geometry the Composite Collider should generate.
            */
            public get geometryType(): UnityEngine.CompositeCollider2D.GeometryType;
            public set geometryType(value: UnityEngine.CompositeCollider2D.GeometryType);
            /** Specifies when to generate the Composite Collider geometry.
            */
            public get generationType(): UnityEngine.CompositeCollider2D.GenerationType;
            public set generationType(value: UnityEngine.CompositeCollider2D.GenerationType);
            /** When the value is true, the Collider uses an additional Delaunay triangulation step to produce the Collider mesh. When the value is false, this additional step does not occur.
            */
            public get useDelaunayMesh(): boolean;
            public set useDelaunayMesh(value: boolean);
            /** Controls the minimum distance allowed between generated vertices.
            */
            public get vertexDistance(): number;
            public set vertexDistance(value: number);
            /** Controls the radius of all edges created by the Collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Vertices are offset by this distance when compositing multiple physic shapes. Any vertices between shapes within this distance are combined.
            */
            public get offsetDistance(): number;
            public set offsetDistance(value: number);
            /** The number of paths in the Collider.
            */
            public get pathCount(): number;
            /** Gets the total number of points in all the paths within the Collider.
            */
            public get pointCount(): number;
            /** Regenerates the Composite Collider geometry.
            */
            public GenerateGeometry(): void
            /** Gets the number of points in the specified path from the Collider by its index.
            * @param $index The index of the path from 0 to pathCount minus 1.
            * @returns Returns the number of points in the path specified by index. 
            */
            public GetPathPointCount($index: number): number
            /** Gets a path from the Collider by its index.
            * @param $index The index of the path from 0 to pathCount minus 1.
            * @param $points An ordered array of the vertices (points) in the selected path.
            * @returns Returns the number of points placed in the points array. 
            */
            public GetPath($index: number, $points: System.Array$1<UnityEngine.Vector2>): number
            public GetPath($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>): number
            public constructor()
        }
        /** Indicates what (if any) error was encountered when creating a 2D Collider.
        */
        enum ColliderErrorState2D { None = 0, NoShapes = 1, RemovedShapes = 2 }
        /** Represents a Collider2D that is configured by assigning PhysicsShape2D geometry to it via a PhysicsShapeGroup2D.
        */
        class CustomCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** The total number of custom PhysicsShape2D assigned to the Collider. (Read Only)
            */
            public get customShapeCount(): number;
            /** The total number of Vector2|vertices used by the Collider. (Read Only)
            */
            public get customVertexCount(): number;
            /** Gets all the physics shapes and vertices in the Collider and places them in the specified PhysicsShapeGroup2D.
            * @param $physicsShapeGroup The physics shape group that will receive all the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.
            * @returns Returns the total number of PhysicsShape2D|physics shapes placed in the specified physicsShapeGroup. 
            */
            public GetCustomShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D): number
            /** Gets a specified number of physics shapes defined byshapeCount starting at shapeIndex along with all associated vertices those shapes use and places them in the specified PhysicsShapeGroup2D.
            * @param $physicsShapeGroup The physics shape group that will receive the PhysicsShape2D|physics shapes and Vector2|vertices from the Collider.
            * @param $shapeIndex The shape index within the Collider to start retrieving shapes from.
            * @param $shapeCount The total number of shapes starting at the shapeIndex to retrieve.
            * @returns The total number of PhysicsShape2D|physics shapes placed in the specified physicsShapeGroup. 
            */
            public GetCustomShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D, $shapeIndex: number, $shapeCount?: number): number
            public GetCustomShapes($shapes: Unity.Collections.NativeArray$1<UnityEngine.PhysicsShape2D>, $vertices: Unity.Collections.NativeArray$1<UnityEngine.Vector2>): number
            /** Sets all the shapes and vertices in the Collider to those represented by the specified PhysicsShapeGroup2D.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to use as the source of shapes and vertices.
            */
            public SetCustomShapes($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D): void
            public SetCustomShapes($shapes: Unity.Collections.NativeArray$1<UnityEngine.PhysicsShape2D>, $vertices: Unity.Collections.NativeArray$1<UnityEngine.Vector2>): void
            /** Sets a single shape and all associated shape vertices from the specified physicsShapeGroup into the Collider.
            * @param $physicsShapeGroup The PhysicsShapeGroup2D to use as the source of shapes and vertices.
            * @param $srcShapeIndex The source shape index within the physicsShapeGroup used to assign to the Collider.
            * @param $dstShapeIndex The destination shape index within the Collider to copy the source shape to.
            */
            public SetCustomShape($physicsShapeGroup: UnityEngine.PhysicsShapeGroup2D, $srcShapeIndex: number, $dstShapeIndex: number): void
            public SetCustomShape($shapes: Unity.Collections.NativeArray$1<UnityEngine.PhysicsShape2D>, $vertices: Unity.Collections.NativeArray$1<UnityEngine.Vector2>, $srcShapeIndex: number, $dstShapeIndex: number): void
            /** Deletes a specific number of shapes defined by shapeCount starting at shapeIndex along with all associated vertices those shapes use.
            * @param $shapeIndex The index of the shape stored in the Collider.
            * @param $shapeCount The number of shapes to delete starting at the specified index.
            */
            public ClearCustomShapes($shapeIndex: number, $shapeCount: number): void
            /** Deletes all the shapes and associated vertices for those shapes from the Collider.
            */
            public ClearCustomShapes(): void
            public constructor()
        }
        /** Collider for 2D physics representing an circle.
        */
        class CircleCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** Radius of the circle.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor()
        }
        /** A capsule-shaped primitive collider.
        */
        class CapsuleCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** The width and height of the capsule area.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The direction that the capsule sides can extend.
            */
            public get direction(): UnityEngine.CapsuleDirection2D;
            public set direction(value: UnityEngine.CapsuleDirection2D);
            public constructor()
        }
        /** Collider for 2D physics representing an arbitrary set of connected edges (lines) defined by its vertices.
        */
        class EdgeCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** Controls the radius of all edges created by the collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Gets the number of edges.
            */
            public get edgeCount(): number;
            /** Gets the number of points.
            */
            public get pointCount(): number;
            /** Get or set the points defining multiple continuous edges.
            */
            public get points(): System.Array$1<UnityEngine.Vector2>;
            public set points(value: System.Array$1<UnityEngine.Vector2>);
            /** Set this to true to use the adjacentStartPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's start point. Set this to false to not use the adjacentStartPoint, and the collision normal becomes the direction of motion of the collision.
            */
            public get useAdjacentStartPoint(): boolean;
            public set useAdjacentStartPoint(value: boolean);
            /** Set this to true to use the adjacentEndPoint to form the collision normal that is used to calculate the collision response when a collision occurs at the Edge Collider's end point. Set this to false to not use the adjacentEndPoint, and the collision normal becomes the direction of motion of the collision.
            */
            public get useAdjacentEndPoint(): boolean;
            public set useAdjacentEndPoint(value: boolean);
            /** Defines the position of a virtual point adjacent to the start point of the EdgeCollider2D.
            */
            public get adjacentStartPoint(): UnityEngine.Vector2;
            public set adjacentStartPoint(value: UnityEngine.Vector2);
            /** Defines the position of a virtual point adjacent to the end point of the EdgeCollider2D.
            */
            public get adjacentEndPoint(): UnityEngine.Vector2;
            public set adjacentEndPoint(value: UnityEngine.Vector2);
            /** Reset to a single edge consisting of two points.
            */
            public Reset(): void
            public GetPoints($points: System.Collections.Generic.List$1<UnityEngine.Vector2>): number
            public SetPoints($points: System.Collections.Generic.List$1<UnityEngine.Vector2>): boolean
            public constructor()
        }
        /** Collider for 2D physics representing an axis-aligned rectangle.
        */
        class BoxCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** The width and height of the rectangle.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** Controls the radius of all edges created by the collider.
            */
            public get edgeRadius(): number;
            public set edgeRadius(value: number);
            /** Determines whether the BoxCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
            */
            public get autoTiling(): boolean;
            public set autoTiling(value: boolean);
            public constructor()
        }
        /** Collider for 2D physics representing an arbitrary polygon defined by its vertices.
        */
        class PolygonCollider2D extends UnityEngine.Collider2D {
            protected [__keep_incompatibility]: never;
            /** When the value is true, the Collider uses an additional Delaunay triangulation step to produce the Collider mesh. When the value is false, this additional step does not occur.
            */
            public get useDelaunayMesh(): boolean;
            public set useDelaunayMesh(value: boolean);
            /** Determines whether the PolygonCollider2D's shape is automatically updated based on a SpriteRenderer's tiling properties.
            */
            public get autoTiling(): boolean;
            public set autoTiling(value: boolean);
            /** Corner points that define the collider's shape in local space.
            */
            public get points(): System.Array$1<UnityEngine.Vector2>;
            public set points(value: System.Array$1<UnityEngine.Vector2>);
            /** The number of paths in the polygon.
            */
            public get pathCount(): number;
            public set pathCount(value: number);
            /** Return the total number of points in the polygon in all paths.
            */
            public GetTotalPointCount(): number
            /** Gets a path from the Collider by its index.
            * @param $index The index of the path to retrieve.
            * @returns An ordered array of the vertices (points) in the selected path. 
            */
            public GetPath($index: number): System.Array$1<UnityEngine.Vector2>
            /** Define a path by its constituent points.
            * @param $index Index of the path to set.
            * @param $points An ordered array of the vertices (points) that define the path.
            */
            public SetPath($index: number, $points: System.Array$1<UnityEngine.Vector2>): void
            public GetPath($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>): number
            public SetPath($index: number, $points: System.Collections.Generic.List$1<UnityEngine.Vector2>): void
            public CreatePrimitive($sides: number): void
            public CreatePrimitive($sides: number, $scale: UnityEngine.Vector2): void
            /** Creates as regular primitive polygon with the specified number of sides.
            * @param $sides The number of sides in the polygon.  This must be greater than two.
            * @param $scale The X/Y scale of the polygon.  These must be greater than zero.
            * @param $offset The X/Y offset of the polygon.
            */
            public CreatePrimitive($sides: number, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2): void
            public constructor()
        }
        /** Parent class for joints to connect Rigidbody2D objects.
        */
        class Joint2D extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The Rigidbody2D attached to the Joint2D.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody2D;
            /** The Rigidbody2D object to which the other end of the joint is attached (ie, the object without the joint component).
            */
            public get connectedBody(): UnityEngine.Rigidbody2D;
            public set connectedBody(value: UnityEngine.Rigidbody2D);
            /** Should the two rigid bodies connected with this joint collide with each other?
            */
            public get enableCollision(): boolean;
            public set enableCollision(value: boolean);
            /** The force that needs to be applied for this joint to break.
            */
            public get breakForce(): number;
            public set breakForce(value: number);
            /** The torque that needs to be applied for this joint to break.
            */
            public get breakTorque(): number;
            public set breakTorque(value: number);
            /** The action to take when the joint breaks the Joint2D.breakForce|breakForce or Joint2D.breakTorque|breakTorque.
            */
            public get breakAction(): UnityEngine.JointBreakAction2D;
            public set breakAction(value: UnityEngine.JointBreakAction2D);
            /** Gets the reaction force of the joint.
            */
            public get reactionForce(): UnityEngine.Vector2;
            /** Gets the reaction torque of the joint.
            */
            public get reactionTorque(): number;
            /** Gets the reaction force of the joint given the specified timeStep.
            * @param $timeStep The time to calculate the reaction force for.
            * @returns The reaction force of the joint in the specified timeStep. 
            */
            public GetReactionForce($timeStep: number): UnityEngine.Vector2
            /** Gets the reaction torque of the joint given the specified timeStep.
            * @param $timeStep The time to calculate the reaction torque for.
            * @returns The reaction torque of the joint in the specified timeStep. 
            */
            public GetReactionTorque($timeStep: number): number
            public constructor()
        }
        /** Options for selecting which action to take when a Joint2D breaks.
        */
        enum JointBreakAction2D { Ignore = 0, CallbackOnly = 1, Disable = 2, Destroy = 3 }
        /** Parent class for all joints that have anchor points.
        */
        class AnchoredJoint2D extends UnityEngine.Joint2D {
            protected [__keep_incompatibility]: never;
            /** The joint's anchor point on the object that has the joint component.
            */
            public get anchor(): UnityEngine.Vector2;
            public set anchor(value: UnityEngine.Vector2);
            /** The joint's anchor point on the second object (ie, the one which doesn't have the joint component).
            */
            public get connectedAnchor(): UnityEngine.Vector2;
            public set connectedAnchor(value: UnityEngine.Vector2);
            /** Should the connectedAnchor be calculated automatically?
            */
            public get autoConfigureConnectedAnchor(): boolean;
            public set autoConfigureConnectedAnchor(value: boolean);
            public constructor()
        }
        /** Joint that attempts to keep two Rigidbody2D objects a set distance apart by applying a force between them.
        */
        class SpringJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** Should the distance be calculated automatically?
            */
            public get autoConfigureDistance(): boolean;
            public set autoConfigureDistance(value: boolean);
            /** The distance the spring will try to keep between the two objects.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The amount by which the spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the spring oscillates around the distance distance between the objects.
            */
            public get frequency(): number;
            public set frequency(value: number);
            public constructor()
        }
        /** Joint that keeps two Rigidbody2D objects a fixed distance apart.
        */
        class DistanceJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** Should the distance be calculated automatically?
            */
            public get autoConfigureDistance(): boolean;
            public set autoConfigureDistance(value: boolean);
            /** The distance separating the two ends of the joint.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Whether to maintain a maximum distance only or not.  If not then the absolute distance will be maintained instead.
            */
            public get maxDistanceOnly(): boolean;
            public set maxDistanceOnly(value: boolean);
            public constructor()
        }
        /** Applies both force and torque to reduce both the linear and angular velocities to zero.
        */
        class FrictionJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** The maximum force that can be generated when trying to maintain the friction joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The maximum torque that can be generated when trying to maintain the friction joint constraint.
            */
            public get maxTorque(): number;
            public set maxTorque(value: number);
            public constructor()
        }
        /** Joint that allows a Rigidbody2D object to rotate around a point in space or a point on another object.
        */
        class HingeJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** Should the joint be rotated automatically by a motor torque?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Should limits be placed on the range of rotation?
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** Parameters for the motor force applied to the joint.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** Limit of angular rotation (in degrees) on the joint.
            */
            public get limits(): UnityEngine.JointAngleLimits2D;
            public set limits(value: UnityEngine.JointAngleLimits2D);
            /** Gets the state of the joint limit.
            */
            public get limitState(): UnityEngine.JointLimitState2D;
            /** The angle (in degrees) referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            /** The current joint angle (in degrees) with respect to the reference angle.
            */
            public get jointAngle(): number;
            /** The current joint speed.
            */
            public get jointSpeed(): number;
            /** Gets the motor torque of the joint given the specified timestep.
            * @param $timeStep The time to calculate the motor torque for.
            */
            public GetMotorTorque($timeStep: number): number
            public constructor()
        }
        /** Parameters for the optional motor force applied to a Joint2D.
        */
        class JointMotor2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Angular limits on the rotation of a Rigidbody2D object around a HingeJoint2D.
        */
        class JointAngleLimits2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Represents the state of a joint limit.
        */
        enum JointLimitState2D { Inactive = 0, LowerLimit = 1, UpperLimit = 2, EqualLimits = 3 }
        /** Keeps two Rigidbody2D at their relative orientations.
        */
        class RelativeJoint2D extends UnityEngine.Joint2D {
            protected [__keep_incompatibility]: never;
            /** The maximum force that can be generated when trying to maintain the relative joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The maximum torque that can be generated when trying to maintain the relative joint constraint.
            */
            public get maxTorque(): number;
            public set maxTorque(value: number);
            /** Scales both the linear and angular forces used to correct the required relative orientation.
            */
            public get correctionScale(): number;
            public set correctionScale(value: number);
            /** Should both the linearOffset and angularOffset be calculated automatically?
            */
            public get autoConfigureOffset(): boolean;
            public set autoConfigureOffset(value: boolean);
            /** The current linear offset between the Rigidbody2D that the joint connects.
            */
            public get linearOffset(): UnityEngine.Vector2;
            public set linearOffset(value: UnityEngine.Vector2);
            /** The current angular offset between the Rigidbody2D that the joint connects.
            */
            public get angularOffset(): number;
            public set angularOffset(value: number);
            /** The world-space position that is currently trying to be maintained.
            */
            public get target(): UnityEngine.Vector2;
            public constructor()
        }
        /** Joint that restricts the motion of a Rigidbody2D object to a single line.
        */
        class SliderJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** Should the angle be calculated automatically?
            */
            public get autoConfigureAngle(): boolean;
            public set autoConfigureAngle(value: boolean);
            /** The angle of the line in space (in degrees).
            */
            public get angle(): number;
            public set angle(value: number);
            /** Should a motor force be applied automatically to the Rigidbody2D?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Should motion limits be used?
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** Parameters for a motor force that is applied automatically to the Rigibody2D along the line.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** Restrictions on how far the joint can slide in each direction along the line.
            */
            public get limits(): UnityEngine.JointTranslationLimits2D;
            public set limits(value: UnityEngine.JointTranslationLimits2D);
            /** Gets the state of the joint limit.
            */
            public get limitState(): UnityEngine.JointLimitState2D;
            /** The angle (in degrees) referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            /** The current joint translation.
            */
            public get jointTranslation(): number;
            /** The current joint speed.
            */
            public get jointSpeed(): number;
            /** Gets the motor force of the joint given the specified timestep.
            * @param $timeStep The time to calculate the motor force for.
            */
            public GetMotorForce($timeStep: number): number
            public constructor()
        }
        /** Motion limits of a Rigidbody2D object along a SliderJoint2D.
        */
        class JointTranslationLimits2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** The joint attempts to move a Rigidbody2D to a specific target position.
        */
        class TargetJoint2D extends UnityEngine.Joint2D {
            protected [__keep_incompatibility]: never;
            /** The local-space anchor on the rigid-body the joint is attached to.
            */
            public get anchor(): UnityEngine.Vector2;
            public set anchor(value: UnityEngine.Vector2);
            /** The world-space position that the joint will attempt to move the body to.
            */
            public get target(): UnityEngine.Vector2;
            public set target(value: UnityEngine.Vector2);
            /** Should the target be calculated automatically?
            */
            public get autoConfigureTarget(): boolean;
            public set autoConfigureTarget(value: boolean);
            /** The maximum force that can be generated when trying to maintain the target joint constraint.
            */
            public get maxForce(): number;
            public set maxForce(value: number);
            /** The amount by which the target spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the target spring oscillates around the target position.
            */
            public get frequency(): number;
            public set frequency(value: number);
            public constructor()
        }
        /** Connects two Rigidbody2D together at their anchor points using a configurable spring.
        */
        class FixedJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** The amount by which the spring force is reduced in proportion to the movement speed.
            */
            public get dampingRatio(): number;
            public set dampingRatio(value: number);
            /** The frequency at which the spring oscillates around the distance between the objects.
            */
            public get frequency(): number;
            public set frequency(value: number);
            /** The angle referenced between the two bodies used as the constraint for the joint.
            */
            public get referenceAngle(): number;
            public constructor()
        }
        /** The wheel joint allows the simulation of wheels by providing a constraining suspension motion with an optional motor.
        */
        class WheelJoint2D extends UnityEngine.AnchoredJoint2D {
            protected [__keep_incompatibility]: never;
            /** Set the joint suspension configuration.
            */
            public get suspension(): UnityEngine.JointSuspension2D;
            public set suspension(value: UnityEngine.JointSuspension2D);
            /** Should a motor force be applied automatically to the Rigidbody2D?
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Parameters for a motor force that is applied automatically to the Rigidbody2D along the line.
            */
            public get motor(): UnityEngine.JointMotor2D;
            public set motor(value: UnityEngine.JointMotor2D);
            /** The current joint translation.
            */
            public get jointTranslation(): number;
            /** The current joint linear speed in meters/sec.
            */
            public get jointLinearSpeed(): number;
            /** The current joint rotational speed in degrees/sec.
            */
            public get jointSpeed(): number;
            /** The current joint angle (in degrees) defined as the relative angle between the two Rigidbody2D that the joint connects to.
            */
            public get jointAngle(): number;
            /** Gets the motor torque of the joint given the specified timestep.
            * @param $timeStep The time to calculate the motor torque for.
            */
            public GetMotorTorque($timeStep: number): number
            public constructor()
        }
        /** Joint suspension is used to define how suspension works on a WheelJoint2D.
        */
        class JointSuspension2D extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A base class for all 2D effectors.
        */
        class Effector2D extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Should the collider-mask be used or the global collision matrix?
            */
            public get useColliderMask(): boolean;
            public set useColliderMask(value: boolean);
            /** The mask used to select specific layers allowed to interact with the effector.
            */
            public get colliderMask(): number;
            public set colliderMask(value: number);
            public constructor()
        }
        /** Applies forces within an area.
        */
        class AreaEffector2D extends UnityEngine.Effector2D {
            protected [__keep_incompatibility]: never;
            /** The angle of the force to be applied.
            */
            public get forceAngle(): number;
            public set forceAngle(value: number);
            /** Should the forceAngle use global space?
            */
            public get useGlobalAngle(): boolean;
            public set useGlobalAngle(value: boolean);
            /** The magnitude of the force to be applied.
            */
            public get forceMagnitude(): number;
            public set forceMagnitude(value: number);
            /** The variation of the magnitude of the force to be applied.
            */
            public get forceVariation(): number;
            public set forceVariation(value: number);
            /** The linear drag to apply to rigid-bodies.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag to apply to rigid-bodies.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The target for where the effector applies any force.
            */
            public get forceTarget(): UnityEngine.EffectorSelection2D;
            public set forceTarget(value: UnityEngine.EffectorSelection2D);
            public constructor()
        }
        /** Selects the source and/or target to be used by an Effector2D.
        */
        enum EffectorSelection2D { Rigidbody = 0, Collider = 1 }
        /** Applies forces to simulate buoyancy, fluid-flow and fluid drag.
        */
        class BuoyancyEffector2D extends UnityEngine.Effector2D {
            protected [__keep_incompatibility]: never;
            /** Defines an arbitrary horizontal line that represents the fluid surface level.
            */
            public get surfaceLevel(): number;
            public set surfaceLevel(value: number);
            /** The density of the fluid used to calculate the buoyancy forces.
            */
            public get density(): number;
            public set density(value: number);
            /** A force applied to slow linear movement of any Collider2D in contact with the effector.
            */
            public get linearDrag(): number;
            public set linearDrag(value: number);
            /** A force applied to slow angular movement of any Collider2D in contact with the effector.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The angle of the force used to similate fluid flow.
            */
            public get flowAngle(): number;
            public set flowAngle(value: number);
            /** The magnitude of the force used to similate fluid flow.
            */
            public get flowMagnitude(): number;
            public set flowMagnitude(value: number);
            /** The random variation of the force used to similate fluid flow.
            */
            public get flowVariation(): number;
            public set flowVariation(value: number);
            public constructor()
        }
        /** Applies forces to attract/repulse against a point.
        */
        class PointEffector2D extends UnityEngine.Effector2D {
            protected [__keep_incompatibility]: never;
            /** The magnitude of the force to be applied.
            */
            public get forceMagnitude(): number;
            public set forceMagnitude(value: number);
            /** The variation of the magnitude of the force to be applied.
            */
            public get forceVariation(): number;
            public set forceVariation(value: number);
            /** The scale applied to the calculated distance between source and target.
            */
            public get distanceScale(): number;
            public set distanceScale(value: number);
            /** The linear drag to apply to rigid-bodies.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag to apply to rigid-bodies.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The source which is used to calculate the centroid point of the effector.  The distance from the target is defined from this point.
            */
            public get forceSource(): UnityEngine.EffectorSelection2D;
            public set forceSource(value: UnityEngine.EffectorSelection2D);
            /** The target for where the effector applies any force.
            */
            public get forceTarget(): UnityEngine.EffectorSelection2D;
            public set forceTarget(value: UnityEngine.EffectorSelection2D);
            /** The mode used to apply the effector force.
            */
            public get forceMode(): UnityEngine.EffectorForceMode2D;
            public set forceMode(value: UnityEngine.EffectorForceMode2D);
            public constructor()
        }
        /** The mode used to apply Effector2D forces.
        */
        enum EffectorForceMode2D { Constant = 0, InverseLinear = 1, InverseSquared = 2 }
        /** Applies "platform" behaviour such as one-way collisions etc.
        */
        class PlatformEffector2D extends UnityEngine.Effector2D {
            protected [__keep_incompatibility]: never;
            /** Should the one-way collision behaviour be used?
            */
            public get useOneWay(): boolean;
            public set useOneWay(value: boolean);
            /** Ensures that all contacts controlled by the one-way behaviour act the same.
            */
            public get useOneWayGrouping(): boolean;
            public set useOneWayGrouping(value: boolean);
            /** Should friction be used on the platform sides?
            */
            public get useSideFriction(): boolean;
            public set useSideFriction(value: boolean);
            /** Should bounce be used on the platform sides?
            */
            public get useSideBounce(): boolean;
            public set useSideBounce(value: boolean);
            /** The angle of an arc that defines the surface of the platform centered of the local 'up' of the effector.
            */
            public get surfaceArc(): number;
            public set surfaceArc(value: number);
            /** The angle of an arc that defines the sides of the platform centered on the local 'left' and 'right' of the effector. Any collision normals within this arc are considered for the 'side' behaviours.
            */
            public get sideArc(): number;
            public set sideArc(value: number);
            /** The rotational offset angle from the local 'up'.
            */
            public get rotationalOffset(): number;
            public set rotationalOffset(value: number);
            public constructor()
        }
        /** Applies tangent forces along the surfaces of colliders.
        */
        class SurfaceEffector2D extends UnityEngine.Effector2D {
            protected [__keep_incompatibility]: never;
            /** The speed to be maintained along the surface.
            */
            public get speed(): number;
            public set speed(value: number);
            /** The speed variation (from zero to the variation) added to base speed to be applied.
            */
            public get speedVariation(): number;
            public set speedVariation(value: number);
            /** The scale of the impulse force applied while attempting to reach the surface speed.
            */
            public get forceScale(): number;
            public set forceScale(value: number);
            /** Should the impulse force but applied to the contact point?
            */
            public get useContactForce(): boolean;
            public set useContactForce(value: boolean);
            /** Should friction be used for any contact with the surface?
            */
            public get useFriction(): boolean;
            public set useFriction(value: boolean);
            /** Should bounce be used for any contact with the surface?
            */
            public get useBounce(): boolean;
            public set useBounce(value: boolean);
            public constructor()
        }
        /** A base type for 2D physics components that required a callback during FixedUpdate.
        */
        class PhysicsUpdateBehaviour2D extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            public constructor()
        }
        /** Applies both linear and angular (torque) forces continuously to the rigidbody each physics update.
        */
        class ConstantForce2D extends UnityEngine.PhysicsUpdateBehaviour2D {
            protected [__keep_incompatibility]: never;
            /** The linear force applied to the rigidbody each physics update.
            */
            public get force(): UnityEngine.Vector2;
            public set force(value: UnityEngine.Vector2);
            /** The linear force, relative to the rigid-body coordinate system, applied each physics update.
            */
            public get relativeForce(): UnityEngine.Vector2;
            public set relativeForce(value: UnityEngine.Vector2);
            /** The torque applied to the rigidbody each physics update.
            */
            public get torque(): number;
            public set torque(value: number);
            public constructor()
        }
        /** Provides methods to take screenshots.
        */
        class ScreenCapture extends System.Object {
            protected [__keep_incompatibility]: never;
            public static CaptureScreenshot($filename: string): void
            /** Captures a screenshot and saves it as a .png file to a specified path.
            * @param $filename The path to save the screenshot file to.
            * @param $superSize The factor to increase resolution with.
            * @param $stereoCaptureMode The eye texture to capture when stereo rendering is enabled.
            */
            public static CaptureScreenshot($filename: string, $superSize: number): void
            public static CaptureScreenshot($filename: string, $stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode): void
            public static CaptureScreenshotAsTexture(): UnityEngine.Texture2D
            /** Captures a screenshot of the game view into a Texture2D object.
            * @param $superSize Factor by which to increase resolution.
            * @param $stereoCaptureMode Specifies the eye texture to capture when stereo rendering is enabled.
            */
            public static CaptureScreenshotAsTexture($superSize: number): UnityEngine.Texture2D
            public static CaptureScreenshotAsTexture($stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode): UnityEngine.Texture2D
            /** Captures a screenshot of the game view into a RenderTexture object.
            * @param $renderTexture RenderTexture that will get filled with the screen content.
            */
            public static CaptureScreenshotIntoRenderTexture($renderTexture: UnityEngine.RenderTexture): void
        }
        /** A component for masking Sprites and Particles.
        */
        class SpriteMask extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
            /** Unique ID of the sorting layer defining the start of the custom range.
            */
            public get frontSortingLayerID(): number;
            public set frontSortingLayerID(value: number);
            /** Order within the front sorting layer defining the start of the custom range.
            */
            public get frontSortingOrder(): number;
            public set frontSortingOrder(value: number);
            /** Unique ID of the sorting layer defining the end of the custom range.
            */
            public get backSortingLayerID(): number;
            public set backSortingLayerID(value: number);
            /** Order within the back sorting layer defining the end of the custom range.
            */
            public get backSortingOrder(): number;
            public set backSortingOrder(value: number);
            /** The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite.
            */
            public get alphaCutoff(): number;
            public set alphaCutoff(value: number);
            /** The Sprite used to define the mask.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** Mask sprites from front to back sorting values only.
            */
            public get isCustomRangeActive(): boolean;
            public set isCustomRangeActive(value: boolean);
            /** Determines the position of the Sprite used for sorting the SpriteMask.
            */
            public get spriteSortPoint(): UnityEngine.SpriteSortPoint;
            public set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
            public constructor()
        }
        /** Provides utility functions for working with Sprite Masks.
        */
        class SpriteMaskUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Checks if there are any active Sprite Masks within a specified range.
            * @param $range The inclusive range to search for any Sprite Masks.
            * @returns True if successful. Returns true if there are any active Sprite Masks within the specified range. 
            */
            public static HasSpriteMaskInLayerRange($range: UnityEngine.Rendering.SortingLayerRange): boolean
        }
        /** A StreamingController controls the streaming settings for an individual camera location.
        */
        class StreamingController extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Offset applied to the mipmap level chosen by the texture streaming system for any textures visible from this camera. This Offset can take either a positive or negative value.
            */
            public get streamingMipmapBias(): number;
            public set streamingMipmapBias(value: number);
            /** Initiate preloading of streaming data for this camera.
            * @param $timeoutSeconds Optional timeout before stopping preloading. Set to 0.0f when no timeout is required.
            * @param $activateCameraOnTimeout Set to True to activate the connected Camera component when timeout expires.
            * @param $disableCameraCuttingFrom Camera to deactivate on timeout (if Camera.activateCameraOnTime is True). This parameter can be null.
            */
            public SetPreloading($timeoutSeconds?: number, $activateCameraOnTimeout?: boolean, $disableCameraCuttingFrom?: UnityEngine.Camera): void
            /** Abort preloading.
            */
            public CancelPreloading(): void
            /** Used to find out whether the StreamingController is currently preloading texture mipmaps.
            * @returns True if in a preloading state, otherwise False. 
            */
            public IsPreloading(): boolean
            public constructor()
        }
        /** An IntegratedSubsystem is initialized from an IntegratedSubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given IntegratedSubsystem until it is Destroyed. After an IntegratedSubsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for IntegratedSubsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given IntegratedSubsystem.
        Note: initializing a second IntegratedSubsystem from the same IntegratedSubsystemDescriptor will return a reference to the existing IntegratedSubsystem as only one IntegratedSubsystem is currently allowed for a single IntegratedSubsystem provider.
        */
        class IntegratedSubsystem extends System.Object implements UnityEngine.ISubsystem {
            protected [__keep_incompatibility]: never;
            /** Whether or not the subsystem is running.
            */
            public get running(): boolean;
            /** Starts an instance of a subsystem.
            */
            public Start(): void
            /** Stops an instance of a subsystem.
            */
            public Stop(): void
            /** Destroys this instance of a subsystem.
            */
            public Destroy(): void
            public constructor()
        }
        interface ISubsystem {
            /** Will be true if asking the subsytem to start was successful. False in the case that the subsystem has stopped, was asked to stop or has not been started yet.
            */
            running: boolean
            /** Starts an instance of a subsystem.
            */
            Start(): void
            /** Stops an instance of a subsystem.
            */
            Stop(): void
            /** Destroys this instance of a subsystem.
            */
            Destroy(): void
        }
        /** Information about a subsystem that can be queried before creating a subsystem instance.
        */
        class IntegratedSubsystemDescriptor extends System.Object implements UnityEngine.ISubsystemDescriptorImpl, UnityEngine.ISubsystemDescriptor {
            protected [__keep_incompatibility]: never;
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            public get id(): string;
            /** Creates an ISubsystem from this descriptor.
            * @returns An instance of ISubsystem. 
            */
            public Create(): UnityEngine.ISubsystem
        }
        interface ISubsystemDescriptorImpl extends UnityEngine.ISubsystemDescriptor {
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            id: string
            /** Creates an ISubsystem from this descriptor.
            * @returns An instance of ISubsystem. 
            */
            Create(): UnityEngine.ISubsystem
        }
        interface ISubsystemDescriptor {
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            id: string
            /** Creates an ISubsystem from this descriptor.
            * @returns An instance of ISubsystem. 
            */
            Create(): UnityEngine.ISubsystem
        }
        /** A Subsystem is initialized from a SubsystemDescriptorWithProvider for a given Subsystem (Example, Input, Display, etc.) and provides an interface to interact with that given Subsystem until it is Destroyed. After a Subsystem is created it can be Started or Stopped to turn on and off functionality (and improve performance). The base type for subsystems only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given Subsystem.
        Note: initializing a second Subsystem from the same SubsystemDescriptor will return a reference to the existing Subsystem as only one Subsystem is currently allowed for a single Subsystem provider.
        This subsystem base-class is deprecated. If you are creating a new subsystem type, derive from SubsystemWithProvider instead.
        */
        class Subsystem extends System.Object implements UnityEngine.ISubsystem {
            protected [__keep_incompatibility]: never;
            /** Whether or not the subsystem is running.
            */
            public get running(): boolean;
            /** Starts an instance of a subsystem.
            */
            public Start(): void
            /** Stops an instance of a subsystem.
            */
            public Stop(): void
            /** Destroys this instance of a subsystem.
            */
            public Destroy(): void
        }
        /** Information about a subsystem that can be queried before creating a subsystem instance.
        This subsystem descriptor base-class is deprecated. If you are creating a new subsystem type, derive from SubsystemDecriptorWithProvider instead.
        */
        class SubsystemDescriptor extends System.Object implements UnityEngine.ISubsystemDescriptor {
            protected [__keep_incompatibility]: never;
            /** A unique string that identifies the subsystem that this Descriptor can create.
            */
            public get id(): string;
            public set id(value: string);
            /** The System.Type of the subsystem implementation associated with this descriptor.
            */
            public get subsystemImplementationType(): System.Type;
            public set subsystemImplementationType(value: System.Type);
            /** Creates an ISubsystem from this descriptor.
            * @returns An instance of ISubsystem. 
            */
            public Create(): UnityEngine.ISubsystem
        }
        /** Gives access to subsystems which provide additional functionality through plugins.
        */
        class SubsystemManager extends System.Object {
            protected [__keep_incompatibility]: never;
            public static GetAllSubsystemDescriptors($descriptors: System.Collections.Generic.List$1<UnityEngine.ISubsystemDescriptor>): void
            public static add_beforeReloadSubsystems($value: System.Action): void
            public static remove_beforeReloadSubsystems($value: System.Action): void
            public static add_afterReloadSubsystems($value: System.Action): void
            public static remove_afterReloadSubsystems($value: System.Action): void
            public static add_reloadSubsytemsStarted($value: System.Action): void
            public static remove_reloadSubsytemsStarted($value: System.Action): void
            public static add_reloadSubsytemsCompleted($value: System.Action): void
            public static remove_reloadSubsytemsCompleted($value: System.Action): void
        }
        /** The Terrain component renders the terrain.
        */
        class Terrain extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.
            */
            public get terrainData(): UnityEngine.TerrainData;
            public set terrainData(value: UnityEngine.TerrainData);
            /** The maximum distance at which trees are rendered.
            */
            public get treeDistance(): number;
            public set treeDistance(value: number);
            /** Distance from the camera where trees will be rendered as billboards only.
            */
            public get treeBillboardDistance(): number;
            public set treeBillboardDistance(value: number);
            /** Total distance delta that trees will use to transition from billboard orientation to mesh orientation.
            */
            public get treeCrossFadeLength(): number;
            public set treeCrossFadeLength(value: number);
            /** Maximum number of trees rendered at full LOD.
            */
            public get treeMaximumFullLODCount(): number;
            public set treeMaximumFullLODCount(value: number);
            /** Detail objects will be displayed up to this distance.
            */
            public get detailObjectDistance(): number;
            public set detailObjectDistance(value: number);
            /** Density of detail objects.
            */
            public get detailObjectDensity(): number;
            public set detailObjectDensity(value: number);
            /** An approximation of how many pixels the terrain will pop in the worst case when switching lod.
            */
            public get heightmapPixelError(): number;
            public set heightmapPixelError(value: number);
            /** Limits the maximum resolution the terrain can be rendered at.
            */
            public get heightmapMaximumLOD(): number;
            public set heightmapMaximumLOD(value: number);
            /** Limits how simplified the rendered terrain can be.
            */
            public get heightmapMinimumLODSimplification(): number;
            public set heightmapMinimumLODSimplification(value: number);
            /** Heightmap patches beyond basemap distance will use a precomputed low res basemap.
            */
            public get basemapDistance(): number;
            public set basemapDistance(value: number);
            /** The index of the baked lightmap applied to this terrain.
            */
            public get lightmapIndex(): number;
            public set lightmapIndex(value: number);
            /** The index of the realtime lightmap applied to this terrain.
            */
            public get realtimeLightmapIndex(): number;
            public set realtimeLightmapIndex(value: number);
            /** The UV scale & offset used for a baked lightmap.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The UV scale & offset used for a realtime lightmap.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
            /** Defines whether Unity frees per-Camera rendering resources for the Terrain when those resources aren't in use after a certain number of frames.
            */
            public get keepUnusedRenderingResources(): boolean;
            public set keepUnusedRenderingResources(value: boolean);
            /** Allows you to set the shadow casting mode for the terrain.
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** How reflection probes are used for terrain. See Rendering.ReflectionProbeUsage.
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** The custom material Unity uses to render the Terrain.
            */
            public get materialTemplate(): UnityEngine.Material;
            public set materialTemplate(value: UnityEngine.Material);
            /** Indicates whether Unity draws the Terrain geometry itself.
            */
            public get drawHeightmap(): boolean;
            public set drawHeightmap(value: boolean);
            /** Specifies if the terrain tile will be automatically connected to adjacent tiles.
            */
            public get allowAutoConnect(): boolean;
            public set allowAutoConnect(value: boolean);
            /** Grouping ID for auto connect.
            */
            public get groupingID(): number;
            public set groupingID(value: number);
            /** Set to true to enable the terrain instance renderer. The default value is false.
            */
            public get drawInstanced(): boolean;
            public set drawInstanced(value: boolean);
            /** When this options is enabled, Terrain heightmap geometries will be added in acceleration structures used for Ray Tracing.
            */
            public get enableHeightmapRayTracing(): boolean;
            public set enableHeightmapRayTracing(value: boolean);
            /** Returns the normal map texture computed from sampling the heightmap. It is only used when terrain is rendered using instancing.
            */
            public get normalmapTexture(): UnityEngine.RenderTexture;
            /** Specify if terrain trees and details should be drawn.
            */
            public get drawTreesAndFoliage(): boolean;
            public set drawTreesAndFoliage(value: boolean);
            /** Set the terrain bounding box scale.
            */
            public get patchBoundsMultiplier(): UnityEngine.Vector3;
            public set patchBoundsMultiplier(value: UnityEngine.Vector3);
            /** The multiplier to the current LOD bias used for rendering LOD trees (i.e. SpeedTree trees).
            */
            public get treeLODBiasMultiplier(): number;
            public set treeLODBiasMultiplier(value: number);
            /** Collect detail patches from memory.
            */
            public get collectDetailPatches(): boolean;
            public set collectDetailPatches(value: boolean);
            /** When enabled, the terrain ignores the terrain overrides set in the QualitySettings.
            */
            public get ignoreQualitySettings(): boolean;
            public set ignoreQualitySettings(value: boolean);
            /** Controls what part of the terrain should be rendered.
            */
            public get editorRenderFlags(): UnityEngine.TerrainRenderFlags;
            public set editorRenderFlags(value: UnityEngine.TerrainRenderFlags);
            /** The motion vector rendering mode for all SpeedTree models painted on the terrain. 
            */
            public get treeMotionVectorModeOverride(): UnityEngine.TreeMotionVectorModeOverride;
            public set treeMotionVectorModeOverride(value: UnityEngine.TreeMotionVectorModeOverride);
            /** Allows you to specify how Unity chooses the for tree instances.
            */
            public get preserveTreePrototypeLayers(): boolean;
            public set preserveTreePrototypeLayers(value: boolean);
            /** Graphics format of the Terrain heightmap.
            */
            public static get heightmapFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public static get heightmapTextureFormat(): UnityEngine.TextureFormat;
            /** RenderTextureFormat of the terrain heightmap.
            */
            public static get heightmapRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain normal map texture.
            */
            public static get normalmapFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Texture format of the Terrain normal map texture.
            */
            public static get normalmapTextureFormat(): UnityEngine.TextureFormat;
            /** Render texture format of the Terrain normal map texture.
            */
            public static get normalmapRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain holes Texture when it is not compressed.
            */
            public static get holesFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Render texture format of the Terrain holes Texture.
            */
            public static get holesRenderTextureFormat(): UnityEngine.RenderTextureFormat;
            /** Graphics format of the Terrain holes Texture when it is compressed.
            */
            public static get compressedHolesFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Texture format of the Terrain holes Texture when it is compressed.
            */
            public static get compressedHolesTextureFormat(): UnityEngine.TextureFormat;
            /** The active Terrain. This is a convenient function to get to the main Terrain in the Scene.
            */
            public static get activeTerrain(): UnityEngine.Terrain;
            /** The active terrains in the Scene.
            */
            public static get activeTerrains(): System.Array$1<UnityEngine.Terrain>;
            /** The Terrain tile to the left, which is in the negative X direction.
            */
            public get leftNeighbor(): UnityEngine.Terrain;
            /** The Terrain tile to the left, which is in the positive X direction.
            */
            public get rightNeighbor(): UnityEngine.Terrain;
            /** Terrain top neighbor.
            */
            public get topNeighbor(): UnityEngine.Terrain;
            /** Terrain bottom neighbor.
            */
            public get bottomNeighbor(): UnityEngine.Terrain;
            /** Determines which rendering layers the Terrain renderer lives on.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /**
            * @param $cameraInstanceID The InstanceID of the camera being queried. See Object.GetInstanceID.
            * @returns Returns true if all rendering resources for the given camera are saved regardless of usage. Returns false if garbage collection is allowed to free unused resources. 
            */
            public GetKeepUnusedCameraRenderingResources($cameraInstanceID: number): boolean
            /** Defines whether Unity cleans up rendering resources for a given Camera during garbage collection.
            * @param $cameraInstanceID The InstanceID of the camera for which freeUnusedRenderingResources is being set. See Object.GetInstanceID.
            * @param $freeUnusedRenderingResources The value to set to this camera's freeUnusedRenderingResources flag.
            */
            public SetKeepUnusedCameraRenderingResources($cameraInstanceID: number, $keepUnused: boolean): void
            public GetClosestReflectionProbes($result: System.Collections.Generic.List$1<UnityEngine.Rendering.ReflectionProbeBlendInfo>): void
            /** Samples the height at the given position defined in world space, relative to the Terrain space.
            */
            public SampleHeight($worldPosition: UnityEngine.Vector3): number
            /** Adds a tree instance to the terrain.
            */
            public AddTreeInstance($instance: UnityEngine.TreeInstance): void
            /** Lets you set up the connection between neighboring Terrain tiles. This ensures LOD matches up on neighboring Terrain tiles.
            * @param $left The Terrain tile to the left is in the negative X direction.
            * @param $top The Terrain tile to the top is in the positive Z direction.
            * @param $right The Terrain tile to the right is in the positive X direction.
            * @param $bottom The Terrain tile to the bottom is in the negative Z direction.
            */
            public SetNeighbors($left: UnityEngine.Terrain, $top: UnityEngine.Terrain, $right: UnityEngine.Terrain, $bottom: UnityEngine.Terrain): void
            /** Get the position of the terrain.
            */
            public GetPosition(): UnityEngine.Vector3
            /** Flushes any change done in the terrain so it takes effect.
            */
            public Flush(): void
            /** Set the additional material properties when rendering the terrain heightmap using the splat material.
            */
            public SetSplatMaterialPropertyBlock($properties: UnityEngine.MaterialPropertyBlock): void
            /** Get the previously set splat material properties by copying to the dest MaterialPropertyBlock object.
            */
            public GetSplatMaterialPropertyBlock($dest: UnityEngine.MaterialPropertyBlock): void
            /** Marks the current connectivity status as invalid.
            */
            public static SetConnectivityDirty(): void
            public static GetActiveTerrains($terrainList: System.Collections.Generic.List$1<UnityEngine.Terrain>): void
            /** Creates a Terrain including collider from TerrainData.
            */
            public static CreateTerrainGameObject($assignTerrain: UnityEngine.TerrainData): UnityEngine.GameObject
            public constructor()
        }
        /** The Terrain component renders the terrain.
        */
        interface Terrain {
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            UpdateGIMaterials(): void;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            UpdateGIMaterials($x: number, $y: number, $width: number, $height: number): void;
        }
        /** The TerrainData class stores heightmaps, detail mesh positions, tree instances, and terrain texture alpha maps.
        */
        class TerrainData extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
        }
        /** Contains information about a tree placed in the Terrain game object.
        */
        class TreeInstance extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Enum provding terrain rendering options.
        */
        enum TerrainRenderFlags { heightmap = 1, trees = 2, details = 4, all = 7, Heightmap = 1, Trees = 2, Details = 4, All = 7 }
        /** Options for motion vector rendering on the terrain.
        */
        enum TreeMotionVectorModeOverride { CameraMotionOnly = 0, PerObjectMotion = 1, ForceNoMotion = 2, InheritFromPrototype = 3 }
        /** Extension methods to the Terrain class, used only for the UpdateGIMaterials method used by the Global Illumination System.
        */
        class TerrainExtensions extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            public static UpdateGIMaterials($terrain: UnityEngine.Terrain): void
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Terrain.
            */
            public static UpdateGIMaterials($terrain: UnityEngine.Terrain, $x: number, $y: number, $width: number, $height: number): void
        }
        /** Tree Component for the tree creator.
        */
        class Tree extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Data asociated to the Tree.
            */
            public get data(): UnityEngine.ScriptableObject;
            public set data(value: UnityEngine.ScriptableObject);
            /** Tells if there is wind data exported from SpeedTree are saved on this component.
            */
            public get hasSpeedTreeWind(): boolean;
            public constructor()
        }
        /** This static class provides events that Unity triggers when Terrain data changes.
        */
        class TerrainCallbacks extends System.Object {
            protected [__keep_incompatibility]: never;
            public static add_heightmapChanged($value: UnityEngine.TerrainCallbacks.HeightmapChangedCallback): void
            public static remove_heightmapChanged($value: UnityEngine.TerrainCallbacks.HeightmapChangedCallback): void
            public static add_textureChanged($value: UnityEngine.TerrainCallbacks.TextureChangedCallback): void
            public static remove_textureChanged($value: UnityEngine.TerrainCallbacks.TextureChangedCallback): void
        }
        /** A 2D Rectangle defined by x, y, width, height with integers.
        */
        class RectInt extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.RectInt> {
            protected [__keep_incompatibility]: never;
        }
        /** Simple class that contains a pointer to a tree prototype.
        */
        class TreePrototype extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Retrieves the actual GameObject used by the tree.
            */
            public get prefab(): UnityEngine.GameObject;
            public set prefab(value: UnityEngine.GameObject);
            /** Bend factor of the tree prototype.
            */
            public get bendFactor(): number;
            public set bendFactor(value: number);
            /** The LOD index of a Tree LODGroup that Unity uses to generate a NavMesh. It uses this value only for Trees with a LODGroup, and ignores this value for regular Trees.
            */
            public get navMeshLod(): number;
            public set navMeshLod(value: number);
            public constructor()
            public constructor($other: UnityEngine.TreePrototype)
        }
        /** Detail prototype used by the Terrain GameObject.
        */
        class DetailPrototype extends System.Object {
            protected [__keep_incompatibility]: never;
            /** GameObject used by the DetailPrototype.
            */
            public get prototype(): UnityEngine.GameObject;
            public set prototype(value: UnityEngine.GameObject);
            /** Texture used by the DetailPrototype.
            */
            public get prototypeTexture(): UnityEngine.Texture2D;
            public set prototypeTexture(value: UnityEngine.Texture2D);
            /** Minimum width of the grass billboards (if render mode is GrassBillboard).
            */
            public get minWidth(): number;
            public set minWidth(value: number);
            /** Maximum width of the grass billboards (if render mode is GrassBillboard).
            */
            public get maxWidth(): number;
            public set maxWidth(value: number);
            /** Minimum height of the grass billboards (if render mode is GrassBillboard).
            */
            public get minHeight(): number;
            public set minHeight(value: number);
            /** Maximum height of the grass billboards (if render mode is GrassBillboard).
            */
            public get maxHeight(): number;
            public set maxHeight(value: number);
            /** Specifies the random seed value for detail object placement.
            */
            public get noiseSeed(): number;
            public set noiseSeed(value: number);
            /** Controls the spatial frequency of the noise pattern used to vary the scale and color of the detail objects.
            */
            public get noiseSpread(): number;
            public set noiseSpread(value: number);
            /** Controls detail density for this detail prototype, relative to it's size.
            */
            public get density(): number;
            public set density(value: number);
            /** Controls how far away detail objects are from the edge of the hole area.
            */
            public get holeEdgePadding(): number;
            public set holeEdgePadding(value: number);
            /** Color when the DetailPrototypes are "healthy".
            */
            public get healthyColor(): UnityEngine.Color;
            public set healthyColor(value: UnityEngine.Color);
            /** Color when the DetailPrototypes are "dry".
            */
            public get dryColor(): UnityEngine.Color;
            public set dryColor(value: UnityEngine.Color);
            /** Render mode for the DetailPrototype.
            */
            public get renderMode(): UnityEngine.DetailRenderMode;
            public set renderMode(value: UnityEngine.DetailRenderMode);
            /** Indicates whether this detail prototype uses the Mesh object from the GameObject specified by prototype.
            */
            public get usePrototypeMesh(): boolean;
            public set usePrototypeMesh(value: boolean);
            /** Indicates whether this detail prototype uses for rendering.
            */
            public get useInstancing(): boolean;
            public set useInstancing(value: boolean);
            /** Controls the detail's target coverage.
            */
            public get targetCoverage(): number;
            public set targetCoverage(value: number);
            /** Indicates the global density scale set in the terrain settings affects this detail prototype.
            */
            public get useDensityScaling(): boolean;
            public set useDensityScaling(value: boolean);
            /** Rotate detail axis parallel to the ground's normal direction, so that the detail is perpendicular to the ground.
            */
            public get alignToGround(): number;
            public set alignToGround(value: number);
            /** Controls how Unity generates the detail positions.
            */
            public get positionJitter(): number;
            public set positionJitter(value: number);
            /** Returns true if the detail prototype is valid and the Terrain can accept it.
            * @param $errorMessage Returns a message that indicates the cause of failed validation.
            */
            public Validate(): boolean
            /** Returns true if the detail prototype is valid and the Terrain can accept it.
            * @param $errorMessage Returns a message that indicates the cause of failed validation.
            */
            public Validate($errorMessage: $Ref<string>): boolean
            public constructor()
            public constructor($other: UnityEngine.DetailPrototype)
        }
        /** Render mode for detail prototypes.
        */
        enum DetailRenderMode { GrassBillboard = 0, VertexLit = 1, Grass = 2 }
        /** Obsolete. Use TerrainLayer instead. A Splat prototype is just a texture that is used by the TerrainData.
        */
        class SplatPrototype extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Texture of the splat applied to the Terrain.
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** Normal map of the splat applied to the Terrain.
            */
            public get normalMap(): UnityEngine.Texture2D;
            public set normalMap(value: UnityEngine.Texture2D);
            /** Size of the tile used in the texture of the SplatPrototype.
            */
            public get tileSize(): UnityEngine.Vector2;
            public set tileSize(value: UnityEngine.Vector2);
            /** Offset of the tile texture of the SplatPrototype.
            */
            public get tileOffset(): UnityEngine.Vector2;
            public set tileOffset(value: UnityEngine.Vector2);
            public get specular(): UnityEngine.Color;
            public set specular(value: UnityEngine.Color);
            /** The metallic value of the splat layer.
            */
            public get metallic(): number;
            public set metallic(value: number);
            /** The smoothness value of the splat layer when the main texture has no alpha channel.
            */
            public get smoothness(): number;
            public set smoothness(value: number);
            public constructor()
        }
        /** Description of a terrain layer.
        */
        class TerrainLayer extends UnityEngine.Object {
            protected [__keep_incompatibility]: never;
            /** The diffuse texture used by the terrain layer.
            */
            public get diffuseTexture(): UnityEngine.Texture2D;
            public set diffuseTexture(value: UnityEngine.Texture2D);
            /** Normal map texture used by the terrain layer.
            */
            public get normalMapTexture(): UnityEngine.Texture2D;
            public set normalMapTexture(value: UnityEngine.Texture2D);
            /** The mask map texture used by the terrain layer.
            */
            public get maskMapTexture(): UnityEngine.Texture2D;
            public set maskMapTexture(value: UnityEngine.Texture2D);
            /** UV Tiling size.
            */
            public get tileSize(): UnityEngine.Vector2;
            public set tileSize(value: UnityEngine.Vector2);
            /** UV tiling offset.
            */
            public get tileOffset(): UnityEngine.Vector2;
            public set tileOffset(value: UnityEngine.Vector2);
            /** Specular color.
            */
            public get specular(): UnityEngine.Color;
            public set specular(value: UnityEngine.Color);
            /** Metallic factor used by the terrain layer.
            */
            public get metallic(): number;
            public set metallic(value: number);
            /** Smoothness of the specular reflection.
            */
            public get smoothness(): number;
            public set smoothness(value: number);
            /** A float value that scales the normal vector. The minimum value is 0, the maximum value is 1.
            */
            public get normalScale(): number;
            public set normalScale(value: number);
            /** A Vector4 value specifying the minimum RGBA value that the diffuse texture maps to when the value of the channel is 0.
            */
            public get diffuseRemapMin(): UnityEngine.Vector4;
            public set diffuseRemapMin(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the maximum RGBA value that the diffuse texture maps to when the value of the channel is 1.
            */
            public get diffuseRemapMax(): UnityEngine.Vector4;
            public set diffuseRemapMax(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the minimum RGBA value that the mask map texture maps to when the value of the channel is 0.
            */
            public get maskMapRemapMin(): UnityEngine.Vector4;
            public set maskMapRemapMin(value: UnityEngine.Vector4);
            /** A Vector4 value specifying the maximum RGBA value that the mask map texture maps to when the value of the channel is 1.
            */
            public get maskMapRemapMax(): UnityEngine.Vector4;
            public set maskMapRemapMax(value: UnityEngine.Vector4);
            public constructor()
        }
        /** A heightmap based collider.
        */
        class TerrainCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The terrain that stores the heightmap.
            */
            public get terrainData(): UnityEngine.TerrainData;
            public set terrainData(value: UnityEngine.TerrainData);
            public constructor()
        }
        /** Class that can be used to generate text for rendering.
        */
        class TextGenerator extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** The number of characters that have been generated and are included in the visible lines.
            */
            public get characterCountVisible(): number;
            /** Array of generated vertices.
            */
            public get verts(): System.Collections.Generic.IList$1<UnityEngine.UIVertex>;
            /** Array of generated characters.
            */
            public get characters(): System.Collections.Generic.IList$1<UnityEngine.UICharInfo>;
            /** Information about each generated text line.
            */
            public get lines(): System.Collections.Generic.IList$1<UnityEngine.UILineInfo>;
            /** Extents of the generated text in rect format.
            */
            public get rectExtents(): UnityEngine.Rect;
            /** Number of vertices generated.
            */
            public get vertexCount(): number;
            /** The number of characters that have been generated.
            */
            public get characterCount(): number;
            /** Number of text lines generated.
            */
            public get lineCount(): number;
            /** The size of the font that was found if using best fit mode.
            */
            public get fontSizeUsedForBestFit(): number;
            /** Mark the text generator as invalid. This will force a full text generation the next time Populate is called.
            */
            public Invalidate(): void
            public GetCharacters($characters: System.Collections.Generic.List$1<UnityEngine.UICharInfo>): void
            public GetLines($lines: System.Collections.Generic.List$1<UnityEngine.UILineInfo>): void
            public GetVertices($vertices: System.Collections.Generic.List$1<UnityEngine.UIVertex>): void
            /** Given a string and settings, returns the preferred width for a container that would hold this text.
            * @param $str Generation text.
            * @param $settings Settings for generation.
            * @returns Preferred width. 
            */
            public GetPreferredWidth($str: string, $settings: UnityEngine.TextGenerationSettings): number
            /** Given a string and settings, returns the preferred height for a container that would hold this text.
            * @param $str Generation text.
            * @param $settings Settings for generation.
            * @returns Preferred height. 
            */
            public GetPreferredHeight($str: string, $settings: UnityEngine.TextGenerationSettings): number
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param $str String to generate.
            * @param $settings Generation settings.
            * @param $context The object used as context of the error log message, if necessary.
            * @returns True if the generation is a success, false otherwise. 
            */
            public PopulateWithErrors($str: string, $settings: UnityEngine.TextGenerationSettings, $context: UnityEngine.GameObject): boolean
            /** Will generate the vertices and other data for the given string with the given settings.
            * @param $str String to generate.
            * @param $settings Settings.
            */
            public Populate($str: string, $settings: UnityEngine.TextGenerationSettings): boolean
            /** Returns the current UIVertex array.
            * @returns Vertices. 
            */
            public GetVerticesArray(): System.Array$1<UnityEngine.UIVertex>
            /** Returns the current UICharInfo.
            * @returns Character information. 
            */
            public GetCharactersArray(): System.Array$1<UnityEngine.UICharInfo>
            /** Returns the current UILineInfo.
            * @returns Line information. 
            */
            public GetLinesArray(): System.Array$1<UnityEngine.UILineInfo>
            public constructor()
            public constructor($initialCapacity: number)
        }
        /** Class that specifies some information about a renderable character.
        */
        class UICharInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Information about a generated line of text.
        */
        class UILineInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Vertex class used by a Canvas for managing vertices.
        */
        class UIVertex extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A struct that stores the settings for TextGeneration.
        */
        class TextGenerationSettings extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** A script interface for the.
        */
        class TextMesh extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** The text that is displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** The Font used.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** The font size to use (for dynamic fonts).
            */
            public get fontSize(): number;
            public set fontSize(value: number);
            /** The font style to use (for dynamic fonts).
            */
            public get fontStyle(): UnityEngine.FontStyle;
            public set fontStyle(value: UnityEngine.FontStyle);
            /** How far should the text be offset from the transform.position.z when drawing.
            */
            public get offsetZ(): number;
            public set offsetZ(value: number);
            /** How lines of text are aligned (Left, Right, Center).
            */
            public get alignment(): UnityEngine.TextAlignment;
            public set alignment(value: UnityEngine.TextAlignment);
            /** Which point of the text shares the position of the Transform.
            */
            public get anchor(): UnityEngine.TextAnchor;
            public set anchor(value: UnityEngine.TextAnchor);
            /** The size of each character (This scales the whole text).
            */
            public get characterSize(): number;
            public set characterSize(value: number);
            /** How much space will be in-between lines of text.
            */
            public get lineSpacing(): number;
            public set lineSpacing(value: number);
            /** How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.
            */
            public get tabSize(): number;
            public set tabSize(value: number);
            /** Enable HTML-style tags for Text Formatting Markup.
            */
            public get richText(): boolean;
            public set richText(value: boolean);
            /** The color used to render the text.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            public constructor()
        }
        /** How multiline text should be aligned.
        */
        enum TextAlignment { Left = 0, Center = 1, Right = 2 }
        /** Specification for how to render a character from the font texture. See Font.characterInfo.
        */
        class CharacterInfo extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Attribute to define the class as a grid brush and to make it available in the palette window.
        */
        class CustomGridBrushAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute {
            protected [__keep_incompatibility]: never;
            /** Hide all asset instances of this brush in the tile palette window.
            */
            public get hideAssetInstances(): boolean;
            /** Hide the default instance of brush in the tile palette window.
            */
            public get hideDefaultInstance(): boolean;
            /** If set to true, brush will replace Unity built-in brush as the default brush in palette window.
            Only one class at any one time should set defaultBrush to true.
            */
            public get defaultBrush(): boolean;
            /** Name of the default instance of this brush.
            */
            public get defaultName(): string;
            public constructor()
            public constructor($hideAssetInstances: boolean, $hideDefaultInstance: boolean, $defaultBrush: boolean, $defaultName: string)
        }
        /** Base class for authoring data on a grid with grid painting tools like paint, erase, pick, select and fill.
        */
        class GridBrushBase extends UnityEngine.ScriptableObject {
            protected [__keep_incompatibility]: never;
            /** Paints data into a grid within the given bounds.
            * @param $grid Grid used for layout.
            * @param $brushTarget Target of the paint operation. By default the currently selected GameObject.
            * @param $position The coordinates of the cell to paint data to.
            */
            public Paint($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int): void
            /** Erases data on a grid within the given bounds.
            * @param $grid Grid used for layout.
            * @param $brushTarget Target of the erase operation. By default the currently selected GameObject.
            * @param $position The coordinates of the cell to erase data from.
            */
            public Erase($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int): void
            /** Box fills tiles and GameObjects into given bounds within the selected layers.
            * @param $gridLayout Grid used for layout.
            * @param $brushTarget Target of box fill operation. By default the currently selected GameObject.
            * @param $position The bounds to box fill data to.
            */
            public BoxFill($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt): void
            /** Erases data on a grid within the given bounds.
            * @param $gridLayout Grid used for layout.
            * @param $brushTarget Target of the erase operation. By default the currently selected GameObject.
            * @param $position The bounds to erase data from.
            */
            public BoxErase($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt): void
            /** Select an area of a grid.
            * @param $grid Grid used for layout.
            * @param $brushTarget Targets of paint operation. By default the currently selected GameObject.
            * @param $position Area to get selected.
            */
            public Select($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt): void
            /** Flood fills data onto a grid given the starting coordinates of the cell.
            * @param $gridLayout Grid used for layout.
            * @param $brushTarget Targets of flood fill operation. By default the currently selected GameObject.
            * @param $position Starting position of the flood fill.
            */
            public FloodFill($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.Vector3Int): void
            public Rotate($direction: UnityEngine.GridBrushBase.RotationDirection, $layout: UnityEngine.GridLayout.CellLayout): void
            public Flip($flip: UnityEngine.GridBrushBase.FlipAxis, $layout: UnityEngine.GridLayout.CellLayout): void
            /** Picks data from a grid given the coordinates of the cells.
            * @param $grid Grid used for layout.
            * @param $brushTarget Target of the paint operation. By default the currently selected GameObject.
            * @param $position The coordinates of the cells to paint data from.
            * @param $pivot Pivot of the picking brush.
            */
            public Pick($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt, $pivot: UnityEngine.Vector3Int): void
            /** Move is called when user moves the area previously selected with the selection marquee.
            * @param $grid Grid used for layout.
            * @param $brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param $from Source bounds of the move.
            * @param $to Target bounds of the move.
            */
            public Move($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $from: UnityEngine.BoundsInt, $to: UnityEngine.BoundsInt): void
            /** MoveEnd is called when user starts moving the area previously selected with the selection marquee.
            * @param $grid Grid used for layout.
            * @param $brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param $position Position where the move operation has started.
            */
            public MoveStart($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt): void
            /** MoveEnd is called when user has ended the move of the area previously selected with the selection marquee.
            * @param $position Layers affected by the move operation.
            * @param $brushTarget Target of the move operation. By default the currently selected GameObject.
            * @param $grid Grid used for layout.
            */
            public MoveEnd($gridLayout: UnityEngine.GridLayout, $brushTarget: UnityEngine.GameObject, $position: UnityEngine.BoundsInt): void
            /** Changes the Z position of the GridBrushBase.
            * @param $change Modify the Z position of GridBrushBase by this value.
            */
            public ChangeZPosition($change: number): void
            /** Resets Z position changes of the GridBrushBase.
            */
            public ResetZPosition(): void
        }
        /** Represents an axis aligned bounding box with all values as integers.
        */
        class BoundsInt extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.BoundsInt> {
            protected [__keep_incompatibility]: never;
        }
        interface ICanvasRaycastFilter {
            /** Given a point and a camera is the raycast valid.
            * @param $sp Screen position.
            * @param $eventCamera Raycast camera.
            * @returns Valid. 
            */
            IsRaycastLocationValid($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera): boolean
        }
        /** A Canvas placable element that can be used to modify children Alpha, Raycasting, Enabled state.
        */
        class CanvasGroup extends UnityEngine.Behaviour implements UnityEngine.ICanvasRaycastFilter {
            protected [__keep_incompatibility]: never;
            /** Set the alpha of the group.
            */
            public get alpha(): number;
            public set alpha(value: number);
            /** Is the group interactable (are the elements beneath the group enabled).
            */
            public get interactable(): boolean;
            public set interactable(value: boolean);
            /** Does this group block raycasting (allow collision).
            */
            public get blocksRaycasts(): boolean;
            public set blocksRaycasts(value: boolean);
            /** Should the group ignore parent groups?
            */
            public get ignoreParentGroups(): boolean;
            public set ignoreParentGroups(value: boolean);
            /** Returns true if the Group allows raycasts.
            */
            public IsRaycastLocationValid($sp: UnityEngine.Vector2, $eventCamera: UnityEngine.Camera): boolean
            public constructor()
        }
        /** A component that will render to the screen after all normal rendering has completed when attached to a Canvas. Designed for GUI application.
        */
        class CanvasRenderer extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Enable 'render stack' pop draw call.
            */
            public get hasPopInstruction(): boolean;
            public set hasPopInstruction(value: boolean);
            /** The number of materials usable by this renderer.
            */
            public get materialCount(): number;
            public set materialCount(value: number);
            /** The number of materials usable by this renderer. Used internally for masking.
            */
            public get popMaterialCount(): number;
            public set popMaterialCount(value: number);
            /** Depth of the renderer relative to the root canvas.
            */
            public get absoluteDepth(): number;
            /** True if any change has occured that would invalidate the positions of generated geometry.
            */
            public get hasMoved(): boolean;
            /** Indicates whether geometry emitted by this renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.
            */
            public get cullTransparentMesh(): boolean;
            public set cullTransparentMesh(value: boolean);
            /** True if rect clipping has been enabled on this renderer.
            Additional resources: CanvasRenderer.EnableRectClipping, CanvasRenderer.DisableRectClipping.
            */
            public get hasRectClipping(): boolean;
            /** Depth of the renderer realative to the parent canvas.
            */
            public get relativeDepth(): number;
            /** Indicates whether geometry emitted by this renderer is ignored.
            */
            public get cull(): boolean;
            public set cull(value: boolean);
            /** The clipping softness to apply to the renderer.
            */
            public get clippingSoftness(): UnityEngine.Vector2;
            public set clippingSoftness(value: UnityEngine.Vector2);
            /** Set the color of the renderer. Will be multiplied with the UIVertex color and the Canvas color.
            * @param $color Renderer multiply color.
            */
            public SetColor($color: UnityEngine.Color): void
            /** Get the current color of the renderer.
            */
            public GetColor(): UnityEngine.Color
            /** Enables rect clipping on the CanvasRendered. Geometry outside of the specified rect will be clipped (not rendered).
            */
            public EnableRectClipping($rect: UnityEngine.Rect): void
            /** Disables rectangle clipping for this CanvasRenderer.
            */
            public DisableRectClipping(): void
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
            * @param $material Material for rendering.
            * @param $texture Material texture overide.
            * @param $index Material index.
            */
            public SetMaterial($material: UnityEngine.Material, $index: number): void
            /** Gets the current Material assigned to the CanvasRenderer.
            * @param $index The material index to retrieve (0 if this parameter is omitted).
            * @returns Result. 
            */
            public GetMaterial($index: number): UnityEngine.Material
            /** Set the material for the canvas renderer. Used internally for masking.
            */
            public SetPopMaterial($material: UnityEngine.Material, $index: number): void
            /** Gets the current Material assigned to the CanvasRenderer. Used internally for masking.
            */
            public GetPopMaterial($index: number): UnityEngine.Material
            /** Sets the texture used by this renderer's material.
            */
            public SetTexture($texture: UnityEngine.Texture): void
            /** The Alpha Texture that will be passed to the Shader under the _AlphaTex property.
            * @param $texture The Texture to be passed.
            */
            public SetAlphaTexture($texture: UnityEngine.Texture): void
            /** Sets the Mesh used by this renderer. Note the Mesh must be read/write enabled.
            */
            public SetMesh($mesh: UnityEngine.Mesh): void
            /** Returns the current mesh used to render the canvas content into.
            * @returns The current mesh for the canvas. 
            */
            public GetMesh(): UnityEngine.Mesh
            /** Remove all cached vertices.
            */
            public Clear(): void
            /** Get the current alpha of the renderer.
            */
            public GetAlpha(): number
            /** Set the alpha of the renderer. Will be multiplied with the UIVertex alpha and the Canvas alpha.
            * @param $alpha Alpha.
            */
            public SetAlpha($alpha: number): void
            /** Get the final inherited alpha calculated by including all the parent alphas from included parent CanvasGroups.
            * @returns The calculated inherited alpha. 
            */
            public GetInheritedAlpha(): number
            /** Set the material for the canvas renderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.
            Additional resources: CanvasRenderer.materialCount, CanvasRenderer.SetTexture.
            * @param $material Material for rendering.
            * @param $texture Material texture overide.
            * @param $index Material index.
            */
            public SetMaterial($material: UnityEngine.Material, $texture: UnityEngine.Texture): void
            /** Gets the current Material assigned to the CanvasRenderer.
            * @param $index The material index to retrieve (0 if this parameter is omitted).
            * @returns Result. 
            */
            public GetMaterial(): UnityEngine.Material
            public static SplitUIVertexStreams($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>): void
            public static SplitUIVertexStreams($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>): void
            public static CreateUIVertexStream($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>): void
            public static CreateUIVertexStream($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $indices: System.Collections.Generic.List$1<number>): void
            public static AddUIVertexStream($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public static AddUIVertexStream($verts: System.Collections.Generic.List$1<UnityEngine.UIVertex>, $positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $colors: System.Collections.Generic.List$1<UnityEngine.Color32>, $uv0S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv1S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv2S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $uv3S: System.Collections.Generic.List$1<UnityEngine.Vector4>, $normals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>): void
            public static add_onRequestRebuild($value: UnityEngine.CanvasRenderer.OnRequestRebuild): void
            public static remove_onRequestRebuild($value: UnityEngine.CanvasRenderer.OnRequestRebuild): void
            public constructor()
        }
        /** Utility class containing helper methods for working with  RectTransform.
        */
        class RectTransformUtility extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Convert a given point in screen space into a pixel correct point.
            * @returns Pixel adjusted point. 
            */
            public static PixelAdjustPoint($point: UnityEngine.Vector2, $elementTransform: UnityEngine.Transform, $canvas: UnityEngine.Canvas): UnityEngine.Vector2
            /** Given a rect transform, return the corner points in pixel accurate coordinates.
            * @returns Pixel adjusted rect. 
            */
            public static PixelAdjustRect($rectTransform: UnityEngine.RectTransform, $canvas: UnityEngine.Canvas): UnityEngine.Rect
            public static RectangleContainsScreenPoint($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2): boolean
            /** Does the RectTransform contain the screen point as seen from the given camera?
            * @param $rect The RectTransform to test with.
            * @param $screenPoint The screen point to test.
            * @param $cam The camera from which the test is performed from. (Optional)
            * @returns True if the point is inside the rectangle. 
            */
            public static RectangleContainsScreenPoint($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera): boolean
            public static RectangleContainsScreenPoint($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $offset: UnityEngine.Vector4): boolean
            /** Transform a screen space point to a position in world space that is on the plane of the given RectTransform.
            * @param $rect The RectTransform to find a point inside.
            * @param $cam The camera associated with the screen space position.
            * @param $screenPoint Screen space position.
            * @param $worldPoint Point in world space.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToWorldPointInRectangle($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $worldPoint: $Ref<UnityEngine.Vector3>): boolean
            /** Transform a screen space point to a position in the local space of a RectTransform that is on the plane of its rectangle.
            * @param $rect The RectTransform to find a point inside.
            * @param $cam The camera associated with the screen space position.
            * @param $screenPoint Screen space position.
            * @param $localPoint Point in local space of the rect transform.
            * @returns Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle. 
            */
            public static ScreenPointToLocalPointInRectangle($rect: UnityEngine.RectTransform, $screenPoint: UnityEngine.Vector2, $cam: UnityEngine.Camera, $localPoint: $Ref<UnityEngine.Vector2>): boolean
            public static ScreenPointToRay($cam: UnityEngine.Camera, $screenPos: UnityEngine.Vector2): UnityEngine.Ray
            public static WorldToScreenPoint($cam: UnityEngine.Camera, $worldPoint: UnityEngine.Vector3): UnityEngine.Vector2
            /** Creates a Bounds object that encapsulates all the child RectTransform objects found in the `child` parameter, and converts the resulting bounds into local space relative to the `root` transform.
            * @param $root The Transform to use when converting from world to local space.
            * @param $child The parent Transform object whose RectTransform children will be encapsulated.
            * @param $trans The Transform to both search for RectTransform children and convert into world to local space.
            * @returns A Bounds object representing the encapsulated bounds in local space relative to the root Transform. 
            */
            public static CalculateRelativeRectTransformBounds($root: UnityEngine.Transform, $child: UnityEngine.Transform): UnityEngine.Bounds
            /** Creates a Bounds object that encapsulates all the child RectTransform objects found in the `child` parameter, and converts the resulting bounds into local space relative to the `root` transform.
            * @param $root The Transform to use when converting from world to local space.
            * @param $child The parent Transform object whose RectTransform children will be encapsulated.
            * @param $trans The Transform to both search for RectTransform children and convert into world to local space.
            * @returns A Bounds object representing the encapsulated bounds in local space relative to the root Transform. 
            */
            public static CalculateRelativeRectTransformBounds($trans: UnityEngine.Transform): UnityEngine.Bounds
            /** Flips the alignment of the RectTransform along the horizontal or vertical axis, and optionally its children as well.
            * @param $rect The RectTransform to flip.
            * @param $keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param $recursive Flip the children as well?
            * @param $axis The axis to flip along. 0 is horizontal and 1 is vertical.
            */
            public static FlipLayoutOnAxis($rect: UnityEngine.RectTransform, $axis: number, $keepPositioning: boolean, $recursive: boolean): void
            /** Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.
            * @param $rect The RectTransform to flip.
            * @param $keepPositioning Flips around the pivot if true. Flips within the parent rect if false.
            * @param $recursive Flip the children as well?
            */
            public static FlipLayoutAxes($rect: UnityEngine.RectTransform, $keepPositioning: boolean, $recursive: boolean): void
        }
        /** Element that can be used for screen rendering.
        */
        class Canvas extends UnityEngine.Behaviour {
            protected [__keep_incompatibility]: never;
            /** Is the Canvas in World or Overlay mode?
            */
            public get renderMode(): UnityEngine.RenderMode;
            public set renderMode(value: UnityEngine.RenderMode);
            /** Is this the root Canvas?
            */
            public get isRootCanvas(): boolean;
            /** Get the render rect for the Canvas.
            */
            public get pixelRect(): UnityEngine.Rect;
            /** Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.
            */
            public get scaleFactor(): number;
            public set scaleFactor(value: number);
            /** The number of pixels per unit that is considered the default.
            */
            public get referencePixelsPerUnit(): number;
            public set referencePixelsPerUnit(value: number);
            /** Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.
            */
            public get overridePixelPerfect(): boolean;
            public set overridePixelPerfect(value: boolean);
            /** Should the Canvas vertex color always be in gamma space before passing to the UI shaders in linear color space work flow.
            */
            public get vertexColorAlwaysGammaSpace(): boolean;
            public set vertexColorAlwaysGammaSpace(value: boolean);
            /** Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.
            */
            public get pixelPerfect(): boolean;
            public set pixelPerfect(value: boolean);
            /** How far away from the camera is the Canvas generated.
            */
            public get planeDistance(): number;
            public set planeDistance(value: number);
            /** The render order in which the canvas is being emitted to the Scene. (Read Only)
            */
            public get renderOrder(): number;
            /** Override the sorting of canvas.
            */
            public get overrideSorting(): boolean;
            public set overrideSorting(value: boolean);
            /** Canvas' order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** For Overlay mode, display index on which the UI canvas will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Unique ID of the Canvas' sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Cached calculated value based upon SortingLayerID.
            */
            public get cachedSortingLayerValue(): number;
            /** Get or set the mask of additional shader channels to be used when creating the Canvas mesh.
            */
            public get additionalShaderChannels(): UnityEngine.AdditionalCanvasShaderChannels;
            public set additionalShaderChannels(value: UnityEngine.AdditionalCanvasShaderChannels);
            /** Name of the Canvas' sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Returns the Canvas closest to root, by checking through each parent and returning the last canvas found. If no other canvas is found then the canvas will return itself.
            */
            public get rootCanvas(): UnityEngine.Canvas;
            /** Returns the canvas display size based on the selected render mode and target display.
            */
            public get renderingDisplaySize(): UnityEngine.Vector2;
            /** Should the Canvas size be updated based on the render target when a manual Camera.Render call is performed.
            */
            public get updateRectTransformForStandalone(): UnityEngine.StandaloneRenderResize;
            public set updateRectTransformForStandalone(value: UnityEngine.StandaloneRenderResize);
            /** Camera used for sizing the Canvas when in Screen Space - Camera. Also used as the Camera that events will be sent through for a World Space Canvas.
            */
            public get worldCamera(): UnityEngine.Camera;
            public set worldCamera(value: UnityEngine.Camera);
            /** The normalized grid size that the canvas will split the renderable area into.
            */
            public get normalizedSortingGridSize(): number;
            public set normalizedSortingGridSize(value: number);
            public static add_preWillRenderCanvases($value: UnityEngine.Canvas.WillRenderCanvases): void
            public static remove_preWillRenderCanvases($value: UnityEngine.Canvas.WillRenderCanvases): void
            public static add_willRenderCanvases($value: UnityEngine.Canvas.WillRenderCanvases): void
            public static remove_willRenderCanvases($value: UnityEngine.Canvas.WillRenderCanvases): void
            /** Returns the default material that can be used for rendering normal elements on the Canvas.
            */
            public static GetDefaultCanvasMaterial(): UnityEngine.Material
            /** Gets or generates the ETC1 Material.
            * @returns The generated ETC1 Material from the Canvas. 
            */
            public static GetETC1SupportedCanvasMaterial(): UnityEngine.Material
            /** Force all canvases to update their content.
            */
            public static ForceUpdateCanvases(): void
            public constructor()
        }
        /** Element that can be used for screen rendering.
        */
        interface Canvas {
            Index($name: string, $type?: System.Type): any;
        }
        /** RenderMode for the Canvas.
        */
        enum RenderMode { ScreenSpaceOverlay = 0, ScreenSpaceCamera = 1, WorldSpace = 2 }
        /** Enum mask of possible shader channel properties that can also be included when the Canvas mesh is created.
        */
        enum AdditionalCanvasShaderChannels { None = 0, TexCoord1 = 1, TexCoord2 = 2, TexCoord3 = 4, Normal = 8, Tangent = 16 }
        /** Enum used to determine if a Canvas should be resized when a manual Camera.Render call is performed.
        */
        enum StandaloneRenderResize { Enabled = 0, Disabled = 1 }
        class UISystemProfilerApi extends System.Object {
            protected [__keep_incompatibility]: never;
            public static BeginSample($type: UnityEngine.UISystemProfilerApi.SampleType): void
            public static EndSample($type: UnityEngine.UISystemProfilerApi.SampleType): void
            public static AddMarker($name: string, $obj: UnityEngine.Object): void
        }
        /** Provides access to your remote settings.
        */
        class RemoteSettings extends System.Object {
            protected [__keep_incompatibility]: never;
            public static add_Updated($value: UnityEngine.RemoteSettings.UpdatedEventHandler): void
            public static remove_Updated($value: UnityEngine.RemoteSettings.UpdatedEventHandler): void
            public static add_BeforeFetchFromServer($value: System.Action): void
            public static remove_BeforeFetchFromServer($value: System.Action): void
            public static add_Completed($value: System.Action$3<boolean, boolean, number>): void
            public static remove_Completed($value: System.Action$3<boolean, boolean, number>): void
            /** Forces the game to download the newest settings from the server and update its values.
            */
            public static ForceUpdate(): void
            /** Reports whether or not the settings available from the RemoteSettings object were received from the Analytics Service during the current session.
            * @returns True, if the remote settings file was received from the Analytics Service in the current session. False, if the remote settings file was received during an earlier session and cached. 
            */
            public static WasLastUpdatedFromServer(): boolean
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetInt($key: string): number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetInt($key: string, $defaultValue: number): number
            public static GetLong($key: string): bigint
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetLong($key: string, $defaultValue: bigint): bigint
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetFloat($key: string): number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetFloat($key: string, $defaultValue: number): number
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetString($key: string): string
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetString($key: string, $defaultValue: string): string
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetBool($key: string): boolean
            /** Gets the value corresponding to remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $defaultValue The default value to use if the setting identified by the key parameter cannot be found or is unavailable.
            * @returns The current value of the setting identified by key, or the default value. 
            */
            public static GetBool($key: string, $defaultValue: boolean): boolean
            /** Reports whether the specified key exists in the remote settings configuration.
            * @param $key The key identifying the setting.
            * @returns True, if the key exists. 
            */
            public static HasKey($key: string): boolean
            /** Gets the number of keys in the remote settings configuration.
            */
            public static GetCount(): number
            /** Gets an array containing all the keys in the remote settings configuration.
            */
            public static GetKeys(): System.Array$1<string>
            /** Gets the object corresponding to the remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @param $type The type of object represented in RemoteSettings.
            * @returns An instance of the object with fields assigned the corresponding remote values. 
            */
            public static GetObject($type: System.Type, $key?: string): any
            /** Gets the object corresponding to the remote setting identified by key, if it exists.
            * @param $defaultValue The object that should be for default values.
            * @param $key The key identifying the setting.
            * @returns An instance of the object with fields assigned the corresponding remote values. 
            */
            public static GetObject($key: string, $defaultValue: any): any
            /** Gets a dictionary corresponding to the remote setting identified by key, if it exists.
            * @param $key The key identifying the setting.
            * @returns An instance of Dictionary<string, object> containing the corresponding remote value or values. 
            */
            public static GetDictionary($key?: string): System.Collections.Generic.IDictionary$2<string, any>
        }
        class RemoteConfigSettings extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public add_Updated($value: System.Action$1<boolean>): void
            public remove_Updated($value: System.Action$1<boolean>): void
            public Dispose(): void
            public static QueueConfig($name: string, $param: any, $ver?: number, $prefix?: string): boolean
            public static SendDeviceInfoInConfigRequest(): boolean
            public static AddSessionTag($tag: string): void
            public ForceUpdate(): void
            public WasLastUpdatedFromServer(): boolean
            public GetInt($key: string): number
            public GetInt($key: string, $defaultValue: number): number
            public GetLong($key: string): bigint
            public GetLong($key: string, $defaultValue: bigint): bigint
            public GetFloat($key: string): number
            public GetFloat($key: string, $defaultValue: number): number
            public GetString($key: string): string
            public GetString($key: string, $defaultValue: string): string
            public GetBool($key: string): boolean
            public GetBool($key: string, $defaultValue: boolean): boolean
            public HasKey($key: string): boolean
            public GetCount(): number
            public GetKeys(): System.Array$1<string>
            public GetObject($type: System.Type, $key?: string): any
            public GetObject($key: string, $defaultValue: any): any
            public GetDictionary($key?: string): System.Collections.Generic.IDictionary$2<string, any>
            public constructor($configKey: string)
            public constructor()
        }
        /** Helper class to generate form data to post to web servers using the UnityWebRequest or WWW classes.
        */
        class WWWForm extends System.Object {
            protected [__keep_incompatibility]: never;
            /** (Read Only) Returns the correct request headers for posting the form using the WWW class.
            */
            public get headers(): System.Collections.Generic.Dictionary$2<string, string>;
            /** (Read Only) The raw data to pass as the POST request body when sending the form.
            */
            public get data(): System.Array$1<number>;
            /** Add a simple field to the form.
            */
            public AddField($fieldName: string, $value: string): void
            /** Add a simple field to the form.
            */
            public AddField($fieldName: string, $value: string, $e: System.Text.Encoding): void
            /** Adds a simple field to the form.
            */
            public AddField($fieldName: string, $i: number): void
            /** Add binary data to the form.
            */
            public AddBinaryData($fieldName: string, $contents: System.Array$1<number>): void
            /** Add binary data to the form.
            */
            public AddBinaryData($fieldName: string, $contents: System.Array$1<number>, $fileName: string): void
            /** Add binary data to the form.
            */
            public AddBinaryData($fieldName: string, $contents: System.Array$1<number>, $fileName: string, $mimeType: string): void
            public constructor()
        }
        class WWWAudioExtensions extends System.Object {
            protected [__keep_incompatibility]: never;
        }
        /** A special collider for vehicle wheels.
        */
        class WheelCollider extends UnityEngine.Collider {
            protected [__keep_incompatibility]: never;
            /** The center of the wheel, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the wheel, measured in local space.
            */
            public get radius(): number;
            public set radius(value: number);
            /** Maximum extension distance of wheel suspension, measured in local space.
            */
            public get suspensionDistance(): number;
            public set suspensionDistance(value: number);
            /** The parameters of wheel's suspension. The suspension attempts to reach a target position by applying a linear force and a damping force.
            */
            public get suspensionSpring(): UnityEngine.JointSpring;
            public set suspensionSpring(value: UnityEngine.JointSpring);
            /** Limits the expansion velocity of the Wheel Collider's suspension. If you set this property on a Rigidbody that has several Wheel Colliders, such as a vehicle, then it affects all other Wheel Colliders on the Rigidbody.
            * @param $active Turns on/off the property
            */
            public get suspensionExpansionLimited(): boolean;
            public set suspensionExpansionLimited(value: boolean);
            /** Application point of the suspension and tire forces measured from the base of the resting wheel.
            */
            public get forceAppPointDistance(): number;
            public set forceAppPointDistance(value: number);
            /** The mass of the wheel, expressed in kilograms. Must be larger than zero. Typical values would be in range (20,80).
            */
            public get mass(): number;
            public set mass(value: number);
            /** The damping rate of the wheel. Must be larger than zero.
            */
            public get wheelDampingRate(): number;
            public set wheelDampingRate(value: number);
            /** Properties of tire friction in the direction the wheel is pointing in.
            */
            public get forwardFriction(): UnityEngine.WheelFrictionCurve;
            public set forwardFriction(value: UnityEngine.WheelFrictionCurve);
            /** Properties of tire friction in the sideways direction.
            */
            public get sidewaysFriction(): UnityEngine.WheelFrictionCurve;
            public set sidewaysFriction(value: UnityEngine.WheelFrictionCurve);
            /** Motor torque on the wheel axle expressed in Newton metres. Positive or negative depending on direction.
            */
            public get motorTorque(): number;
            public set motorTorque(value: number);
            /** Brake torque expressed in Newton metres.
            */
            public get brakeTorque(): number;
            public set brakeTorque(value: number);
            /** Steering angle in degrees, always around the local y-axis.
            */
            public get steerAngle(): number;
            public set steerAngle(value: number);
            /** Indicates whether the wheel currently collides with something (Read Only).
            */
            public get isGrounded(): boolean;
            /** Current wheel axle rotation speed, in rotations per minute (Read Only).
            */
            public get rpm(): number;
            /** The mass supported by this WheelCollider.
            */
            public get sprungMass(): number;
            public set sprungMass(value: number);
            /** Rotation speed of the wheel, measured in degrees per second.
            */
            public get rotationSpeed(): number;
            public set rotationSpeed(value: number);
            /** Reset the sprung masses of the vehicle.
            */
            public ResetSprungMasses(): void
            /** Configure vehicle sub-stepping parameters.
            * @param $speedThreshold The speed threshold of the sub-stepping algorithm.
            * @param $stepsBelowThreshold Amount of simulation sub-steps when vehicle's speed is below speedThreshold.
            * @param $stepsAboveThreshold Amount of simulation sub-steps when vehicle's speed is above speedThreshold.
            */
            public ConfigureVehicleSubsteps($speedThreshold: number, $stepsBelowThreshold: number, $stepsAboveThreshold: number): void
            /** Gets the world space pose of the wheel accounting for ground contact, suspension limits, steer angle, and rotation angle (angles in degrees).
            * @param $pos Position of the wheel in world space.
            * @param $quat Rotation of the wheel in world space.
            */
            public GetWorldPose($pos: $Ref<UnityEngine.Vector3>, $quat: $Ref<UnityEngine.Quaternion>): void
            /** Gets ground collision data for the wheel.
            */
            public GetGroundHit($hit: $Ref<UnityEngine.WheelHit>): boolean
            public constructor()
        }
        /** WheelFrictionCurve is used by the WheelCollider to describe friction properties of the wheel tire.
        */
        class WheelFrictionCurve extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Contact information for the wheel, reported by WheelCollider.
        */
        class WheelHit extends System.ValueType {
            protected [__keep_incompatibility]: never;
        }
        /** Wind Zones add realism to the trees you create by making them wave their branches and leaves as if blown by the wind.
        */
        class WindZone extends UnityEngine.Component {
            protected [__keep_incompatibility]: never;
            /** Defines the type of wind zone to be used (Spherical or Directional).
            */
            public get mode(): UnityEngine.WindZoneMode;
            public set mode(value: UnityEngine.WindZoneMode);
            /** Radius of the Spherical Wind Zone (only active if the WindZoneMode is set to Spherical).
            */
            public get radius(): number;
            public set radius(value: number);
            /** The primary wind force.
            */
            public get windMain(): number;
            public set windMain(value: number);
            /** The turbulence wind force.
            */
            public get windTurbulence(): number;
            public set windTurbulence(value: number);
            /** Defines how much the wind changes over time.
            */
            public get windPulseMagnitude(): number;
            public set windPulseMagnitude(value: number);
            /** Defines the frequency of the wind changes.
            */
            public get windPulseFrequency(): number;
            public set windPulseFrequency(value: number);
            public constructor()
        }
        /** Modes a Wind Zone can have, either Spherical or Directional.
        */
        enum WindZoneMode { Directional = 0, Spherical = 1 }
        class LightAnchor extends UnityEngine.MonoBehaviour {
            protected [__keep_incompatibility]: never;
            public get yaw(): number;
            public set yaw(value: number);
            public get pitch(): number;
            public set pitch(value: number);
            public get roll(): number;
            public set roll(value: number);
            public get distance(): number;
            public set distance(value: number);
            public get frameSpace(): UnityEngine.LightAnchor.UpDirection;
            public set frameSpace(value: UnityEngine.LightAnchor.UpDirection);
            public get anchorPosition(): UnityEngine.Vector3;
            public get anchorPositionOverride(): UnityEngine.Transform;
            public set anchorPositionOverride(value: UnityEngine.Transform);
            public get anchorPositionOffset(): UnityEngine.Vector3;
            public set anchorPositionOffset(value: UnityEngine.Vector3);
            public static NormalizeAngleDegree($angle: number): number
            public SynchronizeOnTransform($camera: UnityEngine.Camera): void
            public UpdateTransform($camera: UnityEngine.Camera, $anchor: UnityEngine.Vector3): void
            public constructor()
        }
        /** A representation of audio sources in 3D.
        */
        class AudioSource extends UnityEngine.AudioBehaviour {
            protected [__keep_incompatibility]: never;
        }
        /** Renders meshes inserted by the MeshFilter or TextMesh.
        */
        class MeshRenderer extends UnityEngine.Renderer {
            protected [__keep_incompatibility]: never;
        }
        /** Wrapping modes for text that reaches the horizontal boundary.
        */
        enum HorizontalWrapMode { Wrap = 0, Overflow = 1 }
        /** Wrapping modes for text that reaches the vertical boundary.
        */
        enum VerticalWrapMode { Truncate = 0, Overflow = 1 }
        /** A collection of common math functions.
        */
        class Mathf extends System.ValueType {
            protected [__keep_incompatibility]: never;
            /** The well-known 3.14159265358979... value (Read Only).
            */
            public static PI: number
            /** A representation of positive infinity (Read Only).
            */
            public static Infinity: number
            /** A representation of negative infinity (Read Only).
            */
            public static NegativeInfinity: number
            /** Degrees-to-radians conversion constant (Read Only).
            */
            public static Deg2Rad: number
            /** Radians-to-degrees conversion constant (Read Only).
            */
            public static Rad2Deg: number
            /** A tiny floating point value (Read Only).
            */
            public static Epsilon: number
            /** Returns the closest power of two value.
            */
            public static ClosestPowerOfTwo($value: number): number
            /** Returns true if the value is power of two.
            */
            public static IsPowerOfTwo($value: number): boolean
            /** Returns the next power of two that is equal to, or greater than, the argument.
            */
            public static NextPowerOfTwo($value: number): number
            /** Converts the given value from gamma (sRGB) to linear color space.
            */
            public static GammaToLinearSpace($value: number): number
            /** Converts the given value from linear to gamma (sRGB) color space.
            */
            public static LinearToGammaSpace($value: number): number
            /** Convert a color temperature in Kelvin to RGB color.
            * @param $kelvin Temperature in Kelvin. Range 1000 to 40000 Kelvin.
            * @returns Correlated Color Temperature as floating point RGB color. 
            */
            public static CorrelatedColorTemperatureToRGB($kelvin: number): UnityEngine.Color
            /** Encode a floating point value into a 16-bit representation.
            * @param $val The floating point value to convert.
            * @returns The converted half-precision float, stored in a 16-bit unsigned integer. 
            */
            public static FloatToHalf($val: number): number
            /** Convert a half precision float to a 32-bit floating point value.
            * @param $val The half precision value to convert.
            * @returns The decoded 32-bit float. 
            */
            public static HalfToFloat($val: number): number
            /** Generate 2D Perlin noise.
            * @param $x X-coordinate of sample point.
            * @param $y Y-coordinate of sample point.
            * @returns Value between 0.0 and 1.0. (Return value might be slightly below 0.0 or beyond 1.0.) 
            */
            public static PerlinNoise($x: number, $y: number): number
            /** Generates a 1D pseudo-random pattern of float values across a 2D plane.
            * @param $x The X-coordinate of the given sample point.
            * @returns A value in the range of 0.0 and 1.0. The value might be slightly higher or lower than this range. 
            */
            public static PerlinNoise1D($x: number): number
            /** Returns the sine of angle f.
            * @param $f The input angle, in radians.
            * @returns The return value between -1 and +1. 
            */
            public static Sin($f: number): number
            /** Returns the cosine of angle f.
            * @param $f The input angle, in radians.
            * @returns The return value between -1 and 1. 
            */
            public static Cos($f: number): number
            /** Returns the tangent of angle f in radians.
            */
            public static Tan($f: number): number
            /** Returns the arc-sine of f - the angle in radians whose sine is f.
            */
            public static Asin($f: number): number
            /** Returns the arc-cosine of f - the angle in radians whose cosine is f.
            */
            public static Acos($f: number): number
            /** Returns the arc-tangent of f - the angle in radians whose tangent is f.
            */
            public static Atan($f: number): number
            /** Returns the angle in radians whose Tan is y/x.
            */
            public static Atan2($y: number, $x: number): number
            /** Returns square root of f.
            */
            public static Sqrt($f: number): number
            /** Returns the absolute value of f.
            */
            public static Abs($f: number): number
            /** Returns the absolute value of value.
            */
            public static Abs($value: number): number
            /** Returns the smallest of two or more values.
            */
            public static Min($a: number, $b: number): number
            /** Returns the smallest of two or more values.
            */
            public static Min(...values: number[]): number
            /** Returns the largest of two or more values. When comparing negative values, values closer to zero are considered larger.
            */
            public static Max($a: number, $b: number): number
            /** Returns the largest of two or more values. When comparing negative values, values closer to zero are considered larger.
            */
            public static Max(...values: number[]): number
            /** Returns f raised to power p.
            */
            public static Pow($f: number, $p: number): number
            /** Returns e raised to the specified power.
            */
            public static Exp($power: number): number
            /** Returns the logarithm of a specified number in a specified base.
            */
            public static Log($f: number, $p: number): number
            /** Returns the natural (base e) logarithm of a specified number.
            */
            public static Log($f: number): number
            /** Returns the base 10 logarithm of a specified number.
            */
            public static Log10($f: number): number
            /** Returns the smallest integer greater than or equal to f.
            */
            public static Ceil($f: number): number
            /** Returns the largest integer smaller than or equal to f.
            */
            public static Floor($f: number): number
            /** Returns f rounded to the nearest integer.
            */
            public static Round($f: number): number
            /** Returns the smallest integer greater to or equal to f.
            */
            public static CeilToInt($f: number): number
            /** Returns the largest integer smaller to or equal to f.
            */
            public static FloorToInt($f: number): number
            /** Returns f rounded to the nearest integer.
            */
            public static RoundToInt($f: number): number
            /** Returns the sign of f.
            */
            public static Sign($f: number): number
            /** Clamps the given value between the given minimum float and maximum float values.  Returns the given value if it is within the minimum and maximum range.
            * @param $value The floating point value to restrict inside the range defined by the minimum and maximum values.
            * @param $min The minimum floating point value to compare against.
            * @param $max The maximum floating point value to compare against.
            * @returns The float result between the minimum and maximum values. 
            */
            public static Clamp($value: number, $min: number, $max: number): number
            /** Clamps value between 0 and 1 and returns value.
            */
            public static Clamp01($value: number): number
            /** Linearly interpolates between a and b by t.
            * @param $a The start value.
            * @param $b The end value.
            * @param $t The interpolation value between the two floats.
            * @returns The interpolated float result between the two float values. 
            */
            public static Lerp($a: number, $b: number, $t: number): number
            /** Linearly interpolates between a and b by t with no limit to t.
            * @param $a The start value.
            * @param $b The end value.
            * @param $t The interpolation between the two floats.
            * @returns The float value as a result from the linear interpolation. 
            */
            public static LerpUnclamped($a: number, $b: number, $t: number): number
            /** Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            * @param $a The start angle. A float expressed in degrees.
            * @param $b The end angle. A float expressed in degrees.
            * @param $t The interpolation value between the start and end angles. This value is clamped to the range [0, 1].
            * @returns Returns the interpolated float result between angle a and angle b, based on the interpolation value t. 
            */
            public static LerpAngle($a: number, $b: number, $t: number): number
            /** Moves a value current towards target.
            * @param $current The current value.
            * @param $target The value to move towards.
            * @param $maxDelta The maximum change applied to the current value.
            */
            public static MoveTowards($current: number, $target: number, $maxDelta: number): number
            /** Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            */
            public static MoveTowardsAngle($current: number, $target: number, $maxDelta: number): number
            /** Interpolates between min and max with smoothing at the limits.
            */
            public static SmoothStep($from: number, $to: number, $t: number): number
            public static Gamma($value: number, $absmax: number, $gamma: number): number
            /** Compares two floating point values and returns true if they are similar.
            */
            public static Approximately($a: number, $b: number): boolean
            /** Gradually moves the current value towards a target value, over a specified time and at a specified velocity.
            * @param $current The current value.
            * @param $target The target value.
            * @param $currentVelocity Use this parameter to specify the initial velocity to move the current value towards the target value. This method updates the currentVelocity based on this movement and smooth-damping.
            * @param $smoothTime The approximate time it takes for the current value to reach the target value. The lower the smoothTime, the faster the current value reaches the target value. The minimum smoothTime is 0.0001. If a lower value is specified, it is clamped to the minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            * @returns The current value after moving one step towards the target value. 
            */
            public static SmoothDamp($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number): number
            /** Gradually moves the current value towards a target value, over a specified time and at a specified velocity.
            * @param $current The current value.
            * @param $target The target value.
            * @param $currentVelocity Use this parameter to specify the initial velocity to move the current value towards the target value. This method updates the currentVelocity based on this movement and smooth-damping.
            * @param $smoothTime The approximate time it takes for the current value to reach the target value. The lower the smoothTime, the faster the current value reaches the target value. The minimum smoothTime is 0.0001. If a lower value is specified, it is clamped to the minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            * @returns The current value after moving one step towards the target value. 
            */
            public static SmoothDamp($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number): number
            /** Gradually moves the current value towards a target value, over a specified time and at a specified velocity.
            * @param $current The current value.
            * @param $target The target value.
            * @param $currentVelocity Use this parameter to specify the initial velocity to move the current value towards the target value. This method updates the currentVelocity based on this movement and smooth-damping.
            * @param $smoothTime The approximate time it takes for the current value to reach the target value. The lower the smoothTime, the faster the current value reaches the target value. The minimum smoothTime is 0.0001. If a lower value is specified, it is clamped to the minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            * @returns The current value after moving one step towards the target value. 
            */
            public static SmoothDamp($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number): number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number): number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number): number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number): number
            /** Loops the value t, so that it is never larger than length and never smaller than 0.
            */
            public static Repeat($t: number, $length: number): number
            /** PingPong returns a value that increments and decrements between zero and the length. It follows the triangle wave formula where the bottom is set to zero and the peak is set to length.
            */
            public static PingPong($t: number, $length: number): number
            /** Determines where a value lies between two points.
            * @param $a The start of the range.
            * @param $b The end of the range.
            * @param $value The point within the range you want to calculate.
            * @returns A value between zero and one, representing where the "value" parameter falls within the range defined by a and b. 
            */
            public static InverseLerp($a: number, $b: number, $value: number): number
            /** Calculates the shortest difference between two angles.
            * @param $current The current angle in degrees.
            * @param $target The target angle in degrees.
            * @returns A value between -179 and 180, in degrees. 
            */
            public static DeltaAngle($current: number, $target: number): number
        }
    }

    namespace UnityEngine.Networking {
        /** Responsible for rejecting or accepting certificates received on https requests.
        */
        class CertificateHandler extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Signals that this [CertificateHandler] is no longer being used, and should clean up any resources it is using.
            */
            public Dispose(): void
        }
        /** Manage and process HTTP response body data received from a remote server.
        */
        class DownloadHandler extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Returns true if this DownloadHandler has been informed by its parent UnityWebRequest that all data has been received, and this DownloadHandler has completed any necessary post-download processing. (Read Only)
            */
            public get isDone(): boolean;
            /** Error message describing a failure that occurred inside the download handler.
            */
            public get error(): string;
            /** Provides direct access to downloaded data.
            */
            public get nativeData(): Unity.Collections.NativeArray$1.ReadOnly<number>;
            /** Returns the raw bytes downloaded from the remote server, or null. (Read Only)
            */
            public get data(): System.Array$1<number>;
            /** Convenience property. Returns the bytes from data interpreted as a UTF8 string. (Read Only)
            */
            public get text(): string;
            /** Signals that this DownloadHandler is no longer being used, and should clean up any resources it is using.
            */
            public Dispose(): void
        }
        /** A general-purpose DownloadHandler implementation which stores received data in a native byte buffer.
        */
        class DownloadHandlerBuffer extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Returns a copy of the native-memory buffer interpreted as a UTF8 string.
            * @param $www A finished UnityWebRequest object with DownloadHandlerBuffer attached.
            * @returns The same as DownloadHandlerBuffer.text 
            */
            public static GetContent($www: UnityEngine.Networking.UnityWebRequest): string
            public constructor()
        }
        /** Provides methods to communicate with web servers.
        */
        class UnityWebRequest extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** The string "GET", commonly used as the verb for an HTTP GET request.
            */
            public static kHttpVerbGET: string
            /** The string "HEAD", commonly used as the verb for an HTTP HEAD request.
            */
            public static kHttpVerbHEAD: string
            /** The string "POST", commonly used as the verb for an HTTP POST request.
            */
            public static kHttpVerbPOST: string
            /** The string "PUT", commonly used as the verb for an HTTP PUT request.
            */
            public static kHttpVerbPUT: string
            /** The string "CREATE", commonly used as the verb for an HTTP CREATE request.
            */
            public static kHttpVerbCREATE: string
            /** The string "DELETE", commonly used as the verb for an HTTP DELETE request.
            */
            public static kHttpVerbDELETE: string
            /** If true, any CertificateHandler attached to this UnityWebRequest will have CertificateHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeCertificateHandlerOnDispose(): boolean;
            public set disposeCertificateHandlerOnDispose(value: boolean);
            /** If true, any DownloadHandler attached to this UnityWebRequest will have DownloadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeDownloadHandlerOnDispose(): boolean;
            public set disposeDownloadHandlerOnDispose(value: boolean);
            /** If true, any UploadHandler attached to this UnityWebRequest will have UploadHandler.Dispose called automatically when UnityWebRequest.Dispose is called.
            */
            public get disposeUploadHandlerOnDispose(): boolean;
            public set disposeUploadHandlerOnDispose(value: boolean);
            /** Defines the HTTP verb used by this UnityWebRequest, such as GET or POST.
            */
            public get method(): string;
            public set method(value: string);
            /** A human-readable string describing any system errors encountered by this UnityWebRequest object while handling HTTP requests or responses. The default value is null. (Read Only)
            */
            public get error(): string;
            /** Determines whether this UnityWebRequest will include Expect: 100-Continue in its outgoing request headers. (Default: true).
            */
            public get useHttpContinue(): boolean;
            public set useHttpContinue(value: boolean);
            /** Defines the target URL for the UnityWebRequest to communicate with.
            */
            public get url(): string;
            public set url(value: string);
            /** Defines the target URI for the UnityWebRequest to communicate with.
            */
            public get uri(): System.Uri;
            public set uri(value: System.Uri);
            /** The numeric HTTP response code returned by the server, such as 200, 404 or 500. (Read Only)
            */
            public get responseCode(): bigint;
            /** Returns a floating-point value between 0.0 and 1.0, indicating the progress of uploading body data to the server.
            */
            public get uploadProgress(): number;
            /** Returns true while a UnityWebRequest’s configuration properties can be altered. (Read Only)
            */
            public get isModifiable(): boolean;
            /** Returns true after the UnityWebRequest has finished communicating with the remote server. (Read Only)
            */
            public get isDone(): boolean;
            /** The result of this UnityWebRequest.
            */
            public get result(): UnityEngine.Networking.UnityWebRequest.Result;
            /** Returns a floating-point value between 0.0 and 1.0, indicating the progress of downloading body data from the server. (Read Only)
            */
            public get downloadProgress(): number;
            /** Returns the number of bytes of body data the system has uploaded to the remote server. (Read Only)
            */
            public get uploadedBytes(): bigint;
            /** Returns the number of bytes of body data the system has downloaded from the remote server. (Read Only)
            */
            public get downloadedBytes(): bigint;
            /** Indicates the number of redirects which this UnityWebRequest will follow before halting with a “Redirect Limit Exceeded” system error.
            */
            public get redirectLimit(): number;
            public set redirectLimit(value: number);
            /** Holds a reference to the UploadHandler object which manages body data to be uploaded to the remote server.
            */
            public get uploadHandler(): UnityEngine.Networking.UploadHandler;
            public set uploadHandler(value: UnityEngine.Networking.UploadHandler);
            /** Holds a reference to a DownloadHandler object, which manages body data received from the remote server by this UnityWebRequest.
            */
            public get downloadHandler(): UnityEngine.Networking.DownloadHandler;
            public set downloadHandler(value: UnityEngine.Networking.DownloadHandler);
            /** Holds a reference to a CertificateHandler object, which manages certificate validation for this UnityWebRequest.
            */
            public get certificateHandler(): UnityEngine.Networking.CertificateHandler;
            public set certificateHandler(value: UnityEngine.Networking.CertificateHandler);
            /** Sets UnityWebRequest to attempt to abort after the number of seconds in timeout have passed.
            */
            public get timeout(): number;
            public set timeout(value: number);
            /** Clears stored cookies from the cache.
            * @param $uri An optional URL to define which cookies are removed. Only cookies that apply to this URL are removed from the cache.
            */
            public static ClearCookieCache(): void
            /** Clears stored cookies from the cache.
            * @param $uri An optional URL to define which cookies are removed. Only cookies that apply to this URL are removed from the cache.
            */
            public static ClearCookieCache($uri: System.Uri): void
            /** Signals that this UnityWebRequest is no longer being used, and should clean up any resources it is using.
            */
            public Dispose(): void
            /** Begin communicating with the remote server.
            */
            public SendWebRequest(): UnityEngine.Networking.UnityWebRequestAsyncOperation
            /** If in progress, halts the UnityWebRequest as soon as possible.
            */
            public Abort(): void
            /** Retrieves the value of a custom request header.
            * @param $name Name of the custom request header. Case-insensitive.
            * @returns The value of the custom request header. If no custom header with a matching name has been set, returns an empty string. 
            */
            public GetRequestHeader($name: string): string
            /** Set a HTTP request header to a custom value.
            * @param $name The key of the header to be set. Case-sensitive.
            * @param $value The header's intended value.
            */
            public SetRequestHeader($name: string, $value: string): void
            /** Retrieves the value of a response header from the latest HTTP response received.
            * @param $name The name of the HTTP header to retrieve. Case-insensitive.
            * @returns The value of the HTTP header from the latest HTTP response. If no header with a matching name has been received, or no responses have been received, returns null. 
            */
            public GetResponseHeader($name: string): string
            /** Retrieves a dictionary containing all the response headers received by this UnityWebRequest in the latest HTTP response.
            * @returns A dictionary containing all the response headers received in the latest HTTP response. If no responses have been received, returns null. 
            */
            public GetResponseHeaders(): System.Collections.Generic.Dictionary$2<string, string>
            /** Create a UnityWebRequest for HTTP GET.
            * @param $uri The URI of the resource to retrieve via HTTP GET.
            * @returns An object that retrieves data from the uri. 
            */
            public static Get($uri: string): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest for HTTP GET.
            * @param $uri The URI of the resource to retrieve via HTTP GET.
            * @returns An object that retrieves data from the uri. 
            */
            public static Get($uri: System.Uri): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured for HTTP DELETE.
            * @param $uri The URI to which a DELETE request should be sent.
            * @returns A UnityWebRequest configured to send an HTTP DELETE request. 
            */
            public static Delete($uri: string): UnityEngine.Networking.UnityWebRequest
            public static Delete($uri: System.Uri): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send a HTTP HEAD request.
            * @param $uri The URI to which to send a HTTP HEAD request.
            * @returns A UnityWebRequest configured to transmit a HTTP HEAD request. 
            */
            public static Head($uri: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send a HTTP HEAD request.
            * @param $uri The URI to which to send a HTTP HEAD request.
            * @returns A UnityWebRequest configured to transmit a HTTP HEAD request. 
            */
            public static Head($uri: System.Uri): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param $uri The URI to which the data will be sent.
            * @param $bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="https:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put($uri: string, $bodyData: System.Array$1<number>): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param $uri The URI to which the data will be sent.
            * @param $bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="https:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put($uri: System.Uri, $bodyData: System.Array$1<number>): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param $uri The URI to which the data will be sent.
            * @param $bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="https:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put($uri: string, $bodyData: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to upload raw data to a remote server via HTTP PUT.
            * @param $uri The URI to which the data will be sent.
            * @param $bodyData The data to transmit to the remote server.
            If a string, the string will be converted to raw bytes via <a href="https:msdn.microsoft.comen-uslibrarysystem.text.encoding.utf8">System.Text.Encoding.UTF8<a>.
            * @returns A UnityWebRequest configured to transmit bodyData to uri via HTTP PUT. 
            */
            public static Put($uri: System.Uri, $bodyData: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which form data will be transmitted.
            * @param $form An HTML form to send.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static PostWwwForm($uri: string, $form: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which form data will be transmitted.
            * @param $form An HTML form to send.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static PostWwwForm($uri: System.Uri, $form: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which the string will be transmitted.
            * @param $postData Form body data. Will be converted to UTF-8 string.
            * @param $contentType Value for the Content-Type header, for example application/json.
            * @returns A UnityWebRequest configured to send string to uri via POST. 
            */
            public static Post($uri: string, $postData: string, $contentType: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which the string will be transmitted.
            * @param $postData Form body data. Will be converted to UTF-8 string.
            * @param $contentType Value for the Content-Type header, for example application/json.
            * @returns A UnityWebRequest configured to send string to uri via POST. 
            */
            public static Post($uri: System.Uri, $postData: string, $contentType: string): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which form data will be transmitted.
            * @param $formData Form fields or files encapsulated in a WWWForm object, for formatting and transmission to the remote server.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static Post($uri: string, $formData: UnityEngine.WWWForm): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest configured to send form data to a server via HTTP POST.
            * @param $uri The target URI to which form data will be transmitted.
            * @param $formData Form fields or files encapsulated in a WWWForm object, for formatting and transmission to the remote server.
            * @returns A UnityWebRequest configured to send form data to uri via POST. 
            */
            public static Post($uri: System.Uri, $formData: UnityEngine.WWWForm): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: string, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: System.Uri, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: string, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: System.Uri, $multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: string, $formFields: System.Collections.Generic.Dictionary$2<string, string>): UnityEngine.Networking.UnityWebRequest
            public static Post($uri: System.Uri, $formFields: System.Collections.Generic.Dictionary$2<string, string>): UnityEngine.Networking.UnityWebRequest
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param $s A string with characters to be escaped.
            * @param $e The text encoding to use.
            */
            public static EscapeURL($s: string): string
            /** Escapes characters in a string to ensure they are URL-friendly.
            * @param $s A string with characters to be escaped.
            * @param $e The text encoding to use.
            */
            public static EscapeURL($s: string, $e: System.Text.Encoding): string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param $s A string containing escaped characters.
            * @param $e The text encoding to use.
            */
            public static UnEscapeURL($s: string): string
            /** Converts URL-friendly escape sequences back to normal text.
            * @param $s A string containing escaped characters.
            * @param $e The text encoding to use.
            */
            public static UnEscapeURL($s: string, $e: System.Text.Encoding): string
            public static SerializeFormSections($multipartFormSections: System.Collections.Generic.List$1<UnityEngine.Networking.IMultipartFormSection>, $boundary: System.Array$1<number>): System.Array$1<number>
            /** Generate a random 40-byte array for use as a multipart form boundary.
            * @returns 40 random bytes, guaranteed to contain only printable ASCII values. 
            */
            public static GenerateBoundary(): System.Array$1<number>
            public static SerializeSimpleForm($formFields: System.Collections.Generic.Dictionary$2<string, string>): System.Array$1<number>
            public constructor()
            public constructor($url: string)
            public constructor($uri: System.Uri)
            public constructor($url: string, $method: string)
            public constructor($uri: System.Uri, $method: string)
            public constructor($url: string, $method: string, $downloadHandler: UnityEngine.Networking.DownloadHandler, $uploadHandler: UnityEngine.Networking.UploadHandler)
            public constructor($uri: System.Uri, $method: string, $downloadHandler: UnityEngine.Networking.DownloadHandler, $uploadHandler: UnityEngine.Networking.UploadHandler)
        }
        /** An abstract base class for user-created scripting-driven DownloadHandler implementations.
        */
        class DownloadHandlerScript extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public constructor()
            public constructor($preallocatedBuffer: System.Array$1<number>)
        }
        /** Download handler for saving the downloaded data to file.
        */
        class DownloadHandlerFile extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Should the created file be removed if download is aborted (manually or due to an error). Default: false.
            */
            public get removeFileOnAbort(): boolean;
            public set removeFileOnAbort(value: boolean);
            public constructor($path: string)
            public constructor($path: string, $append: boolean)
        }
        interface IMultipartFormSection {
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            sectionName: string
            /** Returns the raw binary data contained in this section. Must not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Must not be null or empty. 
            */
            sectionData: System.Array$1<number>
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            fileName: string
            /** Returns the value to use in the Content-Type header for this form section.
            * @returns The value to use in the Content-Type header, or null. 
            */
            contentType: string
        }
        /** A helper object for form sections containing generic, non-file data.
        */
        class MultipartFormDataSection extends System.Object implements UnityEngine.Networking.IMultipartFormSection {
            protected [__keep_incompatibility]: never;
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            public get sectionName(): string;
            /** Returns the raw binary data contained in this section. Will not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Will not be null or empty. 
            */
            public get sectionData(): System.Array$1<number>;
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            public get fileName(): string;
            /** Returns the value to use in this section's Content-Type header.
            * @returns The Content-Type header for this section, or null. 
            */
            public get contentType(): string;
            public constructor($name: string, $data: System.Array$1<number>, $contentType: string)
            public constructor($name: string, $data: System.Array$1<number>)
            public constructor($data: System.Array$1<number>)
            public constructor($name: string, $data: string, $encoding: System.Text.Encoding, $contentType: string)
            public constructor($name: string, $data: string, $contentType: string)
            public constructor($name: string, $data: string)
            public constructor($data: string)
        }
        /** A helper object for adding file uploads to multipart forms via the [IMultipartFormSection] API.
        */
        class MultipartFormFileSection extends System.Object implements UnityEngine.Networking.IMultipartFormSection {
            protected [__keep_incompatibility]: never;
            /** Returns the name of this section, if any.
            * @returns The section's name, or null. 
            */
            public get sectionName(): string;
            /** Returns the raw binary data contained in this section. Will not return null or a zero-length array.
            * @returns The raw binary data contained in this section. Will not be null or empty. 
            */
            public get sectionData(): System.Array$1<number>;
            /** Returns a string denoting the desired filename of this section on the destination server.
            * @returns The desired file name of this section, or null if this is not a file section. 
            */
            public get fileName(): string;
            /** Returns the value of the section's Content-Type header.
            * @returns The Content-Type header for this section, or null. 
            */
            public get contentType(): string;
            public constructor($name: string, $data: System.Array$1<number>, $fileName: string, $contentType: string)
            public constructor($data: System.Array$1<number>)
            public constructor($fileName: string, $data: System.Array$1<number>)
            public constructor($name: string, $data: string, $dataEncoding: System.Text.Encoding, $fileName: string)
            public constructor($data: string, $dataEncoding: System.Text.Encoding, $fileName: string)
            public constructor($data: string, $fileName: string)
        }
        /** Asynchronous operation object returned from UnityWebRequest.SendWebRequest().
        You can yield until it continues, register an event handler with AsyncOperation.completed, or manually check whether it's done (AsyncOperation.isDone) or progress (AsyncOperation.progress).
        */
        class UnityWebRequestAsyncOperation extends UnityEngine.AsyncOperation {
            protected [__keep_incompatibility]: never;
            /** Returns the associated UnityWebRequest that created the operation.
            */
            public get webRequest(): UnityEngine.Networking.UnityWebRequest;
            public constructor()
        }
        /** Helper object for UnityWebRequests. Manages the buffering and transmission of body data during HTTP requests.
        */
        class UploadHandler extends System.Object implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** The raw data which will be transmitted to the remote server as body data. (Read Only)
            */
            public get data(): System.Array$1<number>;
            /** Determines the default Content-Type header which will be transmitted with the outbound HTTP request.
            */
            public get contentType(): string;
            public set contentType(value: string);
            /** Returns the proportion of data uploaded to the remote server compared to the total amount of data to upload. (Read Only)
            */
            public get progress(): number;
            /** Signals that this UploadHandler is no longer being used, and should clean up any resources it is using.
            */
            public Dispose(): void
        }
        /** A general-purpose UploadHandler subclass, using a native-code memory buffer.
        */
        class UploadHandlerRaw extends UnityEngine.Networking.UploadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public constructor($data: System.Array$1<number>)
            public constructor($data: Unity.Collections.NativeArray$1<number>, $transferOwnership: boolean)
            public constructor($data: Unity.Collections.NativeArray$1.ReadOnly<number>)
        }
        /** A specialized UploadHandler that reads data from a given file and sends raw bytes to the server as the request body.
        */
        class UploadHandlerFile extends UnityEngine.Networking.UploadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            public constructor($filePath: string)
        }
        /** Helpers for downloading asset bundles using UnityWebRequest.
        */
        class UnityWebRequestAssetBundle extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: string): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: System.Uri): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: string, $crc: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: System.Uri, $crc: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: string, $version: number, $crc: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: System.Uri, $version: number, $crc: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: string, $hash: UnityEngine.Hash128, $crc?: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: System.Uri, $hash: UnityEngine.Hash128, $crc?: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: string, $cachedAssetBundle: UnityEngine.CachedAssetBundle, $crc?: number): UnityEngine.Networking.UnityWebRequest
            /** Creates a UnityWebRequest optimized for downloading a Unity Asset Bundle via HTTP GET.
            * @param $uri The URI of the asset bundle to download.
            * @param $crc If nonzero, this number will be compared to the checksum of the downloaded asset bundle data. If the CRCs do not match, an error will be logged and the asset bundle will not be loaded. If set to zero, CRC checking will be skipped.
            * @param $version An integer version number, which will be compared to the cached version of the asset bundle to download. Increment this number to force Unity to redownload a cached asset bundle.
            Analogous to the version parameter for WWW.LoadFromCacheOrDownload.
            * @param $hash A version hash. If this hash does not match the hash for the cached version of this asset bundle, the asset bundle will be redownloaded.
            * @param $cachedAssetBundle A structure used to download a given version of AssetBundle to a customized cache path.
            * @returns A UnityWebRequest configured to downloading a Unity Asset Bundle. 
            */
            public static GetAssetBundle($uri: System.Uri, $cachedAssetBundle: UnityEngine.CachedAssetBundle, $crc?: number): UnityEngine.Networking.UnityWebRequest
        }
        /** A DownloadHandler subclass specialized for downloading AssetBundles.
        */
        class DownloadHandlerAssetBundle extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded AssetBundle, or null. (Read Only)
            */
            public get assetBundle(): UnityEngine.AssetBundle;
            /** If true, the AssetBundle will be loaded as part of the UnityWebRequest process. If false, the AssetBundle will be loaded on demand when accessing the DownloadHandlerAssetBundle.assetBundle property.
            */
            public get autoLoadAssetBundle(): boolean;
            public set autoLoadAssetBundle(value: boolean);
            /** Returns true if the data downloading portion of the operation is complete.
            */
            public get isDownloadComplete(): boolean;
            /** Returns the downloaded AssetBundle, or null.
            * @param $www A finished UnityWebRequest object with DownloadHandlerAssetBundle attached.
            * @returns The same as DownloadHandlerAssetBundle.assetBundle 
            */
            public static GetContent($www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AssetBundle
            public constructor($url: string, $crc: number)
            public constructor($url: string, $version: number, $crc: number)
            public constructor($url: string, $hash: UnityEngine.Hash128, $crc: number)
            public constructor($url: string, $name: string, $hash: UnityEngine.Hash128, $crc: number)
            public constructor($url: string, $cachedBundle: UnityEngine.CachedAssetBundle, $crc: number)
        }
        /** A DownloadHandler subclass specialized for downloading audio data for use as AudioClip objects.
        */
        class DownloadHandlerAudioClip extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded AudioClip, or null. (Read Only)
            */
            public get audioClip(): UnityEngine.AudioClip;
            /** Create streaming AudioClip.
            */
            public get streamAudio(): boolean;
            public set streamAudio(value: boolean);
            /** Create AudioClip that is compressed in memory.
            Note: When streamAudio is true, it supersedes compression, and the download handler creates an AudioClip similar to an imported clip with the loadType AudioClipLoadType.Streaming.
            */
            public get compressed(): boolean;
            public set compressed(value: boolean);
            /** Returns the downloaded AudioClip, or null.
            * @param $www A finished UnityWebRequest object with DownloadHandlerAudioClip attached.
            * @returns The same as DownloadHandlerAudioClip.audioClip 
            */
            public static GetContent($www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AudioClip
            public constructor($url: string, $audioType: UnityEngine.AudioType)
            public constructor($uri: System.Uri, $audioType: UnityEngine.AudioType)
        }
        /** Helpers for downloading multimedia files using UnityWebRequest.
        */
        class UnityWebRequestMultimedia extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Create a UnityWebRequest to download an audio clip via HTTP GET and create an AudioClip based on the retrieved data.
            * @param $uri The URI of the audio clip to download.
            * @param $audioType The type of audio encoding for the downloaded audio clip. See AudioType.
            * @returns A UnityWebRequest properly configured to download an audio clip and convert it to an AudioClip. 
            */
            public static GetAudioClip($uri: string, $audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest to download an audio clip via HTTP GET and create an AudioClip based on the retrieved data.
            * @param $uri The URI of the audio clip to download.
            * @param $audioType The type of audio encoding for the downloaded audio clip. See AudioType.
            * @returns A UnityWebRequest properly configured to download an audio clip and convert it to an AudioClip. 
            */
            public static GetAudioClip($uri: System.Uri, $audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest
        }
        /** A DownloadHandler subclass specialized for downloading images for use as Texture objects.
        */
        class DownloadHandlerTexture extends UnityEngine.Networking.DownloadHandler implements System.IDisposable {
            protected [__keep_incompatibility]: never;
            /** Returns the downloaded Texture, or null. (Read Only)
            */
            public get texture(): UnityEngine.Texture2D;
            /** Returns the downloaded Texture, or null.
            * @param $www A finished UnityWebRequest object with DownloadHandlerTexture attached.
            * @returns The same as DownloadHandlerTexture.texture 
            */
            public static GetContent($www: UnityEngine.Networking.UnityWebRequest): UnityEngine.Texture2D
            public constructor()
            public constructor($readable: boolean)
        }
        /** Helpers for downloading image files into Textures using UnityWebRequest.
        */
        class UnityWebRequestTexture extends System.Object {
            protected [__keep_incompatibility]: never;
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param $uri The URI of the image to download.
            * @param $nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture($uri: string): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param $uri The URI of the image to download.
            * @param $nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture($uri: System.Uri): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param $uri The URI of the image to download.
            * @param $nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture($uri: string, $nonReadable: boolean): UnityEngine.Networking.UnityWebRequest
            /** Create a UnityWebRequest intended to download an image via HTTP GET and create a Texture based on the retrieved data.
            * @param $uri The URI of the image to download.
            * @param $nonReadable If true, the texture's raw data will not be accessible to script. This can conserve memory. Default: false.
            * @returns A UnityWebRequest properly configured to download an image and convert it to a Texture. 
            */
            public static GetTexture($uri: System.Uri, $nonReadable: boolean): UnityEngine.Networking.UnityWebRequest
        }
    }

    namespace UnityEngine.Networking.UnityWebRequest {
        enum Result { InProgress = 0, Success = 1, ConnectionError = 2, ProtocolError = 3, DataProcessingError = 4 }
    }
}
